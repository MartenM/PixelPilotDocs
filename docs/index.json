{
  "api/PixelPilot.ChatCommands.CommandManager.html": {
    "href": "api/PixelPilot.ChatCommands.CommandManager.html",
    "title": "Class CommandManager | PixelPilot",
    "keywords": "Class CommandManager Namespace PixelPilot.ChatCommands Assembly PixelPilot.ChatCommands.dll public class CommandManager : PixelChatCommandManager<Player>, IChatCommandManager Inheritance object PixelChatCommandManager<Player> CommandManager Implements IChatCommandManager Inherited Members PixelChatCommandManager<Player>.CommandPrefixes PixelChatCommandManager<Player>.ChatCommands PixelChatCommandManager<Player>.HelpFormatter PixelChatCommandManager<Player>.GetAvailableCommands(ICommandSender) PixelChatCommandManager<Player>.OnPlayerPacket(object, IPixelGamePacket) PixelChatCommandManager<Player>.CreateSender(Player) PixelChatCommandManager<Player>.AddCommand(ChatCommand) PixelChatCommandManager<Player>.AddHelpCommand() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandManager(PixelPilotClient, PixelPlayerManager<Player>) public CommandManager(PixelPilotClient client, PixelPlayerManager<Player> pixelPlayerManager) Parameters client PixelPilotClient pixelPlayerManager PixelPlayerManager<Player>"
  },
  "api/PixelPilot.ChatCommands.CommandSender.html": {
    "href": "api/PixelPilot.ChatCommands.CommandSender.html",
    "title": "Class CommandSender | PixelPilot",
    "keywords": "Class CommandSender Namespace PixelPilot.ChatCommands Assembly PixelPilot.ChatCommands.dll public class CommandSender : ICommandSender Inheritance object CommandSender Implements ICommandSender Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandSender(IPixelPlayer, PixelPilotClient) public CommandSender(IPixelPlayer player, PixelPilotClient client) Parameters player IPixelPlayer client PixelPilotClient Properties Player public IPixelPlayer Player { get; } Property Value IPixelPlayer Methods HasPermission(string?) public virtual bool HasPermission(string? permission) Parameters permission string Returns bool SendMessage(string) public virtual void SendMessage(string msg) Parameters msg string"
  },
  "api/PixelPilot.ChatCommands.Commands.ChatCommand.html": {
    "href": "api/PixelPilot.ChatCommands.Commands.ChatCommand.html",
    "title": "Class ChatCommand | PixelPilot",
    "keywords": "Class ChatCommand Namespace PixelPilot.ChatCommands.Commands Assembly PixelPilot.ChatCommands.dll public abstract class ChatCommand : ICommandExecutor Inheritance object ChatCommand Implements ICommandExecutor Derived BasicHelpCommand RootCommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChatCommand(string, string, string?) public ChatCommand(string name, string description, string? permission) Parameters name string description string permission string Properties Aliases public List<string> Aliases { get; } Property Value List<string> Description public string Description { get; } Property Value string FullPermission protected string? FullPermission { get; set; } Property Value string HelpFormatter public IHelpFormatter? HelpFormatter { get; set; } Property Value IHelpFormatter IsAsync public bool IsAsync { get; set; } Property Value bool Name public string Name { get; } Property Value string Parent public ChatCommand? Parent { get; set; } Property Value ChatCommand Permission public string? Permission { get; } Property Value string Methods CheckNameMatch(string) Checks if the input matches the name or aliases of this command. public bool CheckNameMatch(string input) Parameters input string Input to test Returns bool CheckPermission(ICommandSender) public virtual bool CheckPermission(ICommandSender sender) Parameters sender ICommandSender Returns bool ExecuteCommand(ICommandSender, string, string[]) public abstract Task ExecuteCommand(ICommandSender sender, string fullCommand, string[] args) Parameters sender ICommandSender fullCommand string args string[] Returns Task GetAlias() public string GetAlias() Returns string GetFullName() public string GetFullName() Returns string GetFullName(CommandNameFormat) public string GetFullName(CommandNameFormat format) Parameters format CommandNameFormat Returns string GetFullPermission() public string? GetFullPermission() Returns string GetHelpFormatter() protected IHelpFormatter GetHelpFormatter() Returns IHelpFormatter HasParent() public bool HasParent() Returns bool"
  },
  "api/PixelPilot.ChatCommands.Commands.CommandNameFormat.html": {
    "href": "api/PixelPilot.ChatCommands.Commands.CommandNameFormat.html",
    "title": "Enum CommandNameFormat | PixelPilot",
    "keywords": "Enum CommandNameFormat Namespace PixelPilot.ChatCommands.Commands Assembly PixelPilot.ChatCommands.dll public enum CommandNameFormat Fields AllAlias = 1 NoAlias = 0 RootAlias = 2"
  },
  "api/PixelPilot.ChatCommands.Commands.Help.BasicHelpCommand.html": {
    "href": "api/PixelPilot.ChatCommands.Commands.Help.BasicHelpCommand.html",
    "title": "Class BasicHelpCommand | PixelPilot",
    "keywords": "Class BasicHelpCommand Namespace PixelPilot.ChatCommands.Commands.Help Assembly PixelPilot.ChatCommands.dll public class BasicHelpCommand : ChatCommand, ICommandExecutor Inheritance object ChatCommand BasicHelpCommand Implements ICommandExecutor Inherited Members ChatCommand.Name ChatCommand.Description ChatCommand.Permission ChatCommand.Aliases ChatCommand.HelpFormatter ChatCommand.FullPermission ChatCommand.Parent ChatCommand.IsAsync ChatCommand.CheckNameMatch(string) ChatCommand.CheckPermission(ICommandSender) ChatCommand.GetAlias() ChatCommand.GetFullPermission() ChatCommand.GetFullName() ChatCommand.GetFullName(CommandNameFormat) ChatCommand.HasParent() ChatCommand.GetHelpFormatter() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BasicHelpCommand(IChatCommandManager) public BasicHelpCommand(IChatCommandManager chatCommandManager) Parameters chatCommandManager IChatCommandManager Methods ExecuteCommand(ICommandSender, string, string[]) public override Task ExecuteCommand(ICommandSender sender, string fullCommand, string[] args) Parameters sender ICommandSender fullCommand string args string[] Returns Task"
  },
  "api/PixelPilot.ChatCommands.Commands.Help.BasicHelpFormatter.html": {
    "href": "api/PixelPilot.ChatCommands.Commands.Help.BasicHelpFormatter.html",
    "title": "Class BasicHelpFormatter | PixelPilot",
    "keywords": "Class BasicHelpFormatter Namespace PixelPilot.ChatCommands.Commands.Help Assembly PixelPilot.ChatCommands.dll public class BasicHelpFormatter : IHelpFormatter Inheritance object BasicHelpFormatter Implements IHelpFormatter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Prefix public string Prefix Field Value string Methods SendHelp(ICommandSender, List<ChatCommand>) public void SendHelp(ICommandSender sender, List<ChatCommand> subCommands) Parameters sender ICommandSender subCommands List<ChatCommand>"
  },
  "api/PixelPilot.ChatCommands.Commands.Help.IHelpFormatter.html": {
    "href": "api/PixelPilot.ChatCommands.Commands.Help.IHelpFormatter.html",
    "title": "Interface IHelpFormatter | PixelPilot",
    "keywords": "Interface IHelpFormatter Namespace PixelPilot.ChatCommands.Commands.Help Assembly PixelPilot.ChatCommands.dll public interface IHelpFormatter Methods SendHelp(ICommandSender, List<ChatCommand>) void SendHelp(ICommandSender sender, List<ChatCommand> subCommands) Parameters sender ICommandSender subCommands List<ChatCommand>"
  },
  "api/PixelPilot.ChatCommands.Commands.Help.html": {
    "href": "api/PixelPilot.ChatCommands.Commands.Help.html",
    "title": "Namespace PixelPilot.ChatCommands.Commands.Help | PixelPilot",
    "keywords": "Namespace PixelPilot.ChatCommands.Commands.Help Classes BasicHelpCommand BasicHelpFormatter Interfaces IHelpFormatter"
  },
  "api/PixelPilot.ChatCommands.Commands.ICommandExecutor.html": {
    "href": "api/PixelPilot.ChatCommands.Commands.ICommandExecutor.html",
    "title": "Interface ICommandExecutor | PixelPilot",
    "keywords": "Interface ICommandExecutor Namespace PixelPilot.ChatCommands.Commands Assembly PixelPilot.ChatCommands.dll public interface ICommandExecutor Methods ExecuteCommand(ICommandSender, string, string[]) Task ExecuteCommand(ICommandSender sender, string fullCommand, string[] args) Parameters sender ICommandSender fullCommand string args string[] Returns Task"
  },
  "api/PixelPilot.ChatCommands.Commands.RootCommand.html": {
    "href": "api/PixelPilot.ChatCommands.Commands.RootCommand.html",
    "title": "Class RootCommand | PixelPilot",
    "keywords": "Class RootCommand Namespace PixelPilot.ChatCommands.Commands Assembly PixelPilot.ChatCommands.dll public class RootCommand : ChatCommand, ICommandExecutor Inheritance object ChatCommand RootCommand Implements ICommandExecutor Inherited Members ChatCommand.Name ChatCommand.Description ChatCommand.Permission ChatCommand.Aliases ChatCommand.HelpFormatter ChatCommand.FullPermission ChatCommand.Parent ChatCommand.IsAsync ChatCommand.CheckNameMatch(string) ChatCommand.GetAlias() ChatCommand.GetFullPermission() ChatCommand.GetFullName() ChatCommand.GetFullName(CommandNameFormat) ChatCommand.HasParent() ChatCommand.GetHelpFormatter() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RootCommand(string, string, string?) public RootCommand(string name, string description, string? permission) Parameters name string description string permission string Methods AddCommand(ChatCommand) public void AddCommand(ChatCommand command) Parameters command ChatCommand CheckPermission(ICommandSender) Permission check for this node. @param sender The command sender @return True if allowed public override bool CheckPermission(ICommandSender sender) Parameters sender ICommandSender Returns bool ExecuteCommand(ICommandSender, string, string[]) public override Task ExecuteCommand(ICommandSender sender, string fullCommand, string[] args) Parameters sender ICommandSender fullCommand string args string[] Returns Task GetSubCommands(ICommandSender) public List<ChatCommand> GetSubCommands(ICommandSender sender) Parameters sender ICommandSender Returns List<ChatCommand>"
  },
  "api/PixelPilot.ChatCommands.Commands.html": {
    "href": "api/PixelPilot.ChatCommands.Commands.html",
    "title": "Namespace PixelPilot.ChatCommands.Commands | PixelPilot",
    "keywords": "Namespace PixelPilot.ChatCommands.Commands Classes ChatCommand RootCommand Interfaces ICommandExecutor Enums CommandNameFormat"
  },
  "api/PixelPilot.ChatCommands.IChatCommandManager.html": {
    "href": "api/PixelPilot.ChatCommands.IChatCommandManager.html",
    "title": "Interface IChatCommandManager | PixelPilot",
    "keywords": "Interface IChatCommandManager Namespace PixelPilot.ChatCommands Assembly PixelPilot.ChatCommands.dll public interface IChatCommandManager Properties HelpFormatter IHelpFormatter HelpFormatter { get; } Property Value IHelpFormatter Methods GetAvailableCommands(ICommandSender) List<ChatCommand> GetAvailableCommands(ICommandSender sender) Parameters sender ICommandSender Returns List<ChatCommand>"
  },
  "api/PixelPilot.ChatCommands.ICommandSender.html": {
    "href": "api/PixelPilot.ChatCommands.ICommandSender.html",
    "title": "Interface ICommandSender | PixelPilot",
    "keywords": "Interface ICommandSender Namespace PixelPilot.ChatCommands Assembly PixelPilot.ChatCommands.dll public interface ICommandSender Properties Player IPixelPlayer Player { get; } Property Value IPixelPlayer Methods HasPermission(string?) bool HasPermission(string? permission) Parameters permission string Returns bool SendMessage(string) void SendMessage(string msg) Parameters msg string"
  },
  "api/PixelPilot.ChatCommands.Messages.CommandMessages.html": {
    "href": "api/PixelPilot.ChatCommands.Messages.CommandMessages.html",
    "title": "Class CommandMessages | PixelPilot",
    "keywords": "Class CommandMessages Namespace PixelPilot.ChatCommands.Messages Assembly PixelPilot.ChatCommands.dll public static class CommandMessages Inheritance object CommandMessages Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields NoPermission public static string NoPermission Field Value string UnknownArgument public static string UnknownArgument Field Value string"
  },
  "api/PixelPilot.ChatCommands.Messages.html": {
    "href": "api/PixelPilot.ChatCommands.Messages.html",
    "title": "Namespace PixelPilot.ChatCommands.Messages | PixelPilot",
    "keywords": "Namespace PixelPilot.ChatCommands.Messages Classes CommandMessages"
  },
  "api/PixelPilot.ChatCommands.PixelChatCommandManager-1.html": {
    "href": "api/PixelPilot.ChatCommands.PixelChatCommandManager-1.html",
    "title": "Class PixelChatCommandManager<T> | PixelPilot",
    "keywords": "Class PixelChatCommandManager<T> Namespace PixelPilot.ChatCommands Assembly PixelPilot.ChatCommands.dll public class PixelChatCommandManager<T> : IChatCommandManager where T : IPixelPlayer Type Parameters T Inheritance object PixelChatCommandManager<T> Implements IChatCommandManager Derived CommandManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PixelChatCommandManager(PixelPilotClient, PixelPlayerManager<T>) public PixelChatCommandManager(PixelPilotClient client, PixelPlayerManager<T> pixelPlayerManager) Parameters client PixelPilotClient pixelPlayerManager PixelPlayerManager<T> Properties ChatCommands public List<ChatCommand> ChatCommands { get; set; } Property Value List<ChatCommand> CommandPrefixes public List<string> CommandPrefixes { get; set; } Property Value List<string> HelpFormatter public IHelpFormatter HelpFormatter { get; set; } Property Value IHelpFormatter Methods AddCommand(ChatCommand) public void AddCommand(ChatCommand command) Parameters command ChatCommand AddHelpCommand() public void AddHelpCommand() CreateSender(T) protected virtual ICommandSender CreateSender(T player) Parameters player T Returns ICommandSender GetAvailableCommands(ICommandSender) public List<ChatCommand> GetAvailableCommands(ICommandSender sender) Parameters sender ICommandSender Returns List<ChatCommand> OnPlayerPacket(object, IPixelGamePacket) public void OnPlayerPacket(object _, IPixelGamePacket packet) Parameters _ object packet IPixelGamePacket"
  },
  "api/PixelPilot.ChatCommands.html": {
    "href": "api/PixelPilot.ChatCommands.html",
    "title": "Namespace PixelPilot.ChatCommands | PixelPilot",
    "keywords": "Namespace PixelPilot.ChatCommands Classes CommandManager CommandSender PixelChatCommandManager<T> Interfaces IChatCommandManager ICommandSender"
  },
  "api/PixelPilot.Common.EndPoints.html": {
    "href": "api/PixelPilot.Common.EndPoints.html",
    "title": "Class EndPoints | PixelPilot",
    "keywords": "Class EndPoints Namespace PixelPilot.Common Assembly PixelPilot.Core.dll public static class EndPoints Inheritance object EndPoints Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ApiEndpoint public const string ApiEndpoint = \"https://api.pixelwalker.net\" Field Value string GameHttpEndpoint public const string GameHttpEndpoint = \"https://game.pixelwalker.net\" Field Value string GameWebsocketEndpoint public const string GameWebsocketEndpoint = \"wss://game.pixelwalker.net\" Field Value string"
  },
  "api/PixelPilot.Common.Logging.LogManager.html": {
    "href": "api/PixelPilot.Common.Logging.LogManager.html",
    "title": "Class LogManager | PixelPilot",
    "keywords": "Class LogManager Namespace PixelPilot.Common.Logging Assembly PixelPilot.Core.dll The LogManager class provides static access to loggers though the project. public static class LogManager Inheritance object LogManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure(IConfigurationSection) Use a configuration section to configure the logger. public static void Configure(IConfigurationSection section) Parameters section IConfigurationSection Logging configuration Configure(Action<ILoggingBuilder>) Set an action to be used when creating the logger factory. public static void Configure(Action<ILoggingBuilder> configure) Parameters configure Action<ILoggingBuilder> Action to be used to configure GetLogger(string) public static ILogger GetLogger(string name) Parameters name string Returns ILogger"
  },
  "api/PixelPilot.Common.Logging.html": {
    "href": "api/PixelPilot.Common.Logging.html",
    "title": "Namespace PixelPilot.Common.Logging | PixelPilot",
    "keywords": "Namespace PixelPilot.Common.Logging Classes LogManager The LogManager class provides static access to loggers though the project."
  },
  "api/PixelPilot.Common.html": {
    "href": "api/PixelPilot.Common.html",
    "title": "Namespace PixelPilot.Common | PixelPilot",
    "keywords": "Namespace PixelPilot.Common Classes EndPoints"
  },
  "api/PixelPilot.PixelGameClient.Messages.Constants.EffectType.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Constants.EffectType.html",
    "title": "Enum EffectType | PixelPilot",
    "keywords": "Enum EffectType Namespace PixelPilot.PixelGameClient.Messages.Constants Assembly PixelPilot.Core.dll public enum EffectType Fields Curse = 4 Fly = 1 GravityDirection = 9 GravityForce = 7 GravityMultiJump = 8 Invulnerability = 3 JumpHeight = 0 Magic = 6 Speed = 2 Zombie = 5"
  },
  "api/PixelPilot.PixelGameClient.Messages.Constants.MessageType.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Constants.MessageType.html",
    "title": "Enum MessageType | PixelPilot",
    "keywords": "Enum MessageType Namespace PixelPilot.PixelGameClient.Messages.Constants Assembly PixelPilot.Core.dll public enum MessageType : byte Fields Ping = 63 World = 107"
  },
  "api/PixelPilot.PixelGameClient.Messages.Constants.PacketFieldType.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Constants.PacketFieldType.html",
    "title": "Enum PacketFieldType | PixelPilot",
    "keywords": "Enum PacketFieldType Namespace PixelPilot.PixelGameClient.Messages.Constants Assembly PixelPilot.Core.dll public enum PacketFieldType Fields Boolean = 7 Byte = 1 ByteArray = 8 Double = 6 Float = 5 Int16 = 2 Int32 = 3 Int64 = 4 String = 0"
  },
  "api/PixelPilot.PixelGameClient.Messages.Constants.WorldMessageType.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Constants.WorldMessageType.html",
    "title": "Enum WorldMessageType | PixelPilot",
    "keywords": "Enum WorldMessageType Namespace PixelPilot.PixelGameClient.Messages.Constants Assembly PixelPilot.Core.dll public enum WorldMessageType Fields ChatMessage = 6 GlobalSwitchChanged = 27 GlobalSwitchReset = 28 OldChatMessages = 7 PlayerCounters = 24 PlayerEffect = 20 PlayerFace = 13 PlayerGodMode = 14 PlayerInit = 0 PlayerJoined = 9 PlayerLeft = 10 PlayerLocalSwitchChanged = 25 PlayerLocalSwitchReset = 26 PlayerModMode = 15 PlayerMoved = 11 PlayerPrivateMessage = 29 PlayerRemoveEffect = 21 PlayerReset = 17 PlayerResetEffects = 22 PlayerRespawn = 16 PlayerTeam = 23 PlayerTeleported = 12 PlayerTouchBlock = 18 PlayerTouchPlayer = 19 SystemMessage = 8 UpdateRights = 1 WorldBlockPlaced = 5 WorldCleared = 3 WorldMetadata = 2 WorldReloaded = 4"
  },
  "api/PixelPilot.PixelGameClient.Messages.Constants.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Constants.html",
    "title": "Namespace PixelPilot.PixelGameClient.Messages.Constants | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.Messages.Constants Enums EffectType MessageType PacketFieldType WorldMessageType"
  },
  "api/PixelPilot.PixelGameClient.Messages.Exceptions.PacketConstructorDynamicException.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Exceptions.PacketConstructorDynamicException.html",
    "title": "Class PacketConstructorDynamicException | PixelPilot",
    "keywords": "Class PacketConstructorDynamicException Namespace PixelPilot.PixelGameClient.Messages.Exceptions Assembly PixelPilot.Core.dll public class PacketConstructorDynamicException : PixelException, ISerializable Inheritance object Exception PixelException PacketConstructorDynamicException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PacketConstructorDynamicException(string) public PacketConstructorDynamicException(string msg) Parameters msg string"
  },
  "api/PixelPilot.PixelGameClient.Messages.Exceptions.PacketConstructorException.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Exceptions.PacketConstructorException.html",
    "title": "Class PacketConstructorException | PixelPilot",
    "keywords": "Class PacketConstructorException Namespace PixelPilot.PixelGameClient.Messages.Exceptions Assembly PixelPilot.Core.dll public class PacketConstructorException : PixelException, ISerializable Inheritance object Exception PixelException PacketConstructorException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PacketConstructorException(List<dynamic>, Type) public PacketConstructorException(List<dynamic> receivedFields, Type packetType) Parameters receivedFields List<dynamic> packetType Type Properties PacketType public Type PacketType { get; } Property Value Type ReceivedFields public List<dynamic> ReceivedFields { get; } Property Value List<dynamic>"
  },
  "api/PixelPilot.PixelGameClient.Messages.Exceptions.PacketTypeNotFoundException.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Exceptions.PacketTypeNotFoundException.html",
    "title": "Class PacketTypeNotFoundException | PixelPilot",
    "keywords": "Class PacketTypeNotFoundException Namespace PixelPilot.PixelGameClient.Messages.Exceptions Assembly PixelPilot.Core.dll public class PacketTypeNotFoundException : PixelException, ISerializable Inheritance object Exception PixelException PacketTypeNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PacketTypeNotFoundException(WorldMessageType) public PacketTypeNotFoundException(WorldMessageType worldMessageType) Parameters worldMessageType WorldMessageType Properties WorldMessageType public WorldMessageType WorldMessageType { get; } Property Value WorldMessageType"
  },
  "api/PixelPilot.PixelGameClient.Messages.Exceptions.PixelException.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Exceptions.PixelException.html",
    "title": "Class PixelException | PixelPilot",
    "keywords": "Class PixelException Namespace PixelPilot.PixelGameClient.Messages.Exceptions Assembly PixelPilot.Core.dll public abstract class PixelException : Exception, ISerializable Inheritance object Exception PixelException Implements ISerializable Derived PacketConstructorDynamicException PacketConstructorException PacketTypeNotFoundException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PixelException(string) protected PixelException(string msg) Parameters msg string"
  },
  "api/PixelPilot.PixelGameClient.Messages.Exceptions.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Exceptions.html",
    "title": "Namespace PixelPilot.PixelGameClient.Messages.Exceptions | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.Messages.Exceptions Classes PacketConstructorDynamicException PacketConstructorException PacketTypeNotFoundException PixelException"
  },
  "api/PixelPilot.PixelGameClient.Messages.IDynamicConstructedPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.IDynamicConstructedPacket.html",
    "title": "Interface IDynamicConstructedPacket | PixelPilot",
    "keywords": "Interface IDynamicConstructedPacket Namespace PixelPilot.PixelGameClient.Messages Assembly PixelPilot.Core.dll Constructor that enforces the contract that the packet implements a List of dynamic type constructor. This is used for when a packet cannot simply be constructed using a constructor because the packet length may vary. public interface IDynamicConstructedPacket : IPixelGamePacket"
  },
  "api/PixelPilot.PixelGameClient.Messages.IPacketOutConvertible.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.IPacketOutConvertible.html",
    "title": "Interface IPacketOutConvertible | PixelPilot",
    "keywords": "Interface IPacketOutConvertible Namespace PixelPilot.PixelGameClient.Messages Assembly PixelPilot.Core.dll public interface IPacketOutConvertible Methods AsPacketOut() IPixelGamePacketOut AsPacketOut() Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.Messages.IPixelGamePacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.IPixelGamePacket.html",
    "title": "Interface IPixelGamePacket | PixelPilot",
    "keywords": "Interface IPixelGamePacket Namespace PixelPilot.PixelGameClient.Messages Assembly PixelPilot.Core.dll public interface IPixelGamePacket"
  },
  "api/PixelPilot.PixelGameClient.Messages.IPixelGamePacketOut.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.IPixelGamePacketOut.html",
    "title": "Interface IPixelGamePacketOut | PixelPilot",
    "keywords": "Interface IPixelGamePacketOut Namespace PixelPilot.PixelGameClient.Messages Assembly PixelPilot.Core.dll Packets that can be sent to the PixelWalker game server. public interface IPixelGamePacketOut Methods ToBinaryPacket() byte[] ToBinaryPacket() Returns byte[]"
  },
  "api/PixelPilot.PixelGameClient.Messages.IPixelGamePlayerPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.IPixelGamePlayerPacket.html",
    "title": "Interface IPixelGamePlayerPacket | PixelPilot",
    "keywords": "Interface IPixelGamePlayerPacket Namespace PixelPilot.PixelGameClient.Messages Assembly PixelPilot.Core.dll Special interface for packets that are triggered by or indicate a status change to a player. public interface IPixelGamePlayerPacket : IPixelGamePacket Properties PlayerId int PlayerId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Misc.BinaryReaderExtensions.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Misc.BinaryReaderExtensions.html",
    "title": "Class BinaryReaderExtensions | PixelPilot",
    "keywords": "Class BinaryReaderExtensions Namespace PixelPilot.PixelGameClient.Messages.Misc Assembly PixelPilot.Core.dll public static class BinaryReaderExtensions Inheritance object BinaryReaderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadBytesRequired(BinaryReader, int) public static byte[] ReadBytesRequired(this BinaryReader binRdr, int byteCount) Parameters binRdr BinaryReader byteCount int Returns byte[] ReadDoubleBE(BinaryReader) public static double ReadDoubleBE(this BinaryReader binaryReader) Parameters binaryReader BinaryReader Returns double ReadInt16BE(BinaryReader) public static short ReadInt16BE(this BinaryReader binRdr) Parameters binRdr BinaryReader Returns short ReadInt32BE(BinaryReader) public static int ReadInt32BE(this BinaryReader binRdr) Parameters binRdr BinaryReader Returns int ReadUInt16BE(BinaryReader) public static ushort ReadUInt16BE(this BinaryReader binRdr) Parameters binRdr BinaryReader Returns ushort ReadUInt32BE(BinaryReader) public static uint ReadUInt32BE(this BinaryReader binRdr) Parameters binRdr BinaryReader Returns uint Reverse(byte[]) public static byte[] Reverse(this byte[] b) Parameters b byte[] Returns byte[]"
  },
  "api/PixelPilot.PixelGameClient.Messages.Misc.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Misc.html",
    "title": "Namespace PixelPilot.PixelGameClient.Messages.Misc | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.Messages.Misc Classes BinaryReaderExtensions"
  },
  "api/PixelPilot.PixelGameClient.Messages.PacketConverter.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.PacketConverter.html",
    "title": "Class PacketConverter | PixelPilot",
    "keywords": "Class PacketConverter Namespace PixelPilot.PixelGameClient.Messages Assembly PixelPilot.Core.dll Converts binary data into pixel game packets. public class PacketConverter Inheritance object PacketConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConstructPacket(byte[]) Constructs a pixel game packet from the given binary data. public static IPixelGamePacket ConstructPacket(byte[] binary) Parameters binary byte[] The binary data representing the packet. Returns IPixelGamePacket The constructed pixel game packet. ReadType(BinaryReader, PacketFieldType) Reads data of a specified type from a BinaryReader according to the provided PacketFieldType. public static dynamic ReadType(BinaryReader reader, PacketFieldType fieldType) Parameters reader BinaryReader The BinaryReader to read from. fieldType PacketFieldType The type of data to read. Returns dynamic The data read from the BinaryReader. Exceptions Exception Thrown when the provided fieldType is not supported. ReadTypeLe(BinaryReader, PacketFieldType) Reads data of a specified type from a BinaryReader in little-endian format according to the provided PacketFieldType. public static dynamic ReadTypeLe(BinaryReader reader, PacketFieldType fieldType) Parameters reader BinaryReader The BinaryReader to read from. fieldType PacketFieldType The type of data to read. Returns dynamic The data read from the BinaryReader. Exceptions Exception Thrown when the provided fieldType is not supported. WriteTypeBe(BinaryWriter, dynamic) public static void WriteTypeBe(BinaryWriter writer, dynamic fieldValue) Parameters writer BinaryWriter fieldValue dynamic"
  },
  "api/PixelPilot.PixelGameClient.Messages.Queue.IPixelPacketQueue.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Queue.IPixelPacketQueue.html",
    "title": "Interface IPixelPacketQueue | PixelPilot",
    "keywords": "Interface IPixelPacketQueue Namespace PixelPilot.PixelGameClient.Messages.Queue Assembly PixelPilot.Core.dll public interface IPixelPacketQueue : IDisposable Inherited Members IDisposable.Dispose() Properties QueueSize int QueueSize { get; } Property Value int Methods EnqueuePacket(IPixelGamePacketOut) void EnqueuePacket(IPixelGamePacketOut packet) Parameters packet IPixelGamePacketOut Start() Task Start() Returns Task Stop() Task Stop() Returns Task"
  },
  "api/PixelPilot.PixelGameClient.Messages.Queue.TokenBucketPacketOutQueue.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Queue.TokenBucketPacketOutQueue.html",
    "title": "Class TokenBucketPacketOutQueue | PixelPilot",
    "keywords": "Class TokenBucketPacketOutQueue Namespace PixelPilot.PixelGameClient.Messages.Queue Assembly PixelPilot.Core.dll Rate limits outgoing messages by consuming tokens. public class TokenBucketPacketOutQueue : IPixelPacketQueue, IDisposable Inheritance object TokenBucketPacketOutQueue Implements IPixelPacketQueue IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TokenBucketPacketOutQueue(PixelPilotClient) public TokenBucketPacketOutQueue(PixelPilotClient client) Parameters client PixelPilotClient Properties IsProcessing public bool IsProcessing { get; } Property Value bool QueueSize public int QueueSize { get; } Property Value int Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() EnqueuePacket(IPixelGamePacketOut) public void EnqueuePacket(IPixelGamePacketOut packet) Parameters packet IPixelGamePacketOut Start() public Task Start() Returns Task Stop() public Task Stop() Returns Task"
  },
  "api/PixelPilot.PixelGameClient.Messages.Queue.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Queue.html",
    "title": "Namespace PixelPilot.PixelGameClient.Messages.Queue | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.Messages.Queue Classes TokenBucketPacketOutQueue Rate limits outgoing messages by consuming tokens. Interfaces IPixelPacketQueue"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.GlobalSwitchChangedPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.GlobalSwitchChangedPacket.html",
    "title": "Class GlobalSwitchChangedPacket | PixelPilot",
    "keywords": "Class GlobalSwitchChangedPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class GlobalSwitchChangedPacket : IPixelGamePlayerPacket, IPixelGamePacket, IPacketOutConvertible Inheritance object GlobalSwitchChangedPacket Implements IPixelGamePlayerPacket IPixelGamePacket IPacketOutConvertible Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GlobalSwitchChangedPacket(int, int, byte) public GlobalSwitchChangedPacket(int playerId, int switchId, byte enabled) Parameters playerId int switchId int enabled byte Properties Enabled public bool Enabled { get; } Property Value bool PlayerId public int PlayerId { get; } Property Value int SwitchId public int SwitchId { get; } Property Value int Methods AsPacketOut() public IPixelGamePacketOut AsPacketOut() Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.GlobalSwitchResetPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.GlobalSwitchResetPacket.html",
    "title": "Class GlobalSwitchResetPacket | PixelPilot",
    "keywords": "Class GlobalSwitchResetPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class GlobalSwitchResetPacket : IPixelGamePlayerPacket, IPixelGamePacket, IPacketOutConvertible Inheritance object GlobalSwitchResetPacket Implements IPixelGamePlayerPacket IPixelGamePacket IPacketOutConvertible Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GlobalSwitchResetPacket(int, byte) public GlobalSwitchResetPacket(int playerId, byte enabled) Parameters playerId int enabled byte Properties Enabled public bool Enabled { get; } Property Value bool PlayerId public int PlayerId { get; } Property Value int Methods AsPacketOut() public IPixelGamePacketOut AsPacketOut() Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.InitPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.InitPacket.html",
    "title": "Class InitPacket | PixelPilot",
    "keywords": "Class InitPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class InitPacket : IPixelGamePacket Inheritance object InitPacket Implements IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InitPacket(int, string, string, int, bool, double, double, int, bool, bool, string, int, string, byte[], int, int, byte[]) public InitPacket(int id, string cId, string username, int face, bool isAdmin, double x, double y, int chatColour, bool canEdit, bool canGod, string roomTitle, int players, string owner, byte[] globalSwitchStates, int width, int height, byte[] worldData) Parameters id int cId string username string face int isAdmin bool x double y double chatColour int canEdit bool canGod bool roomTitle string players int owner string globalSwitchStates byte[] width int height int worldData byte[] Properties AccountId public string AccountId { get; set; } Property Value string CanEdit public bool CanEdit { get; set; } Property Value bool CanGod public bool CanGod { get; set; } Property Value bool ChatColor public Color ChatColor { get; set; } Property Value Color Face public int Face { get; set; } Property Value int GlobalSwitchStates public byte[] GlobalSwitchStates { get; set; } Property Value byte[] Height public int Height { get; set; } Property Value int IsAdmin public bool IsAdmin { get; set; } Property Value bool Owner public string Owner { get; set; } Property Value string PlayerId public int PlayerId { get; set; } Property Value int Players public int Players { get; set; } Property Value int RoomTitle public string RoomTitle { get; set; } Property Value string Username public string Username { get; set; } Property Value string Width public int Width { get; set; } Property Value int WorldData public byte[] WorldData { get; set; } Property Value byte[] X public double X { get; set; } Property Value double Y public double Y { get; set; } Property Value double Methods AsSendingBytes() public static byte[] AsSendingBytes() Returns byte[]"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.LocalSwitchChangedPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.LocalSwitchChangedPacket.html",
    "title": "Class LocalSwitchChangedPacket | PixelPilot",
    "keywords": "Class LocalSwitchChangedPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class LocalSwitchChangedPacket : IPixelGamePlayerPacket, IPixelGamePacket, IPacketOutConvertible Inheritance object LocalSwitchChangedPacket Implements IPixelGamePlayerPacket IPixelGamePacket IPacketOutConvertible Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LocalSwitchChangedPacket(int, int, byte) public LocalSwitchChangedPacket(int playerId, int switchId, byte enabled) Parameters playerId int switchId int enabled byte Properties Enabled public bool Enabled { get; } Property Value bool PlayerId public int PlayerId { get; } Property Value int SwitchId public int SwitchId { get; } Property Value int Methods AsPacketOut() public IPixelGamePacketOut AsPacketOut() Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.LocalSwitchResetPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.LocalSwitchResetPacket.html",
    "title": "Class LocalSwitchResetPacket | PixelPilot",
    "keywords": "Class LocalSwitchResetPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class LocalSwitchResetPacket : IPixelGamePlayerPacket, IPixelGamePacket, IPacketOutConvertible Inheritance object LocalSwitchResetPacket Implements IPixelGamePlayerPacket IPixelGamePacket IPacketOutConvertible Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LocalSwitchResetPacket(int, byte) public LocalSwitchResetPacket(int playerId, byte enabled) Parameters playerId int enabled byte Properties Enabled public bool Enabled { get; } Property Value bool PlayerId public int PlayerId { get; } Property Value int Methods AsPacketOut() public IPixelGamePacketOut AsPacketOut() Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.OldChatMessagesPacket.ChatMessage.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.OldChatMessagesPacket.ChatMessage.html",
    "title": "Class OldChatMessagesPacket.ChatMessage | PixelPilot",
    "keywords": "Class OldChatMessagesPacket.ChatMessage Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class OldChatMessagesPacket.ChatMessage Inheritance object OldChatMessagesPacket.ChatMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChatMessage(string, string, int) public ChatMessage(string username, string message, int chatColor) Parameters username string message string chatColor int Properties ChatColor public Color ChatColor { get; set; } Property Value Color Message public string Message { get; set; } Property Value string Username public string Username { get; set; } Property Value string"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.OldChatMessagesPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.OldChatMessagesPacket.html",
    "title": "Class OldChatMessagesPacket | PixelPilot",
    "keywords": "Class OldChatMessagesPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class OldChatMessagesPacket : IDynamicConstructedPacket, IPixelGamePacket Inheritance object OldChatMessagesPacket Implements IDynamicConstructedPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OldChatMessagesPacket(IReadOnlyList<dynamic>) public OldChatMessagesPacket(IReadOnlyList<dynamic> fields) Parameters fields IReadOnlyList<dynamic> Properties Messages public OldChatMessagesPacket.ChatMessage[] Messages { get; } Property Value ChatMessage[]"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PingPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PingPacket.html",
    "title": "Class PingPacket | PixelPilot",
    "keywords": "Class PingPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PingPacket : IPixelGamePacket Inheritance object PingPacket Implements IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerChatPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerChatPacket.html",
    "title": "Class PlayerChatPacket | PixelPilot",
    "keywords": "Class PlayerChatPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerChatPacket : IPixelGamePlayerPacket, IPixelGamePacket, IPacketOutConvertible Inheritance object PlayerChatPacket Implements IPixelGamePlayerPacket IPixelGamePacket IPacketOutConvertible Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerChatPacket(int, string) public PlayerChatPacket(int id, string message) Parameters id int message string Properties Message public string Message { get; } Property Value string PlayerId public int PlayerId { get; } Property Value int Methods AsPacketOut() public IPixelGamePacketOut AsPacketOut() Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerEffectPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerEffectPacket.html",
    "title": "Class PlayerEffectPacket | PixelPilot",
    "keywords": "Class PlayerEffectPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerEffectPacket : IPixelGamePlayerPacket, IDynamicConstructedPacket, IPixelGamePacket Inheritance object PlayerEffectPacket Implements IPixelGamePlayerPacket IDynamicConstructedPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerEffectPacket(List<dynamic>) public PlayerEffectPacket(List<dynamic> fields) Parameters fields List<dynamic> Properties EffectId public int EffectId { get; } Property Value int EffectType public EffectType EffectType { get; } Property Value EffectType ExtraFields public dynamic[] ExtraFields { get; } Property Value dynamic[] Magic public bool Magic { get; } Property Value bool PlayerId public int PlayerId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerFacePacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerFacePacket.html",
    "title": "Class PlayerFacePacket | PixelPilot",
    "keywords": "Class PlayerFacePacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerFacePacket : IPixelGamePlayerPacket, IPixelGamePacket, IPacketOutConvertible Inheritance object PlayerFacePacket Implements IPixelGamePlayerPacket IPixelGamePacket IPacketOutConvertible Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerFacePacket(int, int) public PlayerFacePacket(int id, int face) Parameters id int face int Properties Face public int Face { get; } Property Value int PlayerId public int PlayerId { get; } Property Value int Methods AsPacketOut() public IPixelGamePacketOut AsPacketOut() Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerGodmodePacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerGodmodePacket.html",
    "title": "Class PlayerGodmodePacket | PixelPilot",
    "keywords": "Class PlayerGodmodePacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerGodmodePacket : IPixelGamePlayerPacket, IPixelGamePacket, IPacketOutConvertible Inheritance object PlayerGodmodePacket Implements IPixelGamePlayerPacket IPixelGamePacket IPacketOutConvertible Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerGodmodePacket(int, bool) public PlayerGodmodePacket(int id, bool isEnabled) Parameters id int isEnabled bool Properties IsEnabled public bool IsEnabled { get; } Property Value bool PlayerId public int PlayerId { get; } Property Value int Methods AsPacketOut() public IPixelGamePacketOut AsPacketOut() Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerJoinPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerJoinPacket.html",
    "title": "Class PlayerJoinPacket | PixelPilot",
    "keywords": "Class PlayerJoinPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerJoinPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerJoinPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerJoinPacket(int, string, string, int, bool, bool, bool, double, double, int, int, int, int, byte[], bool, bool, bool, bool, int, byte[]) public PlayerJoinPacket(int id, string cuid, string username, int face, bool isAdmin, bool hasGod, bool hasEdit, double x, double y, int chatColour, int coins, int blueCoins, int deaths, byte[] collectedItems, bool godmode, bool modmode, bool hasCrown, bool hasCompletedWorld, int team, byte[] switchBuffer) Parameters id int cuid string username string face int isAdmin bool hasGod bool hasEdit bool x double y double chatColour int coins int blueCoins int deaths int collectedItems byte[] godmode bool modmode bool hasCrown bool hasCompletedWorld bool team int switchBuffer byte[] Properties BlueCoins public int BlueCoins { get; } Property Value int ChatColor public Color ChatColor { get; set; } Property Value Color Coins public int Coins { get; } Property Value int Collected public List<Point> Collected { get; } Property Value List<Point> Cuid public string Cuid { get; } Property Value string Deaths public int Deaths { get; } Property Value int Face public int Face { get; } Property Value int Godmode public bool Godmode { get; } Property Value bool HasCompletedWorld public bool HasCompletedWorld { get; } Property Value bool HasCrown public bool HasCrown { get; } Property Value bool HasEdit public bool HasEdit { get; } Property Value bool HasGod public bool HasGod { get; } Property Value bool IsAdmin public bool IsAdmin { get; } Property Value bool Modmode public bool Modmode { get; } Property Value bool PlayerId public int PlayerId { get; } Property Value int SwitchBuffer public byte[] SwitchBuffer { get; } Property Value byte[] Team public int Team { get; } Property Value int Username public string Username { get; } Property Value string X public double X { get; } Property Value double Y public double Y { get; } Property Value double"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerLeftPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerLeftPacket.html",
    "title": "Class PlayerLeftPacket | PixelPilot",
    "keywords": "Class PlayerLeftPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerLeftPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerLeftPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerLeftPacket(int) public PlayerLeftPacket(int id) Parameters id int Properties PlayerId public int PlayerId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerModMode.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerModMode.html",
    "title": "Class PlayerModMode | PixelPilot",
    "keywords": "Class PlayerModMode Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerModMode : IPixelGamePlayerPacket, IPixelGamePacket, IPacketOutConvertible Inheritance object PlayerModMode Implements IPixelGamePlayerPacket IPixelGamePacket IPacketOutConvertible Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerModMode(int, bool) public PlayerModMode(int id, bool isEnabled) Parameters id int isEnabled bool Properties IsEnabled public bool IsEnabled { get; } Property Value bool PlayerId public int PlayerId { get; } Property Value int Methods AsPacketOut() public IPixelGamePacketOut AsPacketOut() Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerMovePacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerMovePacket.html",
    "title": "Class PlayerMovePacket | PixelPilot",
    "keywords": "Class PlayerMovePacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerMovePacket : IPixelGamePlayerPacket, IPixelGamePacket, IPacketOutConvertible Inheritance object PlayerMovePacket Implements IPixelGamePlayerPacket IPixelGamePacket IPacketOutConvertible Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerMovePacket(int, double, double, double, double, double, double, int, int, bool, bool, int) public PlayerMovePacket(int id, double x, double y, double velocityX, double velocityY, double modX, double modY, int horizontal, int vertical, bool spacedown, bool spaceJustDown, int tickId) Parameters id int x double y double velocityX double velocityY double modX double modY double horizontal int vertical int spacedown bool spaceJustDown bool tickId int Properties Horizontal public int Horizontal { get; } Property Value int ModX public double ModX { get; } Property Value double ModY public double ModY { get; } Property Value double PlayerId public int PlayerId { get; } Property Value int SpaceJustDown public bool SpaceJustDown { get; } Property Value bool Spacedown public bool Spacedown { get; } Property Value bool TickId public int TickId { get; } Property Value int VelocityX public double VelocityX { get; } Property Value double VelocityY public double VelocityY { get; } Property Value double Vertical public int Vertical { get; } Property Value int X public double X { get; } Property Value double Y public double Y { get; } Property Value double Methods AsPacketOut() public IPixelGamePacketOut AsPacketOut() Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerPrivateMessagePacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerPrivateMessagePacket.html",
    "title": "Class PlayerPrivateMessagePacket | PixelPilot",
    "keywords": "Class PlayerPrivateMessagePacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerPrivateMessagePacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerPrivateMessagePacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerPrivateMessagePacket(int, string) public PlayerPrivateMessagePacket(int id, string messsage) Parameters id int messsage string Properties Messsage public string Messsage { get; } Property Value string PlayerId public int PlayerId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerRemoveEffectPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerRemoveEffectPacket.html",
    "title": "Class PlayerRemoveEffectPacket | PixelPilot",
    "keywords": "Class PlayerRemoveEffectPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerRemoveEffectPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerRemoveEffectPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerRemoveEffectPacket(int, int) public PlayerRemoveEffectPacket(int id, int effectId) Parameters id int effectId int Properties EffectId public int EffectId { get; } Property Value int PlayerId public int PlayerId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerResetEffectsPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerResetEffectsPacket.html",
    "title": "Class PlayerResetEffectsPacket | PixelPilot",
    "keywords": "Class PlayerResetEffectsPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerResetEffectsPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerResetEffectsPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerResetEffectsPacket(int) public PlayerResetEffectsPacket(int id) Parameters id int Properties PlayerId public int PlayerId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerResetPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerResetPacket.html",
    "title": "Class PlayerResetPacket | PixelPilot",
    "keywords": "Class PlayerResetPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerResetPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerResetPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerResetPacket(int, int, int) public PlayerResetPacket(int id, int x, int y) Parameters id int x int y int Properties PlayerId public int PlayerId { get; } Property Value int X public int X { get; } Property Value int Y public int Y { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerRespawnPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerRespawnPacket.html",
    "title": "Class PlayerRespawnPacket | PixelPilot",
    "keywords": "Class PlayerRespawnPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerRespawnPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerRespawnPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerRespawnPacket(int, int, int) public PlayerRespawnPacket(int id, int x, int y) Parameters id int x int y int Properties PlayerId public int PlayerId { get; } Property Value int X public int X { get; } Property Value int Y public int Y { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerStatsChangePacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerStatsChangePacket.html",
    "title": "Class PlayerStatsChangePacket | PixelPilot",
    "keywords": "Class PlayerStatsChangePacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerStatsChangePacket : IPixelGamePlayerPacket, IPixelGamePacket, IPacketOutConvertible Inheritance object PlayerStatsChangePacket Implements IPixelGamePlayerPacket IPixelGamePacket IPacketOutConvertible Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerStatsChangePacket(int, int, int, int) public PlayerStatsChangePacket(int id, int goldCoins, int blueCoins, int deathCount) Parameters id int goldCoins int blueCoins int deathCount int Properties BlueCoins public int BlueCoins { get; } Property Value int DeathCount public int DeathCount { get; } Property Value int GoldCoins public int GoldCoins { get; } Property Value int PlayerId public int PlayerId { get; } Property Value int Methods AsPacketOut() public IPixelGamePacketOut AsPacketOut() Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerTeamPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerTeamPacket.html",
    "title": "Class PlayerTeamPacket | PixelPilot",
    "keywords": "Class PlayerTeamPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerTeamPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerTeamPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerTeamPacket(int, int) public PlayerTeamPacket(int id, int team) Parameters id int team int Properties PlayerId public int PlayerId { get; } Property Value int Team public int Team { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerTeleportedPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerTeleportedPacket.html",
    "title": "Class PlayerTeleportedPacket | PixelPilot",
    "keywords": "Class PlayerTeleportedPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerTeleportedPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerTeleportedPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerTeleportedPacket(int, double, double) public PlayerTeleportedPacket(int id, double x, double y) Parameters id int x double y double Properties PlayerId public int PlayerId { get; } Property Value int X public double X { get; } Property Value double Y public double Y { get; } Property Value double"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerTouchBlockPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerTouchBlockPacket.html",
    "title": "Class PlayerTouchBlockPacket | PixelPilot",
    "keywords": "Class PlayerTouchBlockPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll Received when a player actives a block. This can be done manually or when a player touched the block. public class PlayerTouchBlockPacket : IPixelGamePlayerPacket, IPixelGamePacket, IPacketOutConvertible Inheritance object PlayerTouchBlockPacket Implements IPixelGamePlayerPacket IPixelGamePacket IPacketOutConvertible Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerTouchBlockPacket(int, int, int, int) public PlayerTouchBlockPacket(int id, int x, int y, int blockId) Parameters id int x int y int blockId int Properties BlockId public int BlockId { get; } Property Value int PlayerId public int PlayerId { get; } Property Value int X public int X { get; } Property Value int Y public int Y { get; } Property Value int Methods AsPacketOut() public IPixelGamePacketOut AsPacketOut() Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerTouchPlayerPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerTouchPlayerPacket.html",
    "title": "Class PlayerTouchPlayerPacket | PixelPilot",
    "keywords": "Class PlayerTouchPlayerPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerTouchPlayerPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerTouchPlayerPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerTouchPlayerPacket(int, int, byte) public PlayerTouchPlayerPacket(int id, int touchedPlayer, byte isTouching) Parameters id int touchedPlayer int isTouching byte Properties IsToucing public bool IsToucing { get; } Property Value bool PlayerId public int PlayerId { get; } Property Value int TouchedPlayer public int TouchedPlayer { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerUpdateRightsPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerUpdateRightsPacket.html",
    "title": "Class PlayerUpdateRightsPacket | PixelPilot",
    "keywords": "Class PlayerUpdateRightsPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerUpdateRightsPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerUpdateRightsPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerUpdateRightsPacket(int, bool, bool) public PlayerUpdateRightsPacket(int id, bool editRights, bool godmode) Parameters id int editRights bool godmode bool Properties EditRights public bool EditRights { get; } Property Value bool Godmode public bool Godmode { get; } Property Value bool PlayerId public int PlayerId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.SystemMessagePacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.SystemMessagePacket.html",
    "title": "Class SystemMessagePacket | PixelPilot",
    "keywords": "Class SystemMessagePacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class SystemMessagePacket : IPixelGamePacket Inheritance object SystemMessagePacket Implements IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SystemMessagePacket(string, string, bool) public SystemMessagePacket(string prefix, string message, bool kicked) Parameters prefix string message string kicked bool Properties Kicked public bool Kicked { get; } Property Value bool Message public string Message { get; } Property Value string Prefix public string Prefix { get; } Property Value string"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.WorldBlockPlacedPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.WorldBlockPlacedPacket.html",
    "title": "Class WorldBlockPlacedPacket | PixelPilot",
    "keywords": "Class WorldBlockPlacedPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class WorldBlockPlacedPacket : IDynamicConstructedPacket, IPixelGamePacket Inheritance object WorldBlockPlacedPacket Implements IDynamicConstructedPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WorldBlockPlacedPacket(List<dynamic>) public WorldBlockPlacedPacket(List<dynamic> fields) Parameters fields List<dynamic> Properties BlockId public int BlockId { get; } Property Value int ExtraFields public dynamic[] ExtraFields { get; } Property Value dynamic[] Layer public int Layer { get; } Property Value int PlayerId public int PlayerId { get; } Property Value int Positions public Point[] Positions { get; } Property Value Point[]"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.WorldClearedPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.WorldClearedPacket.html",
    "title": "Class WorldClearedPacket | PixelPilot",
    "keywords": "Class WorldClearedPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class WorldClearedPacket : IPixelGamePacket Inheritance object WorldClearedPacket Implements IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.WorldMetaPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.WorldMetaPacket.html",
    "title": "Class WorldMetaPacket | PixelPilot",
    "keywords": "Class WorldMetaPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class WorldMetaPacket : IPixelGamePacket Inheritance object WorldMetaPacket Implements IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WorldMetaPacket(string, int, string) public WorldMetaPacket(string name, int plays, string owner) Parameters name string plays int owner string Properties Name public string Name { get; } Property Value string Owner public string Owner { get; } Property Value string Plays public int Plays { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.WorldReloadedPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.WorldReloadedPacket.html",
    "title": "Class WorldReloadedPacket | PixelPilot",
    "keywords": "Class WorldReloadedPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class WorldReloadedPacket : IPixelGamePacket Inheritance object WorldReloadedPacket Implements IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WorldReloadedPacket(byte[]) public WorldReloadedPacket(byte[] worldData) Parameters worldData byte[] Properties WorldData public byte[] WorldData { get; } Property Value byte[]"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.html",
    "title": "Namespace PixelPilot.PixelGameClient.Messages.Received | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.Messages.Received Classes GlobalSwitchChangedPacket GlobalSwitchResetPacket InitPacket LocalSwitchChangedPacket LocalSwitchResetPacket OldChatMessagesPacket OldChatMessagesPacket.ChatMessage PingPacket PlayerChatPacket PlayerEffectPacket PlayerFacePacket PlayerGodmodePacket PlayerJoinPacket PlayerLeftPacket PlayerModMode PlayerMovePacket PlayerPrivateMessagePacket PlayerRemoveEffectPacket PlayerResetEffectsPacket PlayerResetPacket PlayerRespawnPacket PlayerStatsChangePacket PlayerTeamPacket PlayerTeleportedPacket PlayerTouchBlockPacket Received when a player actives a block. This can be done manually or when a player touched the block. PlayerTouchPlayerPacket PlayerUpdateRightsPacket SystemMessagePacket WorldBlockPlacedPacket WorldClearedPacket WorldMetaPacket WorldReloadedPacket"
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.GlobalSwitchChangeOutPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.GlobalSwitchChangeOutPacket.html",
    "title": "Class GlobalSwitchChangeOutPacket | PixelPilot",
    "keywords": "Class GlobalSwitchChangeOutPacket Namespace PixelPilot.PixelGameClient.Messages.Send Assembly PixelPilot.Core.dll public class GlobalSwitchChangeOutPacket : ReflectivePixelOutPacket, IPixelGamePacketOut Inheritance object ReflectivePixelOutPacket GlobalSwitchChangeOutPacket Implements IPixelGamePacketOut Inherited Members ReflectivePixelOutPacket.messageType ReflectivePixelOutPacket.GetFields(bool) ReflectivePixelOutPacket.GetFields() ReflectivePixelOutPacket.ToBinaryPacket() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GlobalSwitchChangeOutPacket() public GlobalSwitchChangeOutPacket() GlobalSwitchChangeOutPacket(int, bool) public GlobalSwitchChangeOutPacket(int switchId, bool enabled) Parameters switchId int enabled bool Properties Enabled public byte Enabled { get; set; } Property Value byte SwitchId public int SwitchId { get; set; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.GlobalSwitchResetOutPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.GlobalSwitchResetOutPacket.html",
    "title": "Class GlobalSwitchResetOutPacket | PixelPilot",
    "keywords": "Class GlobalSwitchResetOutPacket Namespace PixelPilot.PixelGameClient.Messages.Send Assembly PixelPilot.Core.dll public class GlobalSwitchResetOutPacket : ReflectivePixelOutPacket, IPixelGamePacketOut Inheritance object ReflectivePixelOutPacket GlobalSwitchResetOutPacket Implements IPixelGamePacketOut Inherited Members ReflectivePixelOutPacket.messageType ReflectivePixelOutPacket.GetFields(bool) ReflectivePixelOutPacket.GetFields() ReflectivePixelOutPacket.ToBinaryPacket() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GlobalSwitchResetOutPacket() public GlobalSwitchResetOutPacket() GlobalSwitchResetOutPacket(bool) public GlobalSwitchResetOutPacket(bool enabled) Parameters enabled bool Properties Enabled public byte Enabled { get; set; } Property Value byte"
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.PlayerChatOutPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.PlayerChatOutPacket.html",
    "title": "Class PlayerChatOutPacket | PixelPilot",
    "keywords": "Class PlayerChatOutPacket Namespace PixelPilot.PixelGameClient.Messages.Send Assembly PixelPilot.Core.dll public class PlayerChatOutPacket : ReflectivePixelOutPacket, IPixelGamePacketOut Inheritance object ReflectivePixelOutPacket PlayerChatOutPacket Implements IPixelGamePacketOut Inherited Members ReflectivePixelOutPacket.messageType ReflectivePixelOutPacket.GetFields(bool) ReflectivePixelOutPacket.GetFields() ReflectivePixelOutPacket.ToBinaryPacket() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerChatOutPacket(string) public PlayerChatOutPacket(string message) Parameters message string Properties Message public string Message { get; set; } Property Value string"
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.PlayerFaceOutPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.PlayerFaceOutPacket.html",
    "title": "Class PlayerFaceOutPacket | PixelPilot",
    "keywords": "Class PlayerFaceOutPacket Namespace PixelPilot.PixelGameClient.Messages.Send Assembly PixelPilot.Core.dll public class PlayerFaceOutPacket : ReflectivePixelOutPacket, IPixelGamePacketOut Inheritance object ReflectivePixelOutPacket PlayerFaceOutPacket Implements IPixelGamePacketOut Inherited Members ReflectivePixelOutPacket.messageType ReflectivePixelOutPacket.GetFields(bool) ReflectivePixelOutPacket.GetFields() ReflectivePixelOutPacket.ToBinaryPacket() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerFaceOutPacket(int) public PlayerFaceOutPacket(int face) Parameters face int Properties Face public int Face { get; set; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.PlayerGodmodeOutPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.PlayerGodmodeOutPacket.html",
    "title": "Class PlayerGodmodeOutPacket | PixelPilot",
    "keywords": "Class PlayerGodmodeOutPacket Namespace PixelPilot.PixelGameClient.Messages.Send Assembly PixelPilot.Core.dll public class PlayerGodmodeOutPacket : ReflectivePixelOutPacket, IPixelGamePacketOut Inheritance object ReflectivePixelOutPacket PlayerGodmodeOutPacket Implements IPixelGamePacketOut Inherited Members ReflectivePixelOutPacket.messageType ReflectivePixelOutPacket.GetFields(bool) ReflectivePixelOutPacket.GetFields() ReflectivePixelOutPacket.ToBinaryPacket() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerGodmodeOutPacket(bool) public PlayerGodmodeOutPacket(bool enabled) Parameters enabled bool Properties Enabled public bool Enabled { get; set; } Property Value bool"
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.PlayerLocalSwitchChangedOutPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.PlayerLocalSwitchChangedOutPacket.html",
    "title": "Class PlayerLocalSwitchChangedOutPacket | PixelPilot",
    "keywords": "Class PlayerLocalSwitchChangedOutPacket Namespace PixelPilot.PixelGameClient.Messages.Send Assembly PixelPilot.Core.dll public class PlayerLocalSwitchChangedOutPacket : ReflectivePixelOutPacket, IPixelGamePacketOut Inheritance object ReflectivePixelOutPacket PlayerLocalSwitchChangedOutPacket Implements IPixelGamePacketOut Inherited Members ReflectivePixelOutPacket.messageType ReflectivePixelOutPacket.GetFields(bool) ReflectivePixelOutPacket.GetFields() ReflectivePixelOutPacket.ToBinaryPacket() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerLocalSwitchChangedOutPacket() public PlayerLocalSwitchChangedOutPacket() PlayerLocalSwitchChangedOutPacket(int, bool) public PlayerLocalSwitchChangedOutPacket(int switchId, bool enabled) Parameters switchId int enabled bool Properties Enabled public byte Enabled { get; set; } Property Value byte SwitchId public int SwitchId { get; set; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.PlayerLocalSwitchResetOutPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.PlayerLocalSwitchResetOutPacket.html",
    "title": "Class PlayerLocalSwitchResetOutPacket | PixelPilot",
    "keywords": "Class PlayerLocalSwitchResetOutPacket Namespace PixelPilot.PixelGameClient.Messages.Send Assembly PixelPilot.Core.dll public class PlayerLocalSwitchResetOutPacket : ReflectivePixelOutPacket, IPixelGamePacketOut Inheritance object ReflectivePixelOutPacket PlayerLocalSwitchResetOutPacket Implements IPixelGamePacketOut Inherited Members ReflectivePixelOutPacket.messageType ReflectivePixelOutPacket.GetFields(bool) ReflectivePixelOutPacket.GetFields() ReflectivePixelOutPacket.ToBinaryPacket() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerLocalSwitchResetOutPacket() public PlayerLocalSwitchResetOutPacket() PlayerLocalSwitchResetOutPacket(bool) public PlayerLocalSwitchResetOutPacket(bool enabled) Parameters enabled bool Properties Enabled public byte Enabled { get; set; } Property Value byte"
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.PlayerMoveOutPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.PlayerMoveOutPacket.html",
    "title": "Class PlayerMoveOutPacket | PixelPilot",
    "keywords": "Class PlayerMoveOutPacket Namespace PixelPilot.PixelGameClient.Messages.Send Assembly PixelPilot.Core.dll public class PlayerMoveOutPacket : ReflectivePixelOutPacket, IPixelGamePacketOut Inheritance object ReflectivePixelOutPacket PlayerMoveOutPacket Implements IPixelGamePacketOut Inherited Members ReflectivePixelOutPacket.messageType ReflectivePixelOutPacket.GetFields(bool) ReflectivePixelOutPacket.GetFields() ReflectivePixelOutPacket.ToBinaryPacket() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerMoveOutPacket(double, double, double, double, double, double, int, int, bool, bool, int) public PlayerMoveOutPacket(double x, double y, double velocityX, double velocityY, double modX, double modY, int horizontal, int vertical, bool spacedown, bool spaceJustDown, int tick) Parameters x double y double velocityX double velocityY double modX double modY double horizontal int vertical int spacedown bool spaceJustDown bool tick int Properties Horizontal public int Horizontal { get; set; } Property Value int ModX public double ModX { get; set; } Property Value double ModY public double ModY { get; set; } Property Value double SpaceJustDown public bool SpaceJustDown { get; set; } Property Value bool Spacedown public bool Spacedown { get; set; } Property Value bool Tick public int Tick { get; set; } Property Value int VelocityX public double VelocityX { get; set; } Property Value double VelocityY public double VelocityY { get; set; } Property Value double Vertical public int Vertical { get; set; } Property Value int X public double X { get; set; } Property Value double Y public double Y { get; } Property Value double"
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.PlayerStatsChangedOutPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.PlayerStatsChangedOutPacket.html",
    "title": "Class PlayerStatsChangedOutPacket | PixelPilot",
    "keywords": "Class PlayerStatsChangedOutPacket Namespace PixelPilot.PixelGameClient.Messages.Send Assembly PixelPilot.Core.dll public class PlayerStatsChangedOutPacket : ReflectivePixelOutPacket, IPixelGamePacketOut Inheritance object ReflectivePixelOutPacket PlayerStatsChangedOutPacket Implements IPixelGamePacketOut Inherited Members ReflectivePixelOutPacket.messageType ReflectivePixelOutPacket.GetFields(bool) ReflectivePixelOutPacket.GetFields() ReflectivePixelOutPacket.ToBinaryPacket() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerStatsChangedOutPacket(int, int, int) public PlayerStatsChangedOutPacket(int goldCoins, int blueCoins, int deathCount) Parameters goldCoins int blueCoins int deathCount int Properties BlueCoins public int BlueCoins { get; } Property Value int DeathCount public int DeathCount { get; } Property Value int GoldCoins public int GoldCoins { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.PlayerTouchBlockOutPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.PlayerTouchBlockOutPacket.html",
    "title": "Class PlayerTouchBlockOutPacket | PixelPilot",
    "keywords": "Class PlayerTouchBlockOutPacket Namespace PixelPilot.PixelGameClient.Messages.Send Assembly PixelPilot.Core.dll public class PlayerTouchBlockOutPacket : ReflectivePixelOutPacket, IPixelGamePacketOut Inheritance object ReflectivePixelOutPacket PlayerTouchBlockOutPacket Implements IPixelGamePacketOut Inherited Members ReflectivePixelOutPacket.messageType ReflectivePixelOutPacket.GetFields(bool) ReflectivePixelOutPacket.GetFields() ReflectivePixelOutPacket.ToBinaryPacket() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerTouchBlockOutPacket(int, int, int) public PlayerTouchBlockOutPacket(int x, int y, int blockId) Parameters x int y int blockId int Properties BlockId public int BlockId { get; set; } Property Value int X public int X { get; set; } Property Value int Y public int Y { get; set; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.ReflectivePixelOutPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.ReflectivePixelOutPacket.html",
    "title": "Class ReflectivePixelOutPacket | PixelPilot",
    "keywords": "Class ReflectivePixelOutPacket Namespace PixelPilot.PixelGameClient.Messages.Send Assembly PixelPilot.Core.dll Represents a reflective pixel game packet for outgoing communication. Automatically converts to binary. public class ReflectivePixelOutPacket : IPixelGamePacketOut Inheritance object ReflectivePixelOutPacket Implements IPixelGamePacketOut Derived GlobalSwitchChangeOutPacket GlobalSwitchResetOutPacket PlayerChatOutPacket PlayerFaceOutPacket PlayerGodmodeOutPacket PlayerLocalSwitchChangedOutPacket PlayerLocalSwitchResetOutPacket PlayerMoveOutPacket PlayerStatsChangedOutPacket PlayerTouchBlockOutPacket WorldBlockPlacedOutPacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReflectivePixelOutPacket(WorldMessageType) public ReflectivePixelOutPacket(WorldMessageType messageType) Parameters messageType WorldMessageType Fields messageType protected WorldMessageType messageType Field Value WorldMessageType Methods GetFields() Gets the fields of the packet. protected virtual List<dynamic> GetFields() Returns List<dynamic> A list of fields. GetFields(bool) Gets the fields of the packet. protected List<dynamic> GetFields(bool allowNull) Parameters allowNull bool Flag to allow null fields. Returns List<dynamic> A list of fields. ToBinaryPacket() public byte[] ToBinaryPacket() Returns byte[]"
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.WorldBlockPlacedOutPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.WorldBlockPlacedOutPacket.html",
    "title": "Class WorldBlockPlacedOutPacket | PixelPilot",
    "keywords": "Class WorldBlockPlacedOutPacket Namespace PixelPilot.PixelGameClient.Messages.Send Assembly PixelPilot.Core.dll public class WorldBlockPlacedOutPacket : ReflectivePixelOutPacket, IPixelGamePacketOut Inheritance object ReflectivePixelOutPacket WorldBlockPlacedOutPacket Implements IPixelGamePacketOut Inherited Members ReflectivePixelOutPacket.messageType ReflectivePixelOutPacket.GetFields(bool) ReflectivePixelOutPacket.ToBinaryPacket() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WorldBlockPlacedOutPacket(List<Point>, int, int) public WorldBlockPlacedOutPacket(List<Point> positions, int layer, int blockId) Parameters positions List<Point> layer int blockId int WorldBlockPlacedOutPacket(List<Point>, int, int, dynamic[]) public WorldBlockPlacedOutPacket(List<Point> positions, int layer, int blockId, dynamic[] extraData) Parameters positions List<Point> layer int blockId int extraData dynamic[] WorldBlockPlacedOutPacket(int, int, int, int) public WorldBlockPlacedOutPacket(int x, int y, int layer, int blockId) Parameters x int y int layer int blockId int WorldBlockPlacedOutPacket(int, int, int, int, dynamic[]) public WorldBlockPlacedOutPacket(int x, int y, int layer, int blockId, dynamic[] extraData) Parameters x int y int layer int blockId int extraData dynamic[] Properties BlockId public int BlockId { get; } Property Value int ExtraData public dynamic[]? ExtraData { get; } Property Value dynamic[] Layer public int Layer { get; } Property Value int RawPositions public byte[] RawPositions { get; } Property Value byte[] Methods GetFields() Gets the fields of the packet. protected override List<dynamic> GetFields() Returns List<dynamic> A list of fields."
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.html",
    "title": "Namespace PixelPilot.PixelGameClient.Messages.Send | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.Messages.Send Classes GlobalSwitchChangeOutPacket GlobalSwitchResetOutPacket PlayerChatOutPacket PlayerFaceOutPacket PlayerGodmodeOutPacket PlayerLocalSwitchChangedOutPacket PlayerLocalSwitchResetOutPacket PlayerMoveOutPacket PlayerStatsChangedOutPacket PlayerTouchBlockOutPacket ReflectivePixelOutPacket Represents a reflective pixel game packet for outgoing communication. Automatically converts to binary. WorldBlockPlacedOutPacket"
  },
  "api/PixelPilot.PixelGameClient.Messages.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.html",
    "title": "Namespace PixelPilot.PixelGameClient.Messages | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.Messages Classes PacketConverter Converts binary data into pixel game packets. Interfaces IDynamicConstructedPacket Constructor that enforces the contract that the packet implements a List of dynamic type constructor. This is used for when a packet cannot simply be constructed using a constructor because the packet length may vary. IPacketOutConvertible IPixelGamePacket IPixelGamePacketOut Packets that can be sent to the PixelWalker game server. IPixelGamePlayerPacket Special interface for packets that are triggered by or indicate a status change to a player."
  },
  "api/PixelPilot.PixelGameClient.PixelGameClientBuilder.html": {
    "href": "api/PixelPilot.PixelGameClient.PixelGameClientBuilder.html",
    "title": "Class PixelGameClientBuilder | PixelPilot",
    "keywords": "Class PixelGameClientBuilder Namespace PixelPilot.PixelGameClient Assembly PixelPilot.Core.dll public class PixelGameClientBuilder Inheritance object PixelGameClientBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ApiClient public PixelApiClient? ApiClient Field Value PixelApiClient Properties AutomaticReconnect public bool AutomaticReconnect { get; set; } Property Value bool ConfigurePacketQueue public Func<PixelPilotClient, IPixelPacketQueue?> ConfigurePacketQueue { get; set; } Property Value Func<PixelPilotClient, IPixelPacketQueue> Email public string? Email { get; set; } Property Value string Password public string? Password { get; set; } Property Value string Prefix public string? Prefix { get; set; } Property Value string Token public string? Token { get; set; } Property Value string Methods Build() public PixelPilotClient Build() Returns PixelPilotClient DisablePacketQueue() Disable the internal packet queue that prevents messages from being caught by the PW rate limiter. public PixelGameClientBuilder DisablePacketQueue() Returns PixelGameClientBuilder SetAutomaticReconnect(bool) public PixelGameClientBuilder SetAutomaticReconnect(bool value) Parameters value bool Returns PixelGameClientBuilder SetEmail(string) public PixelGameClientBuilder SetEmail(string email) Parameters email string Returns PixelGameClientBuilder SetPassword(string) public PixelGameClientBuilder SetPassword(string password) Parameters password string Returns PixelGameClientBuilder SetPixelApi(PixelApiClient?) Use a custom PixelApiClient public PixelGameClientBuilder SetPixelApi(PixelApiClient? client) Parameters client PixelApiClient The custom client Returns PixelGameClientBuilder SetPrefix(string?) Set the prefix that the bot will use outgoing chat messages. public PixelGameClientBuilder SetPrefix(string? prefix) Parameters prefix string Returns PixelGameClientBuilder SetToken(string) public PixelGameClientBuilder SetToken(string token) Parameters token string Returns PixelGameClientBuilder"
  },
  "api/PixelPilot.PixelGameClient.PixelGameException.html": {
    "href": "api/PixelPilot.PixelGameClient.PixelGameException.html",
    "title": "Class PixelGameException | PixelPilot",
    "keywords": "Class PixelGameException Namespace PixelPilot.PixelGameClient Assembly PixelPilot.Core.dll public class PixelGameException : Exception, ISerializable Inheritance object Exception PixelGameException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PixelGameException(string) public PixelGameException(string msg) Parameters msg string"
  },
  "api/PixelPilot.PixelGameClient.PixelPilotClient.ClientConnected.html": {
    "href": "api/PixelPilot.PixelGameClient.PixelPilotClient.ClientConnected.html",
    "title": "Delegate PixelPilotClient.ClientConnected | PixelPilot",
    "keywords": "Delegate PixelPilotClient.ClientConnected Namespace PixelPilot.PixelGameClient Assembly PixelPilot.Core.dll public delegate void PixelPilotClient.ClientConnected(object sender) Parameters sender object"
  },
  "api/PixelPilot.PixelGameClient.PixelPilotClient.ClientDisconnected.html": {
    "href": "api/PixelPilot.PixelGameClient.PixelPilotClient.ClientDisconnected.html",
    "title": "Delegate PixelPilotClient.ClientDisconnected | PixelPilot",
    "keywords": "Delegate PixelPilotClient.ClientDisconnected Namespace PixelPilot.PixelGameClient Assembly PixelPilot.Core.dll public delegate void PixelPilotClient.ClientDisconnected(object sender, string? reason) Parameters sender object reason string"
  },
  "api/PixelPilot.PixelGameClient.PixelPilotClient.PacketReceived.html": {
    "href": "api/PixelPilot.PixelGameClient.PixelPilotClient.PacketReceived.html",
    "title": "Delegate PixelPilotClient.PacketReceived | PixelPilot",
    "keywords": "Delegate PixelPilotClient.PacketReceived Namespace PixelPilot.PixelGameClient Assembly PixelPilot.Core.dll public delegate void PixelPilotClient.PacketReceived(object sender, IPixelGamePacket packet) Parameters sender object packet IPixelGamePacket"
  },
  "api/PixelPilot.PixelGameClient.PixelPilotClient.PacketSend.html": {
    "href": "api/PixelPilot.PixelGameClient.PixelPilotClient.PacketSend.html",
    "title": "Delegate PixelPilotClient.PacketSend | PixelPilot",
    "keywords": "Delegate PixelPilotClient.PacketSend Namespace PixelPilot.PixelGameClient Assembly PixelPilot.Core.dll public delegate void PixelPilotClient.PacketSend(object sender, IPixelGamePacketOut packet) Parameters sender object packet IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.PixelPilotClient.html": {
    "href": "api/PixelPilot.PixelGameClient.PixelPilotClient.html",
    "title": "Class PixelPilotClient | PixelPilot",
    "keywords": "Class PixelPilotClient Namespace PixelPilot.PixelGameClient Assembly PixelPilot.Core.dll Client for interacting with the PixelWalker game server. public class PixelPilotClient : IDisposable Inheritance object PixelPilotClient Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PixelPilotClient(PixelApiClient, bool, string?, Func<PixelPilotClient, IPixelPacketQueue?>) public PixelPilotClient(PixelApiClient apiClient, bool automaticReconnect, string? botPrefix, Func<PixelPilotClient, IPixelPacketQueue?> configurePacketQueue) Parameters apiClient PixelApiClient automaticReconnect bool botPrefix string configurePacketQueue Func<PixelPilotClient, IPixelPacketQueue> Fields ApiClient public readonly PixelApiClient ApiClient Field Value PixelApiClient SecondsBeforeGatewayTimeout public static readonly int SecondsBeforeGatewayTimeout Field Value int Properties AutomaticReconnect Indicates if the client will try to automatically reconnect if the connection gets somehow lost. public bool AutomaticReconnect { get; } Property Value bool BotId The player ID of the client. public int? BotId { get; } Property Value int? BotPrefix public string? BotPrefix { get; set; } Property Value string DisposeApi public bool DisposeApi { get; set; } Property Value bool IsConnected Indicates if the client is connected. public bool IsConnected { get; } Property Value bool PacketQueueSize public int PacketQueueSize { get; } Property Value int Username The username of this bot. public string? Username { get; } Property Value string Methods Builder() public static PixelGameClientBuilder Builder() Returns PixelGameClientBuilder Connect(string) Connects to a game room using the specified room type and room ID. public Task Connect(string roomId) Parameters roomId string The ID of the room. Returns Task A task representing the asynchronous operation. Disconnect() Disconnects the socket client gracefully by stopping it with a normal closure status. public Task Disconnect() Returns Task A task representing the asynchronous operation. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Send(IPixelGamePacketOut) Sends a pixel game packet. Uses an internal rate limiter to limit packets. public void Send(IPixelGamePacketOut packet) Parameters packet IPixelGamePacketOut The pixel game packet to send. SendChat(string, bool) Sends a chat message while ensuring that the message doesn't become too long. public void SendChat(string msg, bool prefix = true) Parameters msg string The message prefix bool If the message should be prefixed SendDirect(IPixelGamePacketOut) Sends a pixel game packet. Bypasses the internal rate limiter public void SendDirect(IPixelGamePacketOut packet) Parameters packet IPixelGamePacketOut The pixel game packet to send. SendPm(string, string) Same as SendChat but as PM. public void SendPm(string username, string msg) Parameters username string Player username msg string The message WaitForDisconnect(CancellationToken) public Task WaitForDisconnect(CancellationToken ct = default) Parameters ct CancellationToken Returns Task WaitForEmptyQueue(int) public Task WaitForEmptyQueue(int checkTime = 1000) Parameters checkTime int Returns Task Events OnClientConnected Fired once init has been received by the client. public event PixelPilotClient.ClientConnected? OnClientConnected Event Type PixelPilotClient.ClientConnected OnClientDisconnected Fired when the client has been disconnected. Optional reason is available when present on the socket connection. public event PixelPilotClient.ClientDisconnected? OnClientDisconnected Event Type PixelPilotClient.ClientDisconnected OnPacketReceived Event that occurs when a packet is received. public event PixelPilotClient.PacketReceived? OnPacketReceived Event Type PixelPilotClient.PacketReceived OnPacketSend Event that occurs when a packet is send. public event PixelPilotClient.PacketSend? OnPacketSend Event Type PixelPilotClient.PacketSend"
  },
  "api/PixelPilot.PixelGameClient.Players.Basic.Player.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.Basic.Player.html",
    "title": "Class Player | PixelPilot",
    "keywords": "Class Player Namespace PixelPilot.PixelGameClient.Players.Basic Assembly PixelPilot.Core.dll public class Player : IPixelPlayer Inheritance object Player Implements IPixelPlayer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Player(PlayerJoinPacket) Construct a new player from the incoming packet. public Player(PlayerJoinPacket packet) Parameters packet PlayerJoinPacket Player(int, string, string, int, bool, Color, double, double, int, int, int, bool, bool, bool, bool, bool) public Player(int id, string accountId, string username, int face, bool isAdmin, Color chatColor, double x, double y, int coins, int blueCoins, int deaths, bool godmode, bool modmode, bool hasCrown, bool canGod, bool canEdit) Parameters id int accountId string username string face int isAdmin bool chatColor Color x double y double coins int blueCoins int deaths int godmode bool modmode bool hasCrown bool canGod bool canEdit bool Properties AccountId The account ID of this player. Use this for persistant storage. public string AccountId { get; } Property Value string BlueCoins public int BlueCoins { get; set; } Property Value int CanEdit public bool CanEdit { get; set; } Property Value bool CanGod public bool CanGod { get; set; } Property Value bool ChatColor public Color ChatColor { get; set; } Property Value Color Deaths public int Deaths { get; set; } Property Value int Face public int Face { get; set; } Property Value int Godmode public bool Godmode { get; set; } Property Value bool GoldCoins public int GoldCoins { get; set; } Property Value int HasCompletedWorld public bool HasCompletedWorld { get; set; } Property Value bool HasCrown public bool HasCrown { get; set; } Property Value bool Horizontal public int Horizontal { get; set; } Property Value int Id The unique player ID of this player in this world. public int Id { get; } Property Value int IsAdmin public bool IsAdmin { get; } Property Value bool ModX public double ModX { get; set; } Property Value double ModY public double ModY { get; set; } Property Value double Modmode public bool Modmode { get; set; } Property Value bool SpaceJustDown public bool SpaceJustDown { get; set; } Property Value bool Spacedown public bool Spacedown { get; set; } Property Value bool TickId public int TickId { get; set; } Property Value int Username The display name of the player. public string Username { get; } Property Value string VelocityX public double VelocityX { get; set; } Property Value double VelocityY public double VelocityY { get; set; } Property Value double Vertical public int Vertical { get; set; } Property Value int X public double X { get; set; } Property Value double Y public double Y { get; set; } Property Value double"
  },
  "api/PixelPilot.PixelGameClient.Players.Basic.PlayerManager.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.Basic.PlayerManager.html",
    "title": "Class PlayerManager | PixelPilot",
    "keywords": "Class PlayerManager Namespace PixelPilot.PixelGameClient.Players.Basic Assembly PixelPilot.Core.dll Basic implementation of the player manager. public class PlayerManager : PixelPlayerManager<Player> Inheritance object PixelPlayerManager<Player> PlayerManager Inherited Members PixelPlayerManager<Player>._logger PixelPlayerManager<Player>.Players PixelPlayerManager<Player>.CrownedPlayerId PixelPlayerManager<Player>.ClientId PixelPlayerManager<Player>.OnPrePlayerStatusChange PixelPlayerManager<Player>.OnPlayerStatusChanged PixelPlayerManager<Player>.OnPlayerJoined PixelPlayerManager<Player>.OnPlayerLeft PixelPlayerManager<Player>.CrownedPlayer PixelPlayerManager<Player>.GetPlayer(int) PixelPlayerManager<Player>.HandlePacket(object, IPixelGamePacket) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreatePlayer(PlayerJoinPacket) Used to create a new instance of IPixelPlayer protected override Player CreatePlayer(PlayerJoinPacket join) Parameters join PlayerJoinPacket The join packet Returns Player A new IPixelPlayer instance"
  },
  "api/PixelPilot.PixelGameClient.Players.Basic.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.Basic.html",
    "title": "Namespace PixelPilot.PixelGameClient.Players.Basic | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.Players.Basic Classes Player PlayerManager Basic implementation of the player manager."
  },
  "api/PixelPilot.PixelGameClient.Players.IPixelPlayer.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.IPixelPlayer.html",
    "title": "Interface IPixelPlayer | PixelPilot",
    "keywords": "Interface IPixelPlayer Namespace PixelPilot.PixelGameClient.Players Assembly PixelPilot.Core.dll public interface IPixelPlayer Properties AccountId The account ID of this player. Use this for persistant storage. string AccountId { get; } Property Value string BlueCoins int BlueCoins { get; set; } Property Value int CanEdit bool CanEdit { get; set; } Property Value bool CanGod bool CanGod { get; set; } Property Value bool ChatColor Color ChatColor { get; set; } Property Value Color Deaths int Deaths { get; set; } Property Value int Face int Face { get; set; } Property Value int Godmode bool Godmode { get; set; } Property Value bool GoldCoins int GoldCoins { get; set; } Property Value int HasCompletedWorld bool HasCompletedWorld { get; set; } Property Value bool HasCrown bool HasCrown { get; set; } Property Value bool Horizontal int Horizontal { get; set; } Property Value int Id The unique player ID of this player in this world. int Id { get; } Property Value int IsAdmin bool IsAdmin { get; } Property Value bool ModX double ModX { get; set; } Property Value double ModY double ModY { get; set; } Property Value double Modmode bool Modmode { get; set; } Property Value bool SpaceJustDown bool SpaceJustDown { get; set; } Property Value bool Spacedown bool Spacedown { get; set; } Property Value bool TickId int TickId { get; set; } Property Value int Username The display name of the player. string Username { get; } Property Value string VelocityX double VelocityX { get; set; } Property Value double VelocityY double VelocityY { get; set; } Property Value double Vertical int Vertical { get; set; } Property Value int X double X { get; set; } Property Value double Y double Y { get; set; } Property Value double"
  },
  "api/PixelPilot.PixelGameClient.Players.PixelPlayerManager-1.PlayerJoined.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.PixelPlayerManager-1.PlayerJoined.html",
    "title": "Delegate PixelPlayerManager<T>.PlayerJoined | PixelPilot",
    "keywords": "Delegate PixelPlayerManager<T>.PlayerJoined Namespace PixelPilot.PixelGameClient.Players Assembly PixelPilot.Core.dll public delegate void PixelPlayerManager<T>.PlayerJoined(object sender, T player) Parameters sender object player T"
  },
  "api/PixelPilot.PixelGameClient.Players.PixelPlayerManager-1.PlayerLeft.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.PixelPlayerManager-1.PlayerLeft.html",
    "title": "Delegate PixelPlayerManager<T>.PlayerLeft | PixelPilot",
    "keywords": "Delegate PixelPlayerManager<T>.PlayerLeft Namespace PixelPilot.PixelGameClient.Players Assembly PixelPilot.Core.dll public delegate void PixelPlayerManager<T>.PlayerLeft(object sender, T player) Parameters sender object player T"
  },
  "api/PixelPilot.PixelGameClient.Players.PixelPlayerManager-1.PlayerStatusChanged.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.PixelPlayerManager-1.PlayerStatusChanged.html",
    "title": "Delegate PixelPlayerManager<T>.PlayerStatusChanged | PixelPilot",
    "keywords": "Delegate PixelPlayerManager<T>.PlayerStatusChanged Namespace PixelPilot.PixelGameClient.Players Assembly PixelPilot.Core.dll public delegate void PixelPlayerManager<T>.PlayerStatusChanged(object sender, T player) Parameters sender object player T"
  },
  "api/PixelPilot.PixelGameClient.Players.PixelPlayerManager-1.PrePlayerStatusChange.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.PixelPlayerManager-1.PrePlayerStatusChange.html",
    "title": "Delegate PixelPlayerManager<T>.PrePlayerStatusChange | PixelPilot",
    "keywords": "Delegate PixelPlayerManager<T>.PrePlayerStatusChange Namespace PixelPilot.PixelGameClient.Players Assembly PixelPilot.Core.dll public delegate void PixelPlayerManager<T>.PrePlayerStatusChange(object sender, T player, IPixelGamePlayerPacket packet) Parameters sender object player T packet IPixelGamePlayerPacket"
  },
  "api/PixelPilot.PixelGameClient.Players.PixelPlayerManager-1.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.PixelPlayerManager-1.html",
    "title": "Class PixelPlayerManager<T> | PixelPilot",
    "keywords": "Class PixelPlayerManager<T> Namespace PixelPilot.PixelGameClient.Players Assembly PixelPilot.Core.dll Class that handles players in a world. Automatically updates the players stats. public abstract class PixelPlayerManager<T> where T : IPixelPlayer Type Parameters T Class that handles players in a world. Automatically updates the players stats. Inheritance object PixelPlayerManager<T> Derived PlayerManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields _logger protected ILogger _logger Field Value ILogger Properties ClientId public int ClientId { get; } Property Value int CrownedPlayer public T? CrownedPlayer { get; } Property Value T CrownedPlayerId public int CrownedPlayerId { get; } Property Value int Players public IEnumerable<T> Players { get; } Property Value IEnumerable<T> Methods CreatePlayer(PlayerJoinPacket) Used to create a new instance of IPixelPlayer protected abstract T CreatePlayer(PlayerJoinPacket join) Parameters join PlayerJoinPacket The join packet Returns T A new IPixelPlayer instance GetPlayer(int) Get the player based on it's ID. Returns NULL if no player was found. public T? GetPlayer(int id) Parameters id int The player ID Returns T A IPixelPlayer or NULL HandlePacket(object, IPixelGamePacket) Method that can receive packets and handle them accordingly. Should update the player state and fire relevant events. public void HandlePacket(object sender, IPixelGamePacket packet) Parameters sender object The packet sender packet IPixelGamePacket The packet Events OnPlayerJoined Fired when a player leaves the world. public event PixelPlayerManager<T>.PlayerJoined? OnPlayerJoined Event Type PixelPlayerManager<T>.PlayerJoined OnPlayerLeft Fired when a player leaves the world. public event PixelPlayerManager<T>.PlayerLeft? OnPlayerLeft Event Type PixelPlayerManager<T>.PlayerLeft OnPlayerStatusChanged Fired once the players properties have been updated. public event PixelPlayerManager<T>.PlayerStatusChanged? OnPlayerStatusChanged Event Type PixelPlayerManager<T>.PlayerStatusChanged OnPrePlayerStatusChange Fired before the player properties are changed. public event PixelPlayerManager<T>.PrePlayerStatusChange? OnPrePlayerStatusChange Event Type PixelPlayerManager<T>.PrePlayerStatusChange"
  },
  "api/PixelPilot.PixelGameClient.Players.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.html",
    "title": "Namespace PixelPilot.PixelGameClient.Players | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.Players Classes PixelPlayerManager<T> Class that handles players in a world. Automatically updates the players stats. Interfaces IPixelPlayer Delegates PixelPlayerManager<T>.PlayerJoined PixelPlayerManager<T>.PlayerLeft PixelPlayerManager<T>.PlayerStatusChanged PixelPlayerManager<T>.PrePlayerStatusChange"
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.ActivatorBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.ActivatorBlock.html",
    "title": "Class ActivatorBlock | PixelPilot",
    "keywords": "Class ActivatorBlock Namespace PixelPilot.PixelGameClient.World.Blocks Assembly PixelPilot.Core.dll public class ActivatorBlock : BasicBlock, IPixelBlock Inheritance object BasicBlock ActivatorBlock Implements IPixelBlock Inherited Members BasicBlock.BlockId BasicBlock.AsPlacedBlock(int, int, int) BasicBlock.AsWorldBuffer(int, int, int) BasicBlock.Equals(BasicBlock) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ActivatorBlock(int, int, bool) public ActivatorBlock(int blockId, int switchId, bool status) Parameters blockId int switchId int status bool Properties Status public bool Status { get; set; } Property Value bool SwitchId public int SwitchId { get; set; } Property Value int Methods AsPacketOut(List<Point>, int) public override IPixelGamePacketOut AsPacketOut(List<Point> positions, int layer) Parameters positions List<Point> layer int Returns IPixelGamePacketOut AsPacketOut(int, int, int) public override IPixelGamePacketOut AsPacketOut(int x, int y, int layer) Parameters x int y int layer int Returns IPixelGamePacketOut AsWorldBuffer(int, int, int, int) public override byte[] AsWorldBuffer(int x, int y, int layer, int customId) Parameters x int y int layer int customId int Returns byte[] Equals(ActivatorBlock) protected bool Equals(ActivatorBlock other) Parameters other ActivatorBlock Returns bool Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.BasicBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.BasicBlock.html",
    "title": "Class BasicBlock | PixelPilot",
    "keywords": "Class BasicBlock Namespace PixelPilot.PixelGameClient.World.Blocks Assembly PixelPilot.Core.dll Basic blocks only have a block ID. No special data can be assigned to them. public class BasicBlock : IPixelBlock Inheritance object BasicBlock Implements IPixelBlock Derived ActivatorBlock LeveledEffectBlock TimedEffectBlock ToggleEffectBlock MorphableBlock PortalBlock ResetterBlock SignBlock WorldPortalBlock Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BasicBlock(PixelBlock) public BasicBlock(PixelBlock block) Parameters block PixelBlock BasicBlock(int) public BasicBlock(int blockId) Parameters blockId int Properties BlockId public int BlockId { get; set; } Property Value int Methods AsPacketOut(List<Point>, int) public virtual IPixelGamePacketOut AsPacketOut(List<Point> positions, int layer) Parameters positions List<Point> layer int Returns IPixelGamePacketOut AsPacketOut(int, int, int) public virtual IPixelGamePacketOut AsPacketOut(int x, int y, int layer) Parameters x int y int layer int Returns IPixelGamePacketOut AsPlacedBlock(int, int, int) public IPlacedBlock AsPlacedBlock(int x, int y, int layer) Parameters x int y int layer int Returns IPlacedBlock AsWorldBuffer(int, int, int) public byte[] AsWorldBuffer(int x, int y, int layer) Parameters x int y int layer int Returns byte[] AsWorldBuffer(int, int, int, int) public virtual byte[] AsWorldBuffer(int x, int y, int layer, int customId) Parameters x int y int layer int customId int Returns byte[] Equals(BasicBlock) protected bool Equals(BasicBlock other) Parameters other BasicBlock Returns bool Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.Effects.LeveledEffectBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.Effects.LeveledEffectBlock.html",
    "title": "Class LeveledEffectBlock | PixelPilot",
    "keywords": "Class LeveledEffectBlock Namespace PixelPilot.PixelGameClient.World.Blocks.Effects Assembly PixelPilot.Core.dll public class LeveledEffectBlock : BasicBlock, IPixelBlock Inheritance object BasicBlock LeveledEffectBlock Implements IPixelBlock Inherited Members BasicBlock.BlockId BasicBlock.AsPlacedBlock(int, int, int) BasicBlock.AsWorldBuffer(int, int, int) BasicBlock.Equals(BasicBlock) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LeveledEffectBlock(PixelBlock, int) public LeveledEffectBlock(PixelBlock block, int level) Parameters block PixelBlock level int LeveledEffectBlock(int, int) public LeveledEffectBlock(int blockId, int level) Parameters blockId int level int Properties Level public int Level { get; set; } Property Value int Methods AsPacketOut(List<Point>, int) public override IPixelGamePacketOut AsPacketOut(List<Point> positions, int layer) Parameters positions List<Point> layer int Returns IPixelGamePacketOut AsPacketOut(int, int, int) public override IPixelGamePacketOut AsPacketOut(int x, int y, int layer) Parameters x int y int layer int Returns IPixelGamePacketOut AsWorldBuffer(int, int, int, int) public override byte[] AsWorldBuffer(int x, int y, int layer, int customId) Parameters x int y int layer int customId int Returns byte[] Equals(LeveledEffectBlock) protected bool Equals(LeveledEffectBlock other) Parameters other LeveledEffectBlock Returns bool Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.Effects.TimedEffectBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.Effects.TimedEffectBlock.html",
    "title": "Class TimedEffectBlock | PixelPilot",
    "keywords": "Class TimedEffectBlock Namespace PixelPilot.PixelGameClient.World.Blocks.Effects Assembly PixelPilot.Core.dll public class TimedEffectBlock : BasicBlock, IPixelBlock Inheritance object BasicBlock TimedEffectBlock Implements IPixelBlock Inherited Members BasicBlock.BlockId BasicBlock.AsPlacedBlock(int, int, int) BasicBlock.AsWorldBuffer(int, int, int) BasicBlock.Equals(BasicBlock) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TimedEffectBlock(PixelBlock, int) public TimedEffectBlock(PixelBlock block, int duration) Parameters block PixelBlock duration int TimedEffectBlock(int, int) public TimedEffectBlock(int blockId, int duration) Parameters blockId int duration int Properties Duration public int Duration { get; set; } Property Value int Methods AsPacketOut(List<Point>, int) public override IPixelGamePacketOut AsPacketOut(List<Point> positions, int layer) Parameters positions List<Point> layer int Returns IPixelGamePacketOut AsPacketOut(int, int, int) public override IPixelGamePacketOut AsPacketOut(int x, int y, int layer) Parameters x int y int layer int Returns IPixelGamePacketOut AsWorldBuffer(int, int, int, int) public override byte[] AsWorldBuffer(int x, int y, int layer, int customId) Parameters x int y int layer int customId int Returns byte[] Equals(TimedEffectBlock) protected bool Equals(TimedEffectBlock other) Parameters other TimedEffectBlock Returns bool Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.Effects.ToggleEffectBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.Effects.ToggleEffectBlock.html",
    "title": "Class ToggleEffectBlock | PixelPilot",
    "keywords": "Class ToggleEffectBlock Namespace PixelPilot.PixelGameClient.World.Blocks.Effects Assembly PixelPilot.Core.dll public class ToggleEffectBlock : BasicBlock, IPixelBlock Inheritance object BasicBlock ToggleEffectBlock Implements IPixelBlock Inherited Members BasicBlock.BlockId BasicBlock.AsPlacedBlock(int, int, int) BasicBlock.AsWorldBuffer(int, int, int) BasicBlock.Equals(BasicBlock) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ToggleEffectBlock(PixelBlock, bool) public ToggleEffectBlock(PixelBlock block, bool enabled) Parameters block PixelBlock enabled bool ToggleEffectBlock(int, bool) public ToggleEffectBlock(int blockId, bool enabled) Parameters blockId int enabled bool Properties Enabled public bool Enabled { get; set; } Property Value bool Methods AsPacketOut(List<Point>, int) public override IPixelGamePacketOut AsPacketOut(List<Point> positions, int layer) Parameters positions List<Point> layer int Returns IPixelGamePacketOut AsPacketOut(int, int, int) public override IPixelGamePacketOut AsPacketOut(int x, int y, int layer) Parameters x int y int layer int Returns IPixelGamePacketOut AsWorldBuffer(int, int, int, int) public override byte[] AsWorldBuffer(int x, int y, int layer, int customId) Parameters x int y int layer int customId int Returns byte[] Equals(ToggleEffectBlock) protected bool Equals(ToggleEffectBlock other) Parameters other ToggleEffectBlock Returns bool Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.Effects.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.Effects.html",
    "title": "Namespace PixelPilot.PixelGameClient.World.Blocks.Effects | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.World.Blocks.Effects Classes LeveledEffectBlock TimedEffectBlock ToggleEffectBlock"
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.IPixelBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.IPixelBlock.html",
    "title": "Interface IPixelBlock | PixelPilot",
    "keywords": "Interface IPixelBlock Namespace PixelPilot.PixelGameClient.World.Blocks Assembly PixelPilot.Core.dll Generic interface for blocks. Every block has atleast these properties. public interface IPixelBlock Properties Block PixelBlock Block { get; } Property Value PixelBlock BlockId int BlockId { get; } Property Value int Methods AsPacketOut(List<Point>, int) IPixelGamePacketOut AsPacketOut(List<Point> positions, int layer) Parameters positions List<Point> layer int Returns IPixelGamePacketOut AsPacketOut(int, int, int) IPixelGamePacketOut AsPacketOut(int x, int y, int layer) Parameters x int y int layer int Returns IPixelGamePacketOut AsPlacedBlock(int, int, int) IPlacedBlock AsPlacedBlock(int x, int y, int layer) Parameters x int y int layer int Returns IPlacedBlock AsWorldBuffer(int, int, int) byte[] AsWorldBuffer(int x, int y, int layer) Parameters x int y int layer int Returns byte[] AsWorldBuffer(int, int, int, int) byte[] AsWorldBuffer(int x, int y, int layer, int customId) Parameters x int y int layer int customId int Returns byte[]"
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.MorphableBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.MorphableBlock.html",
    "title": "Class MorphableBlock | PixelPilot",
    "keywords": "Class MorphableBlock Namespace PixelPilot.PixelGameClient.World.Blocks Assembly PixelPilot.Core.dll Morphable blocks include blocks with multiple states. This includes decorations but also coin doors, gates, etc. public class MorphableBlock : BasicBlock, IPixelBlock Inheritance object BasicBlock MorphableBlock Implements IPixelBlock Inherited Members BasicBlock.BlockId BasicBlock.AsPlacedBlock(int, int, int) BasicBlock.AsWorldBuffer(int, int, int) BasicBlock.Equals(BasicBlock) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MorphableBlock(int, int) public MorphableBlock(int blockId, int morph) Parameters blockId int morph int Properties Morph public int Morph { get; set; } Property Value int Methods AsPacketOut(List<Point>, int) public override IPixelGamePacketOut AsPacketOut(List<Point> positions, int layer) Parameters positions List<Point> layer int Returns IPixelGamePacketOut AsPacketOut(int, int, int) public override IPixelGamePacketOut AsPacketOut(int x, int y, int layer) Parameters x int y int layer int Returns IPixelGamePacketOut AsWorldBuffer(int, int, int, int) public override byte[] AsWorldBuffer(int x, int y, int layer, int customId) Parameters x int y int layer int customId int Returns byte[] Equals(MorphableBlock) protected bool Equals(MorphableBlock other) Parameters other MorphableBlock Returns bool Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.Placed.IPlacedBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.Placed.IPlacedBlock.html",
    "title": "Interface IPlacedBlock | PixelPilot",
    "keywords": "Interface IPlacedBlock Namespace PixelPilot.PixelGameClient.World.Blocks.Placed Assembly PixelPilot.Core.dll A placed block has a location assigned to it. This wrapper is used by API methods where the block in question is placed in some kind of way. public interface IPlacedBlock Properties Block IPixelBlock Block { get; } Property Value IPixelBlock Layer int Layer { get; } Property Value int X int X { get; } Property Value int Y int Y { get; } Property Value int Methods AsPacketOut() IPixelGamePacketOut AsPacketOut() Returns IPixelGamePacketOut AsWorldBuffer() byte[] AsWorldBuffer() Returns byte[] AsWorldBuffer(int) byte[] AsWorldBuffer(int customId) Parameters customId int Returns byte[]"
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.Placed.PlacedBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.Placed.PlacedBlock.html",
    "title": "Class PlacedBlock | PixelPilot",
    "keywords": "Class PlacedBlock Namespace PixelPilot.PixelGameClient.World.Blocks.Placed Assembly PixelPilot.Core.dll An immutable instance of a IPlacedBlock public class PlacedBlock : IPlacedBlock Inheritance object PlacedBlock Implements IPlacedBlock Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlacedBlock(int, int, int, IPixelBlock) public PlacedBlock(int x, int y, int layer, IPixelBlock block) Parameters x int y int layer int block IPixelBlock Properties Block public IPixelBlock Block { get; } Property Value IPixelBlock Layer public int Layer { get; } Property Value int PlacedUserId public int? PlacedUserId { get; } Property Value int? X public int X { get; } Property Value int Y public int Y { get; } Property Value int Methods AsPacketOut() public IPixelGamePacketOut AsPacketOut() Returns IPixelGamePacketOut AsWorldBuffer() public byte[] AsWorldBuffer() Returns byte[] AsWorldBuffer(int) public byte[] AsWorldBuffer(int customId) Parameters customId int Returns byte[] Equals(PlacedBlock) protected bool Equals(PlacedBlock other) Parameters other PlacedBlock Returns bool Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.Placed.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.Placed.html",
    "title": "Namespace PixelPilot.PixelGameClient.World.Blocks.Placed | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.World.Blocks.Placed Classes PlacedBlock An immutable instance of a IPlacedBlock Interfaces IPlacedBlock A placed block has a location assigned to it. This wrapper is used by API methods where the block in question is placed in some kind of way."
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.PortalBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.PortalBlock.html",
    "title": "Class PortalBlock | PixelPilot",
    "keywords": "Class PortalBlock Namespace PixelPilot.PixelGameClient.World.Blocks Assembly PixelPilot.Core.dll public class PortalBlock : BasicBlock, IPixelBlock Inheritance object BasicBlock PortalBlock Implements IPixelBlock Inherited Members BasicBlock.BlockId BasicBlock.AsPlacedBlock(int, int, int) BasicBlock.AsWorldBuffer(int, int, int) BasicBlock.Equals(BasicBlock) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PortalBlock(int, int, int, int) public PortalBlock(int blockId, int portalId, int targetId, int direction) Parameters blockId int portalId int targetId int direction int Properties Direction public int Direction { get; set; } Property Value int PortalId public int PortalId { get; set; } Property Value int TargetId public int TargetId { get; set; } Property Value int Methods AsPacketOut(List<Point>, int) public override IPixelGamePacketOut AsPacketOut(List<Point> positions, int layer) Parameters positions List<Point> layer int Returns IPixelGamePacketOut AsPacketOut(int, int, int) public override IPixelGamePacketOut AsPacketOut(int x, int y, int layer) Parameters x int y int layer int Returns IPixelGamePacketOut AsWorldBuffer(int, int, int, int) public override byte[] AsWorldBuffer(int x, int y, int layer, int customId) Parameters x int y int layer int customId int Returns byte[] Equals(PortalBlock) protected bool Equals(PortalBlock other) Parameters other PortalBlock Returns bool Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.ResetterBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.ResetterBlock.html",
    "title": "Class ResetterBlock | PixelPilot",
    "keywords": "Class ResetterBlock Namespace PixelPilot.PixelGameClient.World.Blocks Assembly PixelPilot.Core.dll public class ResetterBlock : BasicBlock, IPixelBlock Inheritance object BasicBlock ResetterBlock Implements IPixelBlock Inherited Members BasicBlock.BlockId BasicBlock.AsPlacedBlock(int, int, int) BasicBlock.AsWorldBuffer(int, int, int) BasicBlock.Equals(BasicBlock) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ResetterBlock(int, bool) public ResetterBlock(int blockId, bool activated) Parameters blockId int activated bool Properties Status public bool Status { get; } Property Value bool Methods AsPacketOut(List<Point>, int) public override IPixelGamePacketOut AsPacketOut(List<Point> positions, int layer) Parameters positions List<Point> layer int Returns IPixelGamePacketOut AsPacketOut(int, int, int) public override IPixelGamePacketOut AsPacketOut(int x, int y, int layer) Parameters x int y int layer int Returns IPixelGamePacketOut AsWorldBuffer(int, int, int, int) public override byte[] AsWorldBuffer(int x, int y, int layer, int customId) Parameters x int y int layer int customId int Returns byte[] Equals(ResetterBlock) protected bool Equals(ResetterBlock other) Parameters other ResetterBlock Returns bool Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.SignBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.SignBlock.html",
    "title": "Class SignBlock | PixelPilot",
    "keywords": "Class SignBlock Namespace PixelPilot.PixelGameClient.World.Blocks Assembly PixelPilot.Core.dll public class SignBlock : BasicBlock, IPixelBlock Inheritance object BasicBlock SignBlock Implements IPixelBlock Inherited Members BasicBlock.BlockId BasicBlock.AsPlacedBlock(int, int, int) BasicBlock.AsWorldBuffer(int, int, int) BasicBlock.Equals(BasicBlock) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SignBlock(PixelBlock, string) public SignBlock(PixelBlock block, string text) Parameters block PixelBlock text string SignBlock(int, string) public SignBlock(int blockId, string text) Parameters blockId int text string Properties Text public string Text { get; set; } Property Value string Methods AsPacketOut(List<Point>, int) public override IPixelGamePacketOut AsPacketOut(List<Point> positions, int layer) Parameters positions List<Point> layer int Returns IPixelGamePacketOut AsPacketOut(int, int, int) public override IPixelGamePacketOut AsPacketOut(int x, int y, int layer) Parameters x int y int layer int Returns IPixelGamePacketOut AsWorldBuffer(int, int, int, int) public override byte[] AsWorldBuffer(int x, int y, int layer, int customId) Parameters x int y int layer int customId int Returns byte[] Equals(SignBlock) protected bool Equals(SignBlock other) Parameters other SignBlock Returns bool Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.WorldPortalBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.WorldPortalBlock.html",
    "title": "Class WorldPortalBlock | PixelPilot",
    "keywords": "Class WorldPortalBlock Namespace PixelPilot.PixelGameClient.World.Blocks Assembly PixelPilot.Core.dll public class WorldPortalBlock : BasicBlock, IPixelBlock Inheritance object BasicBlock WorldPortalBlock Implements IPixelBlock Inherited Members BasicBlock.BlockId BasicBlock.AsPlacedBlock(int, int, int) BasicBlock.AsWorldBuffer(int, int, int) BasicBlock.AsWorldBuffer(int, int, int, int) BasicBlock.Equals(BasicBlock) BasicBlock.Equals(object) BasicBlock.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WorldPortalBlock(string) public WorldPortalBlock(string worldId) Parameters worldId string Properties WorldId public string WorldId { get; set; } Property Value string Methods AsPacketOut(List<Point>, int) public override IPixelGamePacketOut AsPacketOut(List<Point> positions, int layer) Parameters positions List<Point> layer int Returns IPixelGamePacketOut AsPacketOut(int, int, int) public override IPixelGamePacketOut AsPacketOut(int x, int y, int layer) Parameters x int y int layer int Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.html",
    "title": "Namespace PixelPilot.PixelGameClient.World.Blocks | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.World.Blocks Classes ActivatorBlock BasicBlock Basic blocks only have a block ID. No special data can be assigned to them. MorphableBlock Morphable blocks include blocks with multiple states. This includes decorations but also coin doors, gates, etc. PortalBlock ResetterBlock SignBlock WorldPortalBlock Interfaces IPixelBlock Generic interface for blocks. Every block has atleast these properties."
  },
  "api/PixelPilot.PixelGameClient.World.Constants.BlockType.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Constants.BlockType.html",
    "title": "Enum BlockType | PixelPilot",
    "keywords": "Enum BlockType Namespace PixelPilot.PixelGameClient.World.Constants Assembly PixelPilot.Core.dll General category for block types. public enum BlockType Extension Methods PixelBlockExtensions.GetPacketFieldTypes(BlockType) Fields EffectLeveled = 9 EffectTimed = 7 EffectTogglable = 8 Morphable = 1 Normal = 0 Portal = 2 Sign = 6 SwitchActivator = 3 SwitchResetter = 4 WorldPortal = 5"
  },
  "api/PixelPilot.PixelGameClient.World.Constants.PixelBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Constants.PixelBlock.html",
    "title": "Enum PixelBlock | PixelPilot",
    "keywords": "Enum PixelBlock Namespace PixelPilot.PixelGameClient.World.Constants Assembly PixelPilot.Core.dll All blocks available in the game as of 29-04-2024. public enum PixelBlock Extension Methods PixelBlockExtensions.GetBlockType(PixelBlock) Fields BasicBlack = 139 BasicBlackBg = 149 BasicBlue = 145 BasicBlueBg = 155 BasicCyan = 144 BasicCyanBg = 154 BasicGray = 138 BasicGrayBg = 148 BasicGreen = 143 BasicGreenBg = 153 BasicMagenta = 146 BasicMagentaBg = 156 BasicOrange = 141 BasicOrangeBg = 151 BasicRed = 140 BasicRedBg = 150 BasicWhite = 137 BasicWhiteBg = 147 BasicYellow = 142 BasicYellowBg = 152 BeachAnchor = 313 BeachDockRopeLeft = 314 BeachDockRopeRight = 315 BeachDryBush = 307 BeachLifePreserverRingRed = 312 BeachParasol = 301 BeachRock = 306 BeachSand = 300 BeachSandDriftBottomLeft = 302 BeachSandDriftBottomRight = 305 BeachSandDriftTopLeft = 303 BeachSandDriftTopRight = 304 BeachTreePalm = 316 BeveledBlack = 159 BeveledBlue = 165 BeveledCyan = 164 BeveledGray = 158 BeveledGreen = 163 BeveledMagenta = 166 BeveledOrange = 161 BeveledRed = 160 BeveledWhite = 157 BeveledYellow = 162 BoostDown = 16 BoostLeft = 13 BoostRight = 15 BoostUp = 14 BrickBlack = 169 BrickBlackBg = 179 BrickBlue = 175 BrickBlueBg = 185 BrickBrown = 171 BrickBrownBg = 181 BrickGray = 168 BrickGrayBg = 178 BrickGreen = 173 BrickGreenBg = 183 BrickOlive = 172 BrickOliveBg = 182 BrickPurple = 176 BrickPurpleBg = 186 BrickRed = 170 BrickRedBg = 180 BrickTeal = 174 BrickTealBg = 184 BrickWhite = 167 BrickWhiteBg = 177 CandyBlue = 285 CandyBlueBg = 299 CandyCane = 290 CandyChocolate = 292 CandyCreamLarge = 294 CandyCreamSmall = 293 CandyGumdropGreen = 296 CandyGumdropPink = 297 CandyGumdropRed = 295 CandyLicorice = 291 CandyOnewayCyanTop = 288 CandyOnewayGreenTop = 289 CandyOnewayPinkTop = 286 CandyOnewayRedTop = 287 CandyPink = 284 CandyPinkBg = 298 CanvasBlue = 354 CanvasBlueBg = 363 CanvasCyanBg = 362 CanvasGrayBg = 356 CanvasGreen = 355 CanvasGreenBg = 361 CanvasOrangeBg = 358 CanvasPurpleBg = 364 CanvasRed = 353 CanvasRedBg = 357 CanvasTanBg = 359 CanvasYellowBg = 360 CarnivalBlueBg = 1265 CarnivalCheckerBg = 1261 CarnivalGreenBg = 1263 CarnivalPinkBg = 1262 CarnivalStripesPurpleVioletBg = 1260 CarnivalStripesRedWhiteBg = 1258 CarnivalStripesRedYellowBg = 1259 CarnivalYellowBg = 1264 CaveBlackBg = 411 CaveBlueBg = 417 CaveBrownBg = 413 CaveCyanBg = 416 CaveGrayDarkBg = 410 CaveGrayLightBg = 409 CaveGreenBg = 415 CavePinkBg = 419 CavePurpleBg = 418 CaveRedBg = 412 CaveYellowBg = 414 CheckerBlack = 209 CheckerBlackBg = 219 CheckerBlue = 215 CheckerBlueBg = 225 CheckerCyan = 214 CheckerCyanBg = 224 CheckerGray = 208 CheckerGrayBg = 218 CheckerGreen = 213 CheckerGreenBg = 223 CheckerMagenta = 216 CheckerMagentaBg = 226 CheckerOrange = 211 CheckerOrangeBg = 221 CheckerRed = 210 CheckerRedBg = 220 CheckerWhite = 207 CheckerWhiteBg = 217 CheckerYellow = 212 CheckerYellowBg = 222 ChristmasBellGroupRed = 773 ChristmasBellYellow = 772 ChristmasCandleRed = 774 ChristmasCandyCane = 748 ChristmasFencePlain = 733 ChristmasFenceSnow = 732 ChristmasGiftFullBlue = 758 ChristmasGiftFullGreen = 754 ChristmasGiftFullRed = 752 ChristmasGiftFullWhite = 756 ChristmasGiftFullYellow = 760 ChristmasGiftHalfBlue = 759 ChristmasGiftHalfGreen = 755 ChristmasGiftHalfRed = 753 ChristmasGiftHalfWhite = 757 ChristmasGiftHalfYellow = 761 ChristmasMistletoe = 749 ChristmasOrnamentBlue = 736 ChristmasOrnamentGreen = 735 ChristmasOrnamentRed = 734 ChristmasRibbonBlueCross = 744 ChristmasRibbonBlueHorizontal = 743 ChristmasRibbonBlueVertical = 742 ChristmasRibbonPurpleCross = 747 ChristmasRibbonPurpleHorizontal = 746 ChristmasRibbonPurpleVertical = 745 ChristmasRibbonRedBow = 751 ChristmasStar = 738 ChristmasStocking = 750 ChristmasStringLightBottomBlue = 765 ChristmasStringLightBottomGreen = 763 ChristmasStringLightBottomPurple = 766 ChristmasStringLightBottomRed = 762 ChristmasStringLightBottomYellow = 764 ChristmasStringLightTopBlue = 770 ChristmasStringLightTopGreen = 768 ChristmasStringLightTopPurple = 771 ChristmasStringLightTopRed = 767 ChristmasStringLightTopYellow = 769 ChristmasTreeLights = 731 ChristmasTreePlain = 730 ChristmasWrappingPaperBlueBg = 741 ChristmasWrappingPaperGreenBg = 740 ChristmasWrappingPaperYellowBg = 739 ChristmasWreath = 737 ClayTileBrickBg = 543 ClayTileDiamondBg = 544 ClayTileRoughBg = 546 ClayTileWhiteBg = 542 ClayTileXBg = 545 ClimbableChainDarkHorizontal = 22 ClimbableChainDarkVertical = 21 ClimbableChainLightHorizontal = 20 ClimbableChainLightVertical = 19 ClimbableLadderMetal = 23 ClimbableLadderStalkLarge = 28 ClimbableLadderStalkSmall = 27 ClimbableLadderWood = 24 ClimbableLatticeVine = 29 ClimbableRopeHorizontal = 26 ClimbableRopeVertical = 25 ClimbableVineHorizontal = 18 ClimbableVineVertical = 17 CloudGrayBottom = 500 CloudGrayBottomLeft = 505 CloudGrayBottomRight = 506 CloudGrayCenter = 498 CloudGrayLeft = 501 CloudGrayRight = 502 CloudGrayTop = 499 CloudGrayTopLeft = 504 CloudGrayTopRight = 503 CloudWhiteBottom = 491 CloudWhiteBottomLeft = 496 CloudWhiteBottomRight = 497 CloudWhiteCenter = 489 CloudWhiteLeft = 492 CloudWhiteRight = 493 CloudWhiteTop = 490 CloudWhiteTopLeft = 495 CloudWhiteTopRight = 494 CoinBlue = 40 CoinBlueDoor = 42 CoinBlueGate = 44 CoinGold = 39 CoinGoldDoor = 41 CoinGoldGate = 43 ConstructionBeamRedHorizontalLeft = 857 ConstructionBeamRedHorizontalLeftBg = 871 ConstructionBeamRedHorizontalMiddle = 858 ConstructionBeamRedHorizontalMiddleBg = 872 ConstructionBeamRedHorizontalRight = 859 ConstructionBeamRedHorizontalRightBg = 873 ConstructionBeamRedVerticalBottom = 862 ConstructionBeamRedVerticalBottomBg = 876 ConstructionBeamRedVerticalMiddle = 861 ConstructionBeamRedVerticalMiddleBg = 875 ConstructionBeamRedVerticalTop = 860 ConstructionBeamRedVerticalTopBg = 874 ConstructionCautionOrange = 863 ConstructionCement = 856 ConstructionCementBg = 870 ConstructionConeOrange = 864 ConstructionGravel = 855 ConstructionGravelBg = 869 ConstructionHydrantFire = 867 ConstructionPlywood = 854 ConstructionPlywoodBg = 868 ConstructionSignStop = 866 ConstructionSignWarning = 865 CrownGold = 33 CrownGoldDoor = 35 CrownGoldGate = 36 CrownSilver = 34 CrownSilverDoor = 37 CrownSilverGate = 38 DarkBlackBg = 199 DarkBlueBg = 205 DarkCyanBg = 204 DarkGrayBg = 198 DarkGreenBg = 203 DarkMagentaBg = 206 DarkOrangeBg = 201 DarkRedBg = 200 DarkWhiteBg = 197 DarkYellowBg = 202 DesertBush = 1155 DesertCactus = 1154 DesertRockOrange = 1153 DesertTree = 1156 DojoChineseCharacterAnd = 727 DojoChineseCharacterBook = 728 DojoChineseSymbolYinYang = 729 DojoOnewayGrayTop = 704 DojoOnewayWhiteTop = 703 DojoRooftopBlueDarkLeft = 714 DojoRooftopBlueDarkRight = 720 DojoRooftopBlueLeft = 713 DojoRooftopBlueRight = 719 DojoRooftopGreenDarkLeft = 718 DojoRooftopGreenDarkRight = 724 DojoRooftopGreenLeft = 717 DojoRooftopGreenRight = 723 DojoRooftopRedDarkLeft = 716 DojoRooftopRedDarkRight = 722 DojoRooftopRedLeft = 715 DojoRooftopRedRight = 721 DojoShinglesBlueBg = 707 DojoShinglesBlueDarkBg = 708 DojoShinglesGreenBg = 711 DojoShinglesGreenDarkBg = 712 DojoShinglesRedBg = 709 DojoShinglesRedDarkBg = 710 DojoWallpaperGrayBg = 706 DojoWallpaperWhiteBg = 705 DojoWindowBright = 725 DojoWindowDark = 726 DomesticBottomRight = 656 DomesticFrameBorderBottom = 696 DomesticFrameBorderBottomLeft = 699 DomesticFrameBorderBottomRight = 700 DomesticFrameBorderFull = 692 DomesticFrameBorderLeft = 693 DomesticFrameBorderLeftRight = 701 DomesticFrameBorderRight = 695 DomesticFrameBorderTop = 694 DomesticFrameBorderTopBottom = 702 DomesticFrameBorderTopLeft = 697 DomesticFrameBorderTopRight = 698 DomesticHalfBrownBottom = 687 DomesticHalfBrownLeft = 684 DomesticHalfBrownRight = 686 DomesticHalfBrownTop = 685 DomesticHalfWhiteBottom = 691 DomesticHalfWhiteLeft = 688 DomesticHalfWhiteRight = 690 DomesticHalfWhiteTop = 689 DomesticHalfYellowBottom = 683 DomesticHalfYellowLeft = 680 DomesticHalfYellowRight = 682 DomesticHalfYellowTop = 681 DomesticLamp = 648 DomesticLightBulbBottomOff = 649 DomesticLightBulbBottomOn = 650 DomesticLightBulbTopOff = 651 DomesticLightBulbTopOn = 652 DomesticPaintingBlue = 665 DomesticPaintingBlueDark = 666 DomesticPaintingGreen = 667 DomesticPaintingPurple = 664 DomesticPipeBottomLeft = 653 DomesticPipeCross = 657 DomesticPipeStraightHorizontal = 658 DomesticPipeStraightVertical = 659 DomesticPipeTBottom = 660 DomesticPipeTLeft = 661 DomesticPipeTRight = 663 DomesticPipeTTop = 662 DomesticPipeTopLeft = 654 DomesticPipeTopRight = 655 DomesticTelevisionBlack = 672 DomesticTelevisionBlue = 673 DomesticTelevisionGray = 674 DomesticTelevisionYellow = 675 DomesticTile = 640 DomesticVaseBlue = 668 DomesticVaseOrange = 670 DomesticVasePurple = 669 DomesticVaseYellow = 671 DomesticWallpaperBlueBg = 646 DomesticWallpaperBrownBg = 644 DomesticWallpaperGreenBg = 647 DomesticWallpaperRedBg = 645 DomesticWallpaperYellowBg = 643 DomesticWindowBlack = 676 DomesticWindowBlue = 677 DomesticWindowOrange = 678 DomesticWindowYellow = 679 DomesticWood = 641 DomesticWoodPanel = 642 DungeonChainHook = 1100 DungeonChainLock = 1101 DungeonChainRing = 1099 DungeonCobblestoneBlue = 1068 DungeonCobblestoneBlueBg = 1072 DungeonCobblestoneGreen = 1067 DungeonCobblestoneGreenBg = 1071 DungeonCobblestoneGrey = 1066 DungeonCobblestoneGreyBg = 1070 DungeonCobblestonePurple = 1069 DungeonCobblestonePurpleBg = 1073 DungeonOnewayPillarTopBlue = 1085 DungeonOnewayPillarTopGray = 1083 DungeonOnewayPillarTopGreen = 1084 DungeonOnewayPillarTopPurple = 1082 DungeonPillarArcRightBlue = 1093 DungeonPillarArcRightGray = 1091 DungeonPillarArcRightGreen = 1092 DungeonPillarArcRightPurple = 1090 DungeonPillarBottomBlue = 1077 DungeonPillarBottomGray = 1075 DungeonPillarBottomGreen = 1076 DungeonPillarBottomPurple = 1074 DungeonPillarMiddleBlue = 1081 DungeonPillarMiddleGray = 1079 DungeonPillarMiddleGreen = 1080 DungeonPillarMiddlePurple = 1078 DungeonSteelArcLeftBlue = 1089 DungeonSteelArcLeftGray = 1087 DungeonSteelArcLeftGreen = 1088 DungeonSteelArcLeftPurple = 1086 DungeonTorchBlue = 1096 DungeonTorchGreen = 1097 DungeonTorchPurple = 1094 DungeonTorchYellow = 1095 DungeonWindow = 1098 EasterEggBlue = 279 EasterEggGreen = 283 EasterEggPink = 280 EasterEggRed = 282 EasterEggYellow = 281 EffectsCurse = 49 EffectsFly = 46 EffectsGravityDown = 56 EffectsGravityLeft = 53 EffectsGravityOff = 57 EffectsGravityRight = 55 EffectsGravityUp = 54 EffectsGravityforce = 51 EffectsInvulnerability = 48 EffectsJumpHeight = 45 EffectsMultiJump = 52 EffectsOff = 58 EffectsSpeed = 47 EffectsZombie = 50 EffectsZombieDoor = 59 EffectsZombieGate = 60 Empty = 0 EnvironmentBamboo = 336 EnvironmentBambooBg = 341 EnvironmentGrass = 335 EnvironmentGrassBg = 340 EnvironmentLava = 338 EnvironmentLavaBg = 343 EnvironmentLog = 334 EnvironmentLogBg = 339 EnvironmentObsidian = 337 EnvironmentObsidianBg = 342 FactoryCrateMetal = 266 FactoryCrateWood = 267 FactoryScales = 270 FactoryStone = 268 FactoryWood = 269 FairytaleCloudBlue = 982 FairytaleDewDrop = 987 FairytaleFlowerBlue = 1009 FairytaleFlowerOrange = 1010 FairytaleFlowerPink = 1008 FairytaleHalfBlueBottom = 1003 FairytaleHalfBlueLeft = 1000 FairytaleHalfBlueRight = 1002 FairytaleHalfBlueTop = 1001 FairytaleHalfGreenBottom = 999 FairytaleHalfGreenLeft = 996 FairytaleHalfGreenRight = 998 FairytaleHalfGreenTop = 997 FairytaleHalfOrangeBottom = 995 FairytaleHalfOrangeLeft = 992 FairytaleHalfOrangeRight = 994 FairytaleHalfOrangeTop = 993 FairytaleHalfPinkBottom = 1007 FairytaleHalfPinkLeft = 1004 FairytaleHalfPinkRight = 1006 FairytaleHalfPinkTop = 1005 FairytaleMistBlueBg = 990 FairytaleMistGreenBg = 989 FairytaleMistOrangeBg = 988 FairytaleMistPinkBg = 991 FairytaleMossGreen = 981 FairytaleMushroomBlockRed = 983 FairytaleMushroomDecorationOrange = 985 FairytaleMushroomDecorationRed = 986 FairytalePebbles = 979 FairytaleTreeOrange = 980 FairytaleVineGreen = 984 FallAcorn = 1190 FallGrassLeft = 1187 FallGrassMiddle = 1188 FallGrassRight = 1189 FallLeavesDriftBottomLeft = 1183 FallLeavesDriftBottomRight = 1186 FallLeavesDriftTopLeft = 1184 FallLeavesDriftTopRight = 1185 FallLeavesOrangeBg = 1193 FallLeavesRedBg = 1194 FallLeavesYellowBg = 1192 FallPumpkin = 1191 FarmCorn = 404 FarmFenceLeft = 405 FarmFenceMiddle = 406 FarmFenceRight = 407 FarmHay = 408 FarmWheat = 403 GardenButterfly = 635 GardenFence = 629 GardenFrame = 639 GardenGrass = 626 GardenGrassBg = 637 GardenGrassplant = 628 GardenLattice = 630 GardenLeaves = 627 GardenLeavesBg = 638 GardenOnewayLeafBranch = 631 GardenOnewayLeafLeft = 632 GardenOnewayLeafRight = 633 GardenRock = 625 GardenRockBg = 636 GardenSnail = 634 GemstoneBlack = 384 GemstoneBlue = 380 GemstoneCyan = 382 GemstoneGreen = 377 GemstonePurple = 378 GemstoneRed = 381 GemstoneWhite = 383 GemstoneYellow = 379 GenericBlack = 245 GenericBlackTransparent = 246 GenericStripedHazardBlack = 242 GenericStripedHazardYellow = 241 GenericYellow = 244 GenericYellowFace = 243 GlassBlue = 255 GlassCyan = 254 GlassGreen = 253 GlassMagenta = 257 GlassOrange = 251 GlassPurple = 256 GlassRed = 250 GlassYellow = 252 GoldBasic = 846 GoldBasicBg = 851 GoldBrick = 847 GoldBrickBg = 852 GoldChisled = 848 GoldChisledBg = 853 GoldMantleOnewayTop = 850 GoldTile = 849 GrassBrickLeft = 236 GrassBrickMiddle = 235 GrassBrickRight = 237 GravityDot = 5 GravityDown = 4 GravityLeft = 1 GravityRight = 3 GravitySlowDot = 6 GravityUp = 2 HalfblocksBlackBottom = 908 HalfblocksBlackLeft = 905 HalfblocksBlackRight = 907 HalfblocksBlackTop = 906 HalfblocksBlueBottom = 932 HalfblocksBlueLeft = 929 HalfblocksBlueRight = 931 HalfblocksBlueTop = 930 HalfblocksCyanBottom = 928 HalfblocksCyanLeft = 925 HalfblocksCyanRight = 927 HalfblocksCyanTop = 926 HalfblocksGrayBottom = 904 HalfblocksGrayLeft = 901 HalfblocksGrayRight = 903 HalfblocksGrayTop = 902 HalfblocksGreenBottom = 924 HalfblocksGreenLeft = 921 HalfblocksGreenRight = 923 HalfblocksGreenTop = 922 HalfblocksMagentaBottom = 936 HalfblocksMagentaLeft = 933 HalfblocksMagentaRight = 935 HalfblocksMagentaTop = 934 HalfblocksOrangeBottom = 916 HalfblocksOrangeLeft = 913 HalfblocksOrangeRight = 915 HalfblocksOrangeTop = 914 HalfblocksRedBottom = 912 HalfblocksRedLeft = 909 HalfblocksRedRight = 911 HalfblocksRedTop = 910 HalfblocksWhiteBottom = 900 HalfblocksWhiteLeft = 897 HalfblocksWhiteRight = 899 HalfblocksWhiteTop = 898 HalfblocksYellowBottom = 920 HalfblocksYellowLeft = 917 HalfblocksYellowRight = 919 HalfblocksYellowTop = 918 HalloweenBlood = 420 HalloweenBrickGray = 421 HalloweenBrickGrayBg = 423 HalloweenBrickGrayLeftBg = 425 HalloweenBrickGrayRightBg = 424 HalloweenCobwebBottomLeft = 429 HalloweenCobwebBottomRight = 432 HalloweenCobwebTopLeft = 430 HalloweenCobwebTopRight = 431 HalloweenEyesGreen = 443 HalloweenEyesOrange = 441 HalloweenEyesPurple = 442 HalloweenEyesYellow = 440 HalloweenGrassPurple = 439 HalloweenGrayBg = 422 HalloweenLeavesPurpleBg = 427 HalloweenPumpkinOff = 438 HalloweenPumpkinOn = 437 HalloweenTombstone = 428 HalloweenTreeBg = 426 HalloweenTreeBranchBottomLeft = 433 HalloweenTreeBranchBottomRight = 436 HalloweenTreeBranchTopLeft = 434 HalloweenTreeBranchTopRight = 435 HauntedBushDead = 1142 HauntedFenceIron = 1143 HauntedLanternOff = 1148 HauntedLanternOn = 1149 HauntedMossyBrickGreen = 1138 HauntedMossyBrickGreenBg = 1150 HauntedMossyShinglesGray = 1140 HauntedMossyShinglesGrayBg = 1152 HauntedOnewayStoneGrayTop = 1141 HauntedSidingGray = 1139 HauntedSlidingGrayBg = 1151 HauntedWindowCircleOff = 1146 HauntedWindowCircleOn = 1147 HauntedWindowCurvedOff = 1144 HauntedWindowCurvedOn = 1145 HazardDeathDoor = 114 HazardDeathGate = 115 HazardFire = 113 HazardSpikesCenter = 112 IndustrialCautionSignDeath = 530 IndustrialCautionSignElectricity = 531 IndustrialCautionSignEntry = 532 IndustrialCautionSignFire = 529 IndustrialCautionTapeHorizontal = 533 IndustrialCautionTapeVertical = 534 IndustrialConveyorLeft = 525 IndustrialConveyorMiddle = 527 IndustrialConveyorMiddlePeg = 526 IndustrialConveyorRight = 528 IndustrialElectricity = 541 IndustrialIron = 507 IndustrialLampOverhead = 537 IndustrialOnewayGrayTop = 514 IndustrialPipeDecorationHorizontal = 535 IndustrialPipeDecorationVertical = 536 IndustrialPipeThickHorizontal = 521 IndustrialPipeThickVertical = 522 IndustrialPipeThinHorizontal = 523 IndustrialPipeThinVertical = 524 IndustrialPistonBottom = 520 IndustrialPistonLeft = 517 IndustrialPistonRight = 519 IndustrialPistonTop = 518 IndustrialPlateGrayBlueBg = 511 IndustrialPlateGrayGrayBg = 510 IndustrialPlateGrayGreenBg = 512 IndustrialPlateGrayPlainBg = 509 IndustrialPlateGrayYellowBg = 513 IndustrialScaffoldingHorizontal = 515 IndustrialScaffoldingVertical = 516 IndustrialTeslaCoil = 538 IndustrialWireHorizontal = 539 IndustrialWireVertical = 540 IndustrialWires = 508 InvisibleGravityDot = 11 InvisibleGravityDown = 10 InvisibleGravityLeft = 7 InvisibleGravityRight = 9 InvisibleGravitySlowDot = 12 InvisibleGravityUp = 8 JungleBlue = 321 JungleBlueBg = 329 JungleFaceBlock = 317 JungleGray = 319 JungleGrayBg = 327 JungleLeavesDarkBg = 333 JungleLeavesLightBg = 331 JungleLeavesMediumBg = 332 JungleOlive = 322 JungleOliveBg = 330 JungleOnewayTop = 318 JunglePlant = 324 JunglePot = 323 JunglePotBroken = 325 JungleRed = 320 JungleRedBg = 328 JungleStatue = 326 KeyBlue = 85 KeyBlueDoor = 91 KeyBlueGate = 97 KeyCyan = 86 KeyCyanDoor = 92 KeyCyanGate = 98 KeyGreen = 84 KeyGreenDoor = 90 KeyGreenGate = 96 KeyMagenta = 87 KeyMagentaDoor = 93 KeyMagentaGate = 99 KeyRed = 83 KeyRedDoor = 89 KeyRedGate = 95 KeyYellow = 88 KeyYellowDoor = 94 KeyYellowGate = 100 LavaDarkOrange = 842 LavaDarkRedBg = 845 LavaOrange = 841 LavaOrangeBg = 844 LavaYellow = 840 LavaYellowBg = 843 LeprechaunGoldBag = 1217 LeprechaunGoldPot = 1216 LeprechaunHorseShoe = 1218 LeprechaunRainbowLeft = 1219 LeprechaunRainbowRight = 1220 LeprechaunShamrock = 1215 LiquidLava = 79 LiquidLavaSurface = 80 LiquidMud = 81 LiquidMudSurface = 82 LiquidWaste = 77 LiquidWasteSurface = 78 LiquidWater = 75 LiquidWaterSurface = 76 MarbleColumnBottom = 446 MarbleColumnMiddle = 445 MarbleColumnTop = 444 MarbleGray = 447 MarbleGrayBg = 451 MarbleGreen = 448 MarbleGreenBg = 452 MarbleOneway = 450 MarbleRed = 449 MarbleRedBg = 453 MeadowBushLeft = 274 MeadowBushMiddle = 275 MeadowBushRight = 276 MeadowGrassLeft = 271 MeadowGrassMiddle = 272 MeadowGrassRight = 273 MeadowSmallBush = 278 MeadowYellowFlower = 277 MedievalAnvil = 559 MedievalAxeBottomLeft = 568 MedievalAxeBottomRight = 571 MedievalAxeTopLeft = 569 MedievalAxeTopRight = 570 MedievalBannerBlue = 585 MedievalBannerGreen = 586 MedievalBannerRed = 584 MedievalBannerYellow = 587 MedievalBarrel = 560 MedievalBlinds = 561 MedievalBrick = 548 MedievalBrickBg = 550 MedievalBrickDecorationTopMiddle = 557 MedievalBrickWindow = 549 MedievalOnewayGrayTop = 547 MedievalRoofBrownBg = 555 MedievalRoofGrayBg = 556 MedievalRoofGreenBg = 554 MedievalRoofRedBg = 553 MedievalScaffoldingAngledLeft = 565 MedievalScaffoldingAngledMiddle = 566 MedievalScaffoldingAngledRight = 567 MedievalScaffoldingStraightHorizontal = 562 MedievalScaffoldingStraightT = 563 MedievalScaffoldingStraightVertical = 564 MedievalShield = 588 MedievalShieldCircleBlue = 577 MedievalShieldCircleGreen = 578 MedievalShieldCircleRed = 576 MedievalShieldCircleYellow = 579 MedievalShieldCurvedBlue = 581 MedievalShieldCurvedGreen = 582 MedievalShieldCurvedRed = 580 MedievalShieldCurvedYellow = 583 MedievalStone = 558 MedievalStrawBg = 552 MedievalSwordBottomLeft = 574 MedievalSwordBottomRight = 573 MedievalSwordTopLeft = 575 MedievalSwordTopRight = 572 MedievalWoodBg = 551 MetalCopper = 239 MetalGold = 240 MetalSilver = 238 MineCrystalBlue = 1136 MineCrystalCyan = 1135 MineCrystalGreen = 1134 MineCrystalPurple = 1131 MineCrystalRed = 1132 MineCrystalYellow = 1133 MineStalagmite = 1129 MineStalagtite = 1130 MineStoneBrown = 1127 MineStoneBrownBg = 1128 MineTorch = 1137 MineralsBlue = 263 MineralsCyan = 262 MineralsGreen = 261 MineralsMagenta = 265 MineralsOrange = 259 MineralsPurple = 264 MineralsRed = 258 MineralsYellow = 260 MonsterEyeBlue = 1177 MonsterEyePurple = 1175 MonsterEyeYellow = 1176 MonsterScalesPurpleDarkBg = 1162 MonsterScalesPurpleLightBg = 1161 MonsterScalesRedDarkBg = 1160 MonsterScalesRedLightBg = 1159 MonsterSkinGreenDarkBg = 1158 MonsterSkinGreenLightBg = 1157 MonsterTeethLargeBottom = 1166 MonsterTeethLargeLeft = 1163 MonsterTeethLargeRight = 1165 MonsterTeethLargeTop = 1164 MonsterTeethMediumBottom = 1170 MonsterTeethMediumLeft = 1167 MonsterTeethMediumRight = 1169 MonsterTeethMediumTop = 1168 MonsterTeethSmallBottom = 1174 MonsterTeethSmallLeft = 1171 MonsterTeethSmallRight = 1173 MonsterTeethSmallTop = 1172 NeonBlueBg = 488 NeonCyanBg = 487 NeonGreenBg = 486 NeonMagentaBg = 483 NeonOrangeBg = 484 NeonYellowBg = 485 NewyearsBalloonBlue = 1209 NewyearsBalloonGreen = 1205 NewyearsBalloonOrange = 1206 NewyearsBalloonPurple = 1208 NewyearsBalloonRed = 1207 NewyearsChampagne = 1204 NewyearsHungLightBlue = 1200 NewyearsHungLightGreen = 1202 NewyearsHungLightPink = 1198 NewyearsHungLightRed = 1201 NewyearsHungLightYellow = 1199 NewyearsStreamerBlue = 1214 NewyearsStreamerGreen = 1210 NewyearsStreamerOrange = 1211 NewyearsStreamerPurple = 1213 NewyearsStreamerRed = 1212 NewyearsWine = 1203 NormalBlackBg = 189 NormalBlueBg = 195 NormalCyanBg = 194 NormalGrayBg = 188 NormalGreenBg = 193 NormalMagentaBg = 196 NormalOrangeBg = 191 NormalRedBg = 190 NormalWhiteBg = 187 NormalYellowBg = 192 OnewayBlackBottom = 1037 OnewayBlackLeft = 1034 OnewayBlackRight = 1036 OnewayBlackTop = 1035 OnewayBlueBottom = 1061 OnewayBlueLeft = 1058 OnewayBlueRight = 1060 OnewayBlueTop = 1059 OnewayCyanBottom = 1057 OnewayCyanLeft = 1054 OnewayCyanRight = 1056 OnewayCyanTop = 1055 OnewayGrayBottom = 1033 OnewayGrayLeft = 1030 OnewayGrayRight = 1032 OnewayGrayTop = 1031 OnewayGreenBottom = 1053 OnewayGreenLeft = 1050 OnewayGreenRight = 1052 OnewayGreenTop = 1051 OnewayMagentaBottom = 1065 OnewayMagentaLeft = 1062 OnewayMagentaRight = 1064 OnewayMagentaTop = 1063 OnewayOrangeBottom = 1045 OnewayOrangeLeft = 1042 OnewayOrangeRight = 1044 OnewayOrangeTop = 1043 OnewayRedBottom = 1041 OnewayRedLeft = 1038 OnewayRedRight = 1040 OnewayRedTop = 1039 OnewayWhiteBottom = 1029 OnewayWhiteLeft = 1026 OnewayWhiteRight = 1028 OnewayWhiteTop = 1027 OnewayYellowBottom = 1049 OnewayYellowLeft = 1046 OnewayYellowRight = 1048 OnewayYellowTop = 1047 OuterspaceBlue = 596 OuterspaceBlueBg = 607 OuterspaceComputer = 620 OuterspaceGreen = 597 OuterspaceGreenBg = 608 OuterspaceLightBlue = 615 OuterspaceLightCyan = 619 OuterspaceLightGreen = 616 OuterspaceLightMagenta = 618 OuterspaceLightRed = 614 OuterspaceLightYellow = 617 OuterspaceMarsRock1 = 601 OuterspaceMarsRock2 = 602 OuterspaceMarsRock3 = 603 OuterspaceMarsRock3Bg = 610 OuterspaceMarsRock4 = 604 OuterspaceMarsRock4Bg = 611 OuterspaceMarsRock5 = 605 OuterspaceMarsRock5Bg = 612 OuterspaceMoon = 600 OuterspaceRed = 598 OuterspaceRedBg = 609 OuterspaceRockGray = 624 OuterspaceSand = 599 OuterspaceSign = 613 OuterspaceStarBlue = 622 OuterspaceStarRed = 621 OuterspaceStarYellow = 623 OuterspaceWhite = 595 OuterspaceWhiteBg = 606 PastelBlueBg = 233 PastelCyanBg = 232 PastelGreenBg = 231 PastelLimeBg = 230 PastelOrangeBg = 228 PastelPurpleBg = 234 PastelRedBg = 227 PastelYellowBg = 229 PipesDown = 592 PipesHorizontal = 593 PipesLeft = 589 PipesRight = 591 PipesUp = 590 PipesVertical = 594 PirateCannon = 826 PirateChestBrown = 822 PirateOnewayBrownTop = 823 PiratePortWindow = 827 PirateShipBorderBrown = 824 PirateSkeletonFlagBg = 831 PirateSkeletonHead = 825 PirateWoodPlankBrown = 821 PirateWoodPlankBrownBg = 828 PirateWoodPlankDarkBrownBg = 830 PirateWoodPlankLightBrownBg = 829 PlasticBlue = 838 PlasticCyan = 837 PlasticGreen = 836 PlasticLime = 835 PlasticMagenta = 839 PlasticOrange = 833 PlasticRed = 832 PlasticYellow = 834 Portal = 72 PortalInvisible = 73 PortalWorld = 74 PrisonBars = 815 PrisonBrick = 816 PrisonBrickBg = 817 PrisonWindowBlackBg = 820 PrisonWindowBlueBg = 819 PrisonWindowOrangeBg = 818 RestaurantBowlEmpty = 1236 RestaurantBowlIcecream = 1235 RestaurantBowlSalad = 1238 RestaurantBowlSpaghetti = 1237 RestaurantFoodBurger = 1221 RestaurantFoodFries = 1225 RestaurantFoodHotdog = 1222 RestaurantFoodSoda = 1224 RestaurantFoodSub = 1223 RestaurantGlassEmpty = 1227 RestaurantGlassMilk = 1229 RestaurantGlassOrangejuice = 1226 RestaurantGlassWater = 1228 RestaurantPlateChicken = 1232 RestaurantPlateCookies = 1230 RestaurantPlateEmpty = 1231 RestaurantPlateFish = 1234 RestaurantPlateHam = 1233 RetailAwningBlue = 1113 RetailAwningCyan = 1112 RetailAwningGreen = 1111 RetailAwningPurple = 1108 RetailAwningRed = 1109 RetailAwningYellow = 1110 RetailFlagBlue = 1107 RetailFlagCyan = 1106 RetailFlagGreen = 1105 RetailFlagPurple = 1102 RetailFlagRed = 1103 RetailFlagYellow = 1104 SandBrownDark = 395 SandBrownDarkBg = 402 SandBrownDarkSurface = 396 SandBrownLight = 393 SandBrownLightBg = 401 SandBrownLightSurface = 394 SandGray = 387 SandGrayBg = 398 SandGraySurface = 388 SandOrange = 391 SandOrangeBg = 400 SandOrangeSurface = 392 SandWhite = 385 SandWhiteSurface = 386 SandYellow = 389 SandYellowDarkBg = 399 SandYellowLightBg = 397 SandYellowSurface = 390 ScifiBrownLeopard = 783 ScifiLaserBlueCornerBottomleft = 795 ScifiLaserBlueCornerBottomright = 794 ScifiLaserBlueCornerTopleft = 793 ScifiLaserBlueCornerTopright = 792 ScifiLaserBlueStraightHorizontal = 790 ScifiLaserBlueStraightVertical = 791 ScifiLaserGreenCornerBottomleft = 801 ScifiLaserGreenCornerBottomright = 800 ScifiLaserGreenCornerTopleft = 799 ScifiLaserGreenCornerTopright = 798 ScifiLaserGreenStraightHorizontal = 796 ScifiLaserGreenStraightVertical = 797 ScifiLaserOrangeCornerBottomleft = 807 ScifiLaserOrangeCornerBottomright = 806 ScifiLaserOrangeCornerTopleft = 805 ScifiLaserOrangeCornerTopright = 804 ScifiLaserOrangeStraightHorizontal = 802 ScifiLaserOrangeStraightVeritical = 803 ScifiLaserRedCornerBottomleft = 813 ScifiLaserRedCornerBottomright = 812 ScifiLaserRedCornerTopleft = 811 ScifiLaserRedCornerTopright = 810 ScifiLaserRedStraightHorizontal = 808 ScifiLaserRedStraightVertical = 809 ScifiMetalGray = 781 ScifiMetalWhite = 782 ScifiOnewayBlueTop = 785 ScifiOnewayCyanTop = 789 ScifiOnewayGreenTop = 786 ScifiOnewayMagentaTop = 788 ScifiOnewayRedTop = 784 ScifiOnewayYellowTop = 787 ScifiOutlineGrayBg = 814 ScifiPanelBlue = 776 ScifiPanelCyan = 780 ScifiPanelGreen = 777 ScifiPanelMagenta = 779 ScifiPanelRed = 775 ScifiPanelYellow = 778 SecretAppear = 247 SecretDisappear = 248 SecretInvisible = 249 SignBlue = 70 SignGold = 71 SignGreen = 69 SignNormal = 67 SignRed = 68 SpecialCake = 32 SpecialDiamond = 31 SpecialHologram = 30 Spikes = 111 SpringDaffodilOrange = 1023 SpringDaffodilWhite = 1025 SpringDaffodilYellow = 1024 SpringDaisyBlue = 1019 SpringDaisyPink = 1017 SpringDaisyWhite = 1018 SpringDirtBrown = 1011 SpringDirtDriftBottomLeft = 1013 SpringDirtDriftBottomRight = 1016 SpringDirtDriftTopLeft = 1014 SpringDirtDriftTopRight = 1015 SpringHedgeGreen = 1012 SpringTulipPink = 1020 SpringTulipRed = 1021 SpringTulipYellow = 1022 StoneBlue = 368 StoneBlueBg = 375 StoneBrown = 367 StoneBrownBg = 373 StoneGray = 365 StoneGrayBg = 369 StoneGreen = 366 StoneGreenBg = 371 StoneHalfBlueBg = 376 StoneHalfBrownBg = 374 StoneHalfGrayBg = 370 StoneHalfGreenBg = 372 SummerBeach = 308 SummerDrink = 311 SummerIceCreamChocolate = 1125 SummerIceCreamMint = 1123 SummerIceCreamSrawberry = 1126 SummerIceCreamVanilla = 1124 SummerOnewayDockTop = 1118 SummerPail = 309 SummerPlankGreen = 1117 SummerPlankGreenBg = 1122 SummerPlankPurple = 1115 SummerPlankPurpleBg = 1120 SummerPlankYelllow = 1116 SummerPlankYellowBg = 1121 SummerShovel = 310 SummerStraw = 1114 SummerStrawBg = 1119 SwampGrass = 1178 SwampGrassBg = 1182 SwampLog = 1179 SwampMudBg = 1181 SwampSignToxic = 1180 SwitchGlobalActivator = 107 SwitchGlobalDoor = 109 SwitchGlobalGate = 110 SwitchGlobalResetter = 108 SwitchGlobalToggle = 106 SwitchLocalActivator = 102 SwitchLocalDoor = 104 SwitchLocalGate = 105 SwitchLocalResetter = 103 SwitchLocalToggle = 101 TeamBlueDoor = 125 TeamBlueGate = 132 TeamCyanDoor = 127 TeamCyanGate = 134 TeamEffectBlue = 118 TeamEffectCyan = 120 TeamEffectGreen = 119 TeamEffectMagenta = 121 TeamEffectNone = 116 TeamEffectRed = 117 TeamEffectYellow = 122 TeamGreenDoor = 126 TeamGreenGate = 133 TeamMagentaDoor = 128 TeamMagentaGate = 135 TeamNoneDoor = 123 TeamNoneGate = 130 TeamRedDoor = 124 TeamRedGate = 131 TeamYellowDoor = 129 TeamYellowGate = 136 TextileClothBlueBg = 1254 TextileClothGreenBg = 1253 TextileClothPinkBg = 1255 TextileClothRedBg = 1257 TextileClothYellowBg = 1256 TilesBlack = 879 TilesBlackBg = 889 TilesBlue = 885 TilesBlueBg = 895 TilesCyan = 884 TilesCyanBg = 894 TilesGray = 878 TilesGrayBg = 888 TilesGreen = 883 TilesGreenBg = 893 TilesOrange = 881 TilesOrangeBg = 891 TilesPurple = 886 TilesPurpleBg = 896 TilesRed = 880 TilesRedBg = 890 TilesWhite = 877 TilesWhiteBg = 887 TilesYellow = 882 TilesYellowBg = 892 ToolActivateMinimap = 66 ToolCheckpoint = 62 ToolGodModeActivator = 64 ToolPortalWorldSpawn = 65 ToolReset = 63 ToolSpawnLobby = 61 ToxicLadderVerticalBroken = 1251 ToxicOnewayRustedBottom = 1242 ToxicOnewayRustedLeft = 1239 ToxicOnewayRustedRight = 1241 ToxicOnewayRustedTop = 1240 ToxicRailRusted = 1252 ToxicSewerDrainEmpty = 1247 ToxicSewerDrainLava = 1249 ToxicSewerDrainMud = 1250 ToxicSewerDrainWaste = 1246 ToxicSewerDrainWater = 1248 ToxicWasteBarrelOff = 1245 ToxicWasteBarrelOn = 1244 ToxicWasteBg = 1243 UnderwaterBg = 1266 UnderwaterFishBg = 1268 UnderwaterOctopusBg = 1267 UnderwaterSeahorseBg = 1269 UnderwaterSeaweedBg = 1270 ValentinesHeartPink = 1197 ValentinesHeartPurple = 1196 ValentinesHeartRed = 1195 WildwestDoorLeftBlue = 472 WildwestDoorLeftBrown = 470 WildwestDoorLeftRed = 471 WildwestDoorRightBlue = 475 WildwestDoorRightBrown = 473 WildwestDoorRightRed = 474 WildwestFenceBlueDark = 482 WildwestFenceBlueLight = 481 WildwestFenceBrownDark = 478 WildwestFenceBrownLight = 477 WildwestFenceRedDark = 480 WildwestFenceRedLight = 479 WildwestOnewayBlueDarkTop = 459 WildwestOnewayBlueTop = 458 WildwestOnewayBrownDarkTop = 455 WildwestOnewayBrownTop = 454 WildwestOnewayRedDarkTop = 457 WildwestOnewayRedTop = 456 WildwestPoleGrayHorizontal = 468 WildwestPoleGrayVertical = 469 WildwestPoleWhiteHorizontal = 466 WildwestPoleWhiteVertical = 467 WildwestSidingBlueDarkBg = 465 WildwestSidingBlueLightBg = 464 WildwestSidingBrownDarkBg = 461 WildwestSidingBrownLightBg = 460 WildwestSidingRedDarkBg = 463 WildwestSidingRedLightBg = 462 WildwestWindow = 476 WindowBlue = 347 WindowClear = 344 WindowGreen = 345 WindowOrange = 351 WindowPink = 349 WindowPurple = 348 WindowRed = 350 WindowTeal = 346 WindowYellow = 352 WinterGlacier = 939 WinterGlacierBg = 977 WinterHalfIceBottom = 955 WinterHalfIceLeft = 952 WinterHalfIceRight = 954 WinterHalfIceTop = 953 WinterHalfSnowBottom = 951 WinterHalfSnowLeft = 948 WinterHalfSnowRight = 950 WinterHalfSnowTop = 949 WinterIce = 941 WinterIceBrick = 937 WinterIceBrickBg = 975 WinterIceDark = 944 WinterIceDarkBg = 973 WinterIceDarkLeft = 945 WinterIceDarkMiddle = 946 WinterIceDarkRight = 947 WinterIceDriftBottomLeft = 958 WinterIceDriftBottomRight = 961 WinterIceDriftTopLeft = 959 WinterIceDriftTopRight = 960 WinterIceLight = 943 WinterIceLightBg = 974 WinterIceSlippery = 956 WinterOnewayIce = 942 WinterSlate = 940 WinterSlateBg = 978 WinterSnow = 938 WinterSnowBg = 976 WinterSnowDriftBottomLeft = 962 WinterSnowDriftBottomRight = 965 WinterSnowDriftTopLeft = 963 WinterSnowDriftTopRight = 964 WinterSnowFluffLeft = 966 WinterSnowFluffMiddle = 967 WinterSnowFluffRight = 968 WinterSnowPile = 957 WinterSnowflakeLarge = 971 WinterSnowflakeSmall = 972 WinterSnowman = 969 WinterTree = 970"
  },
  "api/PixelPilot.PixelGameClient.World.Constants.PixelBlockExtensions.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Constants.PixelBlockExtensions.html",
    "title": "Class PixelBlockExtensions | PixelPilot",
    "keywords": "Class PixelBlockExtensions Namespace PixelPilot.PixelGameClient.World.Constants Assembly PixelPilot.Core.dll public static class PixelBlockExtensions Inheritance object PixelBlockExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBlockType(PixelBlock) public static BlockType GetBlockType(this PixelBlock pixelBlock) Parameters pixelBlock PixelBlock Returns BlockType GetPacketFieldTypes(BlockType) public static PacketFieldType[] GetPacketFieldTypes(this BlockType blockType) Parameters blockType BlockType Returns PacketFieldType[]"
  },
  "api/PixelPilot.PixelGameClient.World.Constants.WorldLayer.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Constants.WorldLayer.html",
    "title": "Enum WorldLayer | PixelPilot",
    "keywords": "Enum WorldLayer Namespace PixelPilot.PixelGameClient.World.Constants Assembly PixelPilot.Core.dll All available world layers. public enum WorldLayer Fields Background = 0 Foreground = 1"
  },
  "api/PixelPilot.PixelGameClient.World.Constants.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Constants.html",
    "title": "Namespace PixelPilot.PixelGameClient.World.Constants | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.World.Constants Classes PixelBlockExtensions Enums BlockType General category for block types. PixelBlock All blocks available in the game as of 29-04-2024. WorldLayer All available world layers."
  },
  "api/PixelPilot.PixelGameClient.World.PixelWorld.BlockPlaced.html": {
    "href": "api/PixelPilot.PixelGameClient.World.PixelWorld.BlockPlaced.html",
    "title": "Delegate PixelWorld.BlockPlaced | PixelPilot",
    "keywords": "Delegate PixelWorld.BlockPlaced Namespace PixelPilot.PixelGameClient.World Assembly PixelPilot.Core.dll Represents a delegate for the BlockPlaced event. public delegate void PixelWorld.BlockPlaced(object sender, int userId, IPlacedBlock oldBlock, IPlacedBlock newBlock) Parameters sender object The object that triggered the event. userId int The ID of the user who placed the block. oldBlock IPlacedBlock The previous state of the block. newBlock IPlacedBlock The new state of the block after being placed. Includes X, Y, Layer."
  },
  "api/PixelPilot.PixelGameClient.World.PixelWorld.WorldCleared.html": {
    "href": "api/PixelPilot.PixelGameClient.World.PixelWorld.WorldCleared.html",
    "title": "Delegate PixelWorld.WorldCleared | PixelPilot",
    "keywords": "Delegate PixelWorld.WorldCleared Namespace PixelPilot.PixelGameClient.World Assembly PixelPilot.Core.dll Represents a delegate for the WorldCleared event. public delegate void PixelWorld.WorldCleared(object sender) Parameters sender object The object that triggered the event."
  },
  "api/PixelPilot.PixelGameClient.World.PixelWorld.WorldInit.html": {
    "href": "api/PixelPilot.PixelGameClient.World.PixelWorld.WorldInit.html",
    "title": "Delegate PixelWorld.WorldInit | PixelPilot",
    "keywords": "Delegate PixelWorld.WorldInit Namespace PixelPilot.PixelGameClient.World Assembly PixelPilot.Core.dll Represents a delegate for the WorldInit event. public delegate void PixelWorld.WorldInit(object sender) Parameters sender object The object that triggered the event."
  },
  "api/PixelPilot.PixelGameClient.World.PixelWorld.WorldReloaded.html": {
    "href": "api/PixelPilot.PixelGameClient.World.PixelWorld.WorldReloaded.html",
    "title": "Delegate PixelWorld.WorldReloaded | PixelPilot",
    "keywords": "Delegate PixelWorld.WorldReloaded Namespace PixelPilot.PixelGameClient.World Assembly PixelPilot.Core.dll Represents a delegate for the WorldReloaded event. public delegate void PixelWorld.WorldReloaded(object sender) Parameters sender object The object that triggered the event."
  },
  "api/PixelPilot.PixelGameClient.World.PixelWorld.html": {
    "href": "api/PixelPilot.PixelGameClient.World.PixelWorld.html",
    "title": "Class PixelWorld | PixelPilot",
    "keywords": "Class PixelWorld Namespace PixelPilot.PixelGameClient.World Assembly PixelPilot.Core.dll Represents the 'world' in PixelWalker. The world includes blocks, switches and other things that can be placed or interacted with. This does not include players! public class PixelWorld Inheritance object PixelWorld Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods WorldExtensions.GetDifference(PixelWorld, Structure, int, int) WorldExtensions.GetStructure(PixelWorld, Point, Point, bool) WorldExtensions.GetStructure(PixelWorld, int, int, int, int, bool) Constructors PixelWorld() public PixelWorld() PixelWorld(InitPacket) public PixelWorld(InitPacket initPacket) Parameters initPacket InitPacket PixelWorld(int, int) public PixelWorld(int height, int width) Parameters height int width int Properties Height public int Height { get; } Property Value int InitTask A task that can be used to await world init completion. This ensures the world has been properly populated before using it. public Task InitTask { get; } Property Value Task OwnerUsername public string OwnerUsername { get; } Property Value string Width public int Width { get; } Property Value int WorldName public string WorldName { get; } Property Value string Methods BlockAt(WorldLayer, int, int) Gets the block at the specified point. public IPixelBlock BlockAt(WorldLayer layer, int x, int y) Parameters layer WorldLayer Layer x int X y int Y Returns IPixelBlock The block BlockAt(int, int, int) Gets the block at the specified point. public IPixelBlock BlockAt(int layer, int x, int y) Parameters layer int Layer x int X y int Y Returns IPixelBlock The block DeserializeBlock(WorldBlockPlacedPacket) Deserializes a WorldBlockPlacedPacket into an IPixelBlock object. This conversion loses information about where, or by who, a block was placed. public static IPixelBlock DeserializeBlock(WorldBlockPlacedPacket packet) Parameters packet WorldBlockPlacedPacket The WorldBlockPlacedPacket to deserialize. Returns IPixelBlock An IPlacedBlock object representing the deserialized packet but without location data. Exceptions NotImplementedException If the type has not been implemented yet. DeserializeBlock(BinaryReader) Desterialize a blok public static IPixelBlock DeserializeBlock(BinaryReader reader) Parameters reader BinaryReader Memory stream reader Returns IPixelBlock The block Exceptions ArgumentOutOfRangeException Only when implementation is missing DeserializeBlock(BinaryReader, PixelBlock) public static IPixelBlock DeserializeBlock(BinaryReader reader, PixelBlock block) Parameters reader BinaryReader block PixelBlock Returns IPixelBlock GetBlocks(bool) public IEnumerable<PlacedBlock> GetBlocks(bool includeEmpty = true) Parameters includeEmpty bool Returns IEnumerable<PlacedBlock> HandlePacket(object, IPixelGamePacket) Utility method that can attached to the client. This allows for an easy hook without having to write this each time. public void HandlePacket(object sender, IPixelGamePacket packet) Parameters sender object The sender packet IPixelGamePacket The incoming packet Init(byte[]) Initialize the world using a byte[]. public void Init(byte[] buffer) Parameters buffer byte[] Exceptions Exception Events OnBlockPlaced Fired once init has been received by the client. The public event PixelWorld.BlockPlaced? OnBlockPlaced Event Type PixelWorld.BlockPlaced OnWorldCleared Fired after the world is initialized. public event PixelWorld.WorldCleared? OnWorldCleared Event Type PixelWorld.WorldCleared OnWorldInit Fired after the world is initialized. public event PixelWorld.WorldInit? OnWorldInit Event Type PixelWorld.WorldInit OnWorldReloaded Fired after the world is reloaded public event PixelWorld.WorldReloaded? OnWorldReloaded Event Type PixelWorld.WorldReloaded"
  },
  "api/PixelPilot.PixelGameClient.World.html": {
    "href": "api/PixelPilot.PixelGameClient.World.html",
    "title": "Namespace PixelPilot.PixelGameClient.World | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.World Classes PixelWorld Represents the 'world' in PixelWalker. The world includes blocks, switches and other things that can be placed or interacted with. This does not include players! Delegates PixelWorld.BlockPlaced Represents a delegate for the BlockPlaced event. PixelWorld.WorldCleared Represents a delegate for the WorldCleared event. PixelWorld.WorldInit Represents a delegate for the WorldInit event. PixelWorld.WorldReloaded Represents a delegate for the WorldReloaded event."
  },
  "api/PixelPilot.PixelGameClient.html": {
    "href": "api/PixelPilot.PixelGameClient.html",
    "title": "Namespace PixelPilot.PixelGameClient | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient Classes PixelGameClientBuilder PixelGameException PixelPilotClient Client for interacting with the PixelWalker game server. Delegates PixelPilotClient.ClientConnected PixelPilotClient.ClientDisconnected PixelPilotClient.PacketReceived PixelPilotClient.PacketSend"
  },
  "api/PixelPilot.PixelHttpClient.PixelApiClient.html": {
    "href": "api/PixelPilot.PixelHttpClient.PixelApiClient.html",
    "title": "Class PixelApiClient | PixelPilot",
    "keywords": "Class PixelApiClient Namespace PixelPilot.PixelHttpClient Assembly PixelPilot.Core.dll Used to make HTTP API request instead of using the websocket. Required for obtaining information used to join a world. public class PixelApiClient : IDisposable Inheritance object PixelApiClient Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PixelApiClient(string) PixelApiClient that authenticates using a token. Does not verify validity. public PixelApiClient(string accountToken) Parameters accountToken string A valid account token PixelApiClient(string, string) PixelApiClient that authenticates using email and password. public PixelApiClient(string email, string password) Parameters email string User e-mail password string User password Exceptions PixelApiException When the login failed InvalidOperationException Something went very wrong Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() GetAuth(string, string) public Task<IAuthResponse> GetAuth(string email, string password) Parameters email string password string Returns Task<IAuthResponse> GetJoinKey(string, string) Request a join key for the given room from the API server. public Task<JoinKeyResponse?> GetJoinKey(string roomType, string roomId) Parameters roomType string The room type roomId string ID of the room Returns Task<JoinKeyResponse> GetMappings() Retrieves the mappings from the game API. public Task<MappingsResponse?> GetMappings() Returns Task<MappingsResponse> A MappingsResponse containing the mappings, or null if the mappings are not available. GetMinimap(WorldEntry) Get the raw bytes of the minimap. The format is PNG public Task<byte[]> GetMinimap(WorldEntry world) Parameters world WorldEntry Returns Task<byte[]> PNG Byte[] GetMinimap(string) Get the raw bytes of the minimap. The format is PNG. public Task<byte[]?> GetMinimap(string worldId) Parameters worldId string World ID Returns Task<byte[]> Byte[] or null if world could not be found. GetOwnedWorlds(int, int, QueryArgumentBuilder?) Fetches the worlds of the current authenticated player. public Task<CollectionResponse<WorldEntry>> GetOwnedWorlds(int page, int perPage, QueryArgumentBuilder? qb = null) Parameters page int Page to be fetched perPage int Entries per page qb QueryArgumentBuilder Query builder Returns Task<CollectionResponse<WorldEntry>> The page requested Exceptions PixelApiException When the rooms worlds could not be fetched GetPlayer(string) Asynchronously retrieves a player entry by username. public Task<PlayerEntry?> GetPlayer(string username) Parameters username string The username of the player to retrieve. Returns Task<PlayerEntry> A task representing the asynchronous operation, with a result of PlayerEntry containing the player entry, or null if no player with the specified username is found. GetPlayers(int, int, QueryArgumentBuilder?) Asynchronously retrieves a paginated collection of player entries with optional filters. public Task<CollectionResponse<PlayerEntry>> GetPlayers(int page, int perPage, QueryArgumentBuilder? qb = null) Parameters page int The page number to retrieve. Must be greater than 0. perPage int The number of player entries to retrieve per page. qb QueryArgumentBuilder Query builder Returns Task<CollectionResponse<PlayerEntry>> A task representing the asynchronous operation, with a result of CollectionResponse<T> containing the player entries. Exceptions PixelApiException Thrown when the page number is less than 1 or when an unknown error occurs during the fetch operation. GetPublicWorld(string) public Task<WorldEntry?> GetPublicWorld(string id) Parameters id string Returns Task<WorldEntry> GetPublicWorlds(int, int, QueryArgumentBuilder?) public Task<CollectionResponse<WorldEntry>> GetPublicWorlds(int page, int perPage, QueryArgumentBuilder? qb = null) Parameters page int perPage int qb QueryArgumentBuilder Returns Task<CollectionResponse<WorldEntry>> GetRoomTypes() Request the available room types from the game server. public Task<List<string>?> GetRoomTypes() Returns Task<List<string>> A list of room types GetVisibleWorlds() Fetch the visible worlds in the browser found in the lobby. public Task<PixelWalkerWorldsResponse> GetVisibleWorlds() Returns Task<PixelWalkerWorldsResponse> The visible rooms Exceptions PixelApiException When the worlds could not be fetched."
  },
  "api/PixelPilot.PixelHttpClient.PixelApiException.html": {
    "href": "api/PixelPilot.PixelHttpClient.PixelApiException.html",
    "title": "Class PixelApiException | PixelPilot",
    "keywords": "Class PixelApiException Namespace PixelPilot.PixelHttpClient Assembly PixelPilot.Core.dll public class PixelApiException : Exception, ISerializable Inheritance object Exception PixelApiException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PixelApiException(string) public PixelApiException(string msg) Parameters msg string"
  },
  "api/PixelPilot.PixelHttpClient.Responses.Auth.AuthErrorResponse.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.Auth.AuthErrorResponse.html",
    "title": "Class AuthErrorResponse | PixelPilot",
    "keywords": "Class AuthErrorResponse Namespace PixelPilot.PixelHttpClient.Responses.Auth Assembly PixelPilot.Core.dll public class AuthErrorResponse : IAuthResponse Inheritance object AuthErrorResponse Implements IAuthResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Code [JsonPropertyName(\"code\")] public int Code { get; set; } Property Value int Message [JsonPropertyName(\"message\")] public string Message { get; set; } Property Value string"
  },
  "api/PixelPilot.PixelHttpClient.Responses.Auth.AuthSuccessResponse.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.Auth.AuthSuccessResponse.html",
    "title": "Class AuthSuccessResponse | PixelPilot",
    "keywords": "Class AuthSuccessResponse Namespace PixelPilot.PixelHttpClient.Responses.Auth Assembly PixelPilot.Core.dll public class AuthSuccessResponse : IAuthResponse Inheritance object AuthSuccessResponse Implements IAuthResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data [JsonPropertyName(\"record\")] public PlayerData Data { get; set; } Property Value PlayerData Token [JsonPropertyName(\"token\")] public string Token { get; set; } Property Value string"
  },
  "api/PixelPilot.PixelHttpClient.Responses.Auth.IAuthResponse.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.Auth.IAuthResponse.html",
    "title": "Interface IAuthResponse | PixelPilot",
    "keywords": "Interface IAuthResponse Namespace PixelPilot.PixelHttpClient.Responses.Auth Assembly PixelPilot.Core.dll public interface IAuthResponse"
  },
  "api/PixelPilot.PixelHttpClient.Responses.Auth.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.Auth.html",
    "title": "Namespace PixelPilot.PixelHttpClient.Responses.Auth | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelHttpClient.Responses.Auth Classes AuthErrorResponse AuthSuccessResponse Interfaces IAuthResponse"
  },
  "api/PixelPilot.PixelHttpClient.Responses.CollectionResponse-1.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.CollectionResponse-1.html",
    "title": "Class CollectionResponse<T> | PixelPilot",
    "keywords": "Class CollectionResponse<T> Namespace PixelPilot.PixelHttpClient.Responses Assembly PixelPilot.Core.dll public class CollectionResponse<T> where T : ICollectionEntry Type Parameters T Inheritance object CollectionResponse<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Items public List<T> Items { get; set; } Property Value List<T> Page public int Page { get; set; } Property Value int PerPage public int PerPage { get; set; } Property Value int TotalItems public int TotalItems { get; set; } Property Value int TotalPages public int TotalPages { get; set; } Property Value int"
  },
  "api/PixelPilot.PixelHttpClient.Responses.Collections.ICollectionEntry.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.Collections.ICollectionEntry.html",
    "title": "Interface ICollectionEntry | PixelPilot",
    "keywords": "Interface ICollectionEntry Namespace PixelPilot.PixelHttpClient.Responses.Collections Assembly PixelPilot.Core.dll public interface ICollectionEntry Properties CollectionId string CollectionId { get; set; } Property Value string CollectionName string CollectionName { get; set; } Property Value string Created string Created { get; set; } Property Value string"
  },
  "api/PixelPilot.PixelHttpClient.Responses.Collections.PlayerEntry.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.Collections.PlayerEntry.html",
    "title": "Class PlayerEntry | PixelPilot",
    "keywords": "Class PlayerEntry Namespace PixelPilot.PixelHttpClient.Responses.Collections Assembly PixelPilot.Core.dll public class PlayerEntry : ICollectionEntry Inheritance object PlayerEntry Implements ICollectionEntry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Admin public bool Admin { get; set; } Property Value bool Banned public bool Banned { get; set; } Property Value bool CollectionId public string CollectionId { get; set; } Property Value string CollectionName public string CollectionName { get; set; } Property Value string Created public string Created { get; set; } Property Value string Face public int Face { get; set; } Property Value int Id public string Id { get; set; } Property Value string Username public string Username { get; set; } Property Value string"
  },
  "api/PixelPilot.PixelHttpClient.Responses.Collections.QueryArgumentBuilder.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.Collections.QueryArgumentBuilder.html",
    "title": "Class QueryArgumentBuilder | PixelPilot",
    "keywords": "Class QueryArgumentBuilder Namespace PixelPilot.PixelHttpClient.Responses.Collections Assembly PixelPilot.Core.dll Allows for building complex queries against some collections. public class QueryArgumentBuilder Inheritance object QueryArgumentBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryArgumentBuilder() public QueryArgumentBuilder() Methods AddFilter(string, dynamic) Add a filter for a specific field public QueryArgumentBuilder AddFilter(string key, dynamic value) Parameters key string Key of the field value dynamic Value of the field Returns QueryArgumentBuilder The builder Build() Convert the builder to a string represenation. public string Build() Returns string SortAscending() Sets sorting method to ascending. Note this is the default. public QueryArgumentBuilder SortAscending() Returns QueryArgumentBuilder The builder SortBy(string) Sort by a specific field public QueryArgumentBuilder SortBy(string key) Parameters key string Key of the field Returns QueryArgumentBuilder The builder SortDescending() Set sorting to descending. public QueryArgumentBuilder SortDescending() Returns QueryArgumentBuilder The builder"
  },
  "api/PixelPilot.PixelHttpClient.Responses.Collections.WorldEntry.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.Collections.WorldEntry.html",
    "title": "Class WorldEntry | PixelPilot",
    "keywords": "Class WorldEntry Namespace PixelPilot.PixelHttpClient.Responses.Collections Assembly PixelPilot.Core.dll public class WorldEntry : ICollectionEntry Inheritance object WorldEntry Implements ICollectionEntry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CollectionId public string CollectionId { get; set; } Property Value string CollectionName public string CollectionName { get; set; } Property Value string Created public string Created { get; set; } Property Value string Data public string Data { get; set; } Property Value string Height public int Height { get; set; } Property Value int Id public string Id { get; set; } Property Value string Minimap public string Minimap { get; set; } Property Value string Owner public string Owner { get; set; } Property Value string Plays public int Plays { get; set; } Property Value int Title public string Title { get; set; } Property Value string Updated public string Updated { get; set; } Property Value string Visibility public string Visibility { get; set; } Property Value string Width public int Width { get; set; } Property Value int"
  },
  "api/PixelPilot.PixelHttpClient.Responses.Collections.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.Collections.html",
    "title": "Namespace PixelPilot.PixelHttpClient.Responses.Collections | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelHttpClient.Responses.Collections Classes PlayerEntry QueryArgumentBuilder Allows for building complex queries against some collections. WorldEntry Interfaces ICollectionEntry"
  },
  "api/PixelPilot.PixelHttpClient.Responses.JoinKeyResponse.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.JoinKeyResponse.html",
    "title": "Class JoinKeyResponse | PixelPilot",
    "keywords": "Class JoinKeyResponse Namespace PixelPilot.PixelHttpClient.Responses Assembly PixelPilot.Core.dll public class JoinKeyResponse Inheritance object JoinKeyResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Token [JsonPropertyName(\"token\")] public string Token { get; set; } Property Value string"
  },
  "api/PixelPilot.PixelHttpClient.Responses.MappingsResponse.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.MappingsResponse.html",
    "title": "Class MappingsResponse | PixelPilot",
    "keywords": "Class MappingsResponse Namespace PixelPilot.PixelHttpClient.Responses Assembly PixelPilot.Core.dll public class MappingsResponse Inheritance object MappingsResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MappingsResponse(Dictionary<string, int>) public MappingsResponse(Dictionary<string, int> mappings) Parameters mappings Dictionary<string, int> Properties mappings public Dictionary<string, int> mappings { get; } Property Value Dictionary<string, int> Methods AsEnumEntries() Method used to quickly generate a ENUM like mapping from the entries. public List<string> AsEnumEntries() Returns List<string> ToCName(string) public static string ToCName(string pwName) Parameters pwName string Returns string"
  },
  "api/PixelPilot.PixelHttpClient.Responses.PlayerData.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.PlayerData.html",
    "title": "Class PlayerData | PixelPilot",
    "keywords": "Class PlayerData Namespace PixelPilot.PixelHttpClient.Responses Assembly PixelPilot.Core.dll public class PlayerData Inheritance object PlayerData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Admin [JsonPropertyName(\"admin\")] public bool Admin { get; set; } Property Value bool Banned [JsonPropertyName(\"banned\")] public bool Banned { get; set; } Property Value bool Face [JsonPropertyName(\"face\")] public int Face { get; set; } Property Value int Username [JsonPropertyName(\"username\")] public string Username { get; set; } Property Value string"
  },
  "api/PixelPilot.PixelHttpClient.Responses.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.html",
    "title": "Namespace PixelPilot.PixelHttpClient.Responses | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelHttpClient.Responses Classes CollectionResponse<T> JoinKeyResponse MappingsResponse PlayerData"
  },
  "api/PixelPilot.PixelHttpClient.Responses.visible.PixelWalkerWorldsResponse.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.visible.PixelWalkerWorldsResponse.html",
    "title": "Class PixelWalkerWorldsResponse | PixelPilot",
    "keywords": "Class PixelWalkerWorldsResponse Namespace PixelPilot.PixelHttpClient.Responses.visible Assembly PixelPilot.Core.dll public class PixelWalkerWorldsResponse Inheritance object PixelWalkerWorldsResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties OnlinePlayerCount public int OnlinePlayerCount { get; set; } Property Value int OnlineRoomCount public int OnlineRoomCount { get; set; } Property Value int VisibleRooms public List<VisibleRoom> VisibleRooms { get; set; } Property Value List<VisibleRoom>"
  },
  "api/PixelPilot.PixelHttpClient.Responses.visible.VisibleRoom.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.visible.VisibleRoom.html",
    "title": "Class VisibleRoom | PixelPilot",
    "keywords": "Class VisibleRoom Namespace PixelPilot.PixelHttpClient.Responses.visible Assembly PixelPilot.Core.dll public class VisibleRoom Inheritance object VisibleRoom Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data public VisibleRoomData Data { get; set; } Property Value VisibleRoomData Id public string Id { get; set; } Property Value string MaxPlayers [JsonPropertyName(\"max_players\")] public int MaxPlayers { get; set; } Property Value int Players public int Players { get; set; } Property Value int Plays public int Plays { get; } Property Value int Title public string Title { get; } Property Value string"
  },
  "api/PixelPilot.PixelHttpClient.Responses.visible.VisibleRoomData.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.visible.VisibleRoomData.html",
    "title": "Class VisibleRoomData | PixelPilot",
    "keywords": "Class VisibleRoomData Namespace PixelPilot.PixelHttpClient.Responses.visible Assembly PixelPilot.Core.dll public class VisibleRoomData Inheritance object VisibleRoomData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Plays public int Plays { get; set; } Property Value int Title public string Title { get; set; } Property Value string"
  },
  "api/PixelPilot.PixelHttpClient.Responses.visible.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.visible.html",
    "title": "Namespace PixelPilot.PixelHttpClient.Responses.visible | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelHttpClient.Responses.visible Classes PixelWalkerWorldsResponse VisibleRoom VisibleRoomData"
  },
  "api/PixelPilot.PixelHttpClient.html": {
    "href": "api/PixelPilot.PixelHttpClient.html",
    "title": "Namespace PixelPilot.PixelHttpClient | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelHttpClient Classes PixelApiClient Used to make HTTP API request instead of using the websocket. Required for obtaining information used to join a world. PixelApiException"
  },
  "api/PixelPilot.Structures.Converters.Migrations.Migrations.Migration_2024_18_07.html": {
    "href": "api/PixelPilot.Structures.Converters.Migrations.Migrations.Migration_2024_18_07.html",
    "title": "Class Migration_2024_18_07 | PixelPilot",
    "keywords": "Class Migration_2024_18_07 Namespace PixelPilot.Structures.Converters.Migrations.Migrations Assembly PixelPilot.Structures.dll public class Migration_2024_18_07 : VersionMigration Inheritance object VersionMigration Migration_2024_18_07 Inherited Members VersionMigration.FromVersion VersionMigration.ToVersion VersionMigration.ApplyMigration(MappedBlockData) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Migration_2024_18_07() public Migration_2024_18_07() Methods DoUpdate(MappedBlockData) protected override void DoUpdate(MappedBlockData mappedBlockData) Parameters mappedBlockData MappedBlockData"
  },
  "api/PixelPilot.Structures.Converters.Migrations.Migrations.html": {
    "href": "api/PixelPilot.Structures.Converters.Migrations.Migrations.html",
    "title": "Namespace PixelPilot.Structures.Converters.Migrations.Migrations | PixelPilot",
    "keywords": "Namespace PixelPilot.Structures.Converters.Migrations.Migrations Classes Migration_2024_18_07"
  },
  "api/PixelPilot.Structures.Converters.Migrations.VersionManager.html": {
    "href": "api/PixelPilot.Structures.Converters.Migrations.VersionManager.html",
    "title": "Class VersionManager | PixelPilot",
    "keywords": "Class VersionManager Namespace PixelPilot.Structures.Converters.Migrations Assembly PixelPilot.Structures.dll public class VersionManager Inheritance object VersionManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VersionManager() public VersionManager() Methods ApplyMigrations(MappedBlockData) public void ApplyMigrations(MappedBlockData mappedBlockData) Parameters mappedBlockData MappedBlockData"
  },
  "api/PixelPilot.Structures.Converters.Migrations.VersionMigration.html": {
    "href": "api/PixelPilot.Structures.Converters.Migrations.VersionMigration.html",
    "title": "Class VersionMigration | PixelPilot",
    "keywords": "Class VersionMigration Namespace PixelPilot.Structures.Converters.Migrations Assembly PixelPilot.Structures.dll public abstract class VersionMigration Inheritance object VersionMigration Derived Migration_2024_18_07 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VersionMigration(int) protected VersionMigration(int fromVersion) Parameters fromVersion int Properties FromVersion public int FromVersion { get; } Property Value int ToVersion public int ToVersion { get; } Property Value int Methods ApplyMigration(MappedBlockData) public void ApplyMigration(MappedBlockData mappedBlockData) Parameters mappedBlockData MappedBlockData DoUpdate(MappedBlockData) protected abstract void DoUpdate(MappedBlockData mappedBlockData) Parameters mappedBlockData MappedBlockData"
  },
  "api/PixelPilot.Structures.Converters.Migrations.html": {
    "href": "api/PixelPilot.Structures.Converters.Migrations.html",
    "title": "Namespace PixelPilot.Structures.Converters.Migrations | PixelPilot",
    "keywords": "Namespace PixelPilot.Structures.Converters.Migrations Classes VersionManager VersionMigration"
  },
  "api/PixelPilot.Structures.Converters.PilotSimple.JsonBlockListConverter.html": {
    "href": "api/PixelPilot.Structures.Converters.PilotSimple.JsonBlockListConverter.html",
    "title": "Class JsonBlockListConverter | PixelPilot",
    "keywords": "Class JsonBlockListConverter Namespace PixelPilot.Structures.Converters.PilotSimple Assembly PixelPilot.Structures.dll Additional binding to convert a list of placed blocks to a save format. This format also takes into consideration a version number. public class JsonBlockListConverter : JsonConverter<List<IPlacedBlock>> Inheritance object JsonConverter JsonConverter<List<IPlacedBlock>> JsonBlockListConverter Inherited Members JsonConverter<List<IPlacedBlock>>.CanConvert(Type) JsonConverter<List<IPlacedBlock>>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<List<IPlacedBlock>>.WriteAsPropertyName(Utf8JsonWriter, List<IPlacedBlock>, JsonSerializerOptions) JsonConverter<List<IPlacedBlock>>.HandleNull JsonConverter<List<IPlacedBlock>>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type List<IPlacedBlock>. public override List<IPlacedBlock>? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns List<IPlacedBlock> The converted value. Write(Utf8JsonWriter, List<IPlacedBlock>, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, List<IPlacedBlock> blocks, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. blocks List<IPlacedBlock> options JsonSerializerOptions An object that specifies serialization options to use."
  },
  "api/PixelPilot.Structures.Converters.PilotSimple.MappedBlockData.html": {
    "href": "api/PixelPilot.Structures.Converters.PilotSimple.MappedBlockData.html",
    "title": "Class MappedBlockData | PixelPilot",
    "keywords": "Class MappedBlockData Namespace PixelPilot.Structures.Converters.PilotSimple Assembly PixelPilot.Structures.dll public class MappedBlockData Inheritance object MappedBlockData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MappedBlockData() public MappedBlockData() MappedBlockData(List<PixelBlock>, List<string>) public MappedBlockData(List<PixelBlock> mapping, List<string> blockData) Parameters mapping List<PixelBlock> blockData List<string> Properties BlockData public List<string> BlockData { get; set; } Property Value List<string> Mapping public List<string> Mapping { get; set; } Property Value List<string> Version public int Version { get; set; } Property Value int"
  },
  "api/PixelPilot.Structures.Converters.PilotSimple.PilotSaveSerializer.html": {
    "href": "api/PixelPilot.Structures.Converters.PilotSimple.PilotSaveSerializer.html",
    "title": "Class PilotSaveSerializer | PixelPilot",
    "keywords": "Class PilotSaveSerializer Namespace PixelPilot.Structures.Converters.PilotSimple Assembly PixelPilot.Structures.dll public static class PilotSaveSerializer Inheritance object PilotSaveSerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(string) public static Structure Deserialize(string rawData) Parameters rawData string Returns Structure Serialize(Structure) public static string Serialize(Structure structure) Parameters structure Structure Returns string"
  },
  "api/PixelPilot.Structures.Converters.PilotSimple.PilotSimpleStructure.html": {
    "href": "api/PixelPilot.Structures.Converters.PilotSimple.PilotSimpleStructure.html",
    "title": "Class PilotSimpleStructure | PixelPilot",
    "keywords": "Class PilotSimpleStructure Namespace PixelPilot.Structures.Converters.PilotSimple Assembly PixelPilot.Structures.dll Used to save a structure public class PilotSimpleStructure Inheritance object PilotSimpleStructure Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PilotSimpleStructure() public PilotSimpleStructure() Properties Blocks public List<IPlacedBlock> Blocks { get; set; } Property Value List<IPlacedBlock> ContainsEmpty public bool ContainsEmpty { get; set; } Property Value bool Height public int Height { get; set; } Property Value int Meta public Dictionary<string, string> Meta { get; set; } Property Value Dictionary<string, string> Version public int Version { get; set; } Property Value int Width public int Width { get; set; } Property Value int Methods FromStructure(Structure) public static PilotSimpleStructure FromStructure(Structure structure) Parameters structure Structure Returns PilotSimpleStructure ToStructure() public Structure ToStructure() Returns Structure"
  },
  "api/PixelPilot.Structures.Converters.PilotSimple.html": {
    "href": "api/PixelPilot.Structures.Converters.PilotSimple.html",
    "title": "Namespace PixelPilot.Structures.Converters.PilotSimple | PixelPilot",
    "keywords": "Namespace PixelPilot.Structures.Converters.PilotSimple Classes JsonBlockListConverter Additional binding to convert a list of placed blocks to a save format. This format also takes into consideration a version number. MappedBlockData PilotSaveSerializer PilotSimpleStructure Used to save a structure"
  },
  "api/PixelPilot.Structures.Extensions.WorldExtensions.html": {
    "href": "api/PixelPilot.Structures.Extensions.WorldExtensions.html",
    "title": "Class WorldExtensions | PixelPilot",
    "keywords": "Class WorldExtensions Namespace PixelPilot.Structures.Extensions Assembly PixelPilot.Structures.dll public static class WorldExtensions Inheritance object WorldExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MaxChunkBlockCount public const int MaxChunkBlockCount = 250 Field Value int Methods GetDifference(PixelWorld, Structure, int, int) public static List<IPlacedBlock> GetDifference(this PixelWorld world, Structure structure, int x = 0, int y = 0) Parameters world PixelWorld structure Structure x int y int Returns List<IPlacedBlock> GetStructure(PixelWorld, Point, Point, bool) public static Structure GetStructure(this PixelWorld world, Point p1, Point p2, bool copyEmpty = false) Parameters world PixelWorld p1 Point p2 Point copyEmpty bool Returns Structure GetStructure(PixelWorld, int, int, int, int, bool) public static Structure GetStructure(this PixelWorld world, int x, int y, int width, int height, bool copyEmpty = true) Parameters world PixelWorld x int y int width int height int copyEmpty bool Returns Structure PasteInOrder(List<IPlacedBlock>, PixelPilotClient, Point, int) public static Task PasteInOrder(this List<IPlacedBlock> blocks, PixelPilotClient client, Point origin, int delay = 0) Parameters blocks List<IPlacedBlock> client PixelPilotClient origin Point delay int Returns Task PasteShuffled(List<IPlacedBlock>, PixelPilotClient, Point, int) public static Task PasteShuffled(this List<IPlacedBlock> blocks, PixelPilotClient client, Point origin, int delay = 0) Parameters blocks List<IPlacedBlock> client PixelPilotClient origin Point delay int Returns Task ToChunkedPacket(List<IPlacedBlock>) Creates a packet out of a blocks that are all the same. public static IPixelGamePacketOut ToChunkedPacket(this List<IPlacedBlock> blocks) Parameters blocks List<IPlacedBlock> The blocks Returns IPixelGamePacketOut A packet Exceptions PixelApiException When the requirements are not met ToChunkedPackets(IEnumerable<IPlacedBlock>) Group blocks that are the same into a single packet that can be send. public static List<IPixelGamePacketOut> ToChunkedPackets(this IEnumerable<IPlacedBlock> blocks) Parameters blocks IEnumerable<IPlacedBlock> The blocks Returns List<IPixelGamePacketOut> Packets to be send by the client."
  },
  "api/PixelPilot.Structures.Extensions.html": {
    "href": "api/PixelPilot.Structures.Extensions.html",
    "title": "Namespace PixelPilot.Structures.Extensions | PixelPilot",
    "keywords": "Namespace PixelPilot.Structures.Extensions Classes WorldExtensions"
  },
  "api/PixelPilot.Structures.Structure.html": {
    "href": "api/PixelPilot.Structures.Structure.html",
    "title": "Class Structure | PixelPilot",
    "keywords": "Class Structure Namespace PixelPilot.Structures Assembly PixelPilot.Structures.dll public class Structure Inheritance object Structure Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Structure(int, int, Dictionary<string, string>, bool, List<IPlacedBlock>) public Structure(int width, int height, Dictionary<string, string> meta, bool containsEmpty, List<IPlacedBlock> blocks) Parameters width int height int meta Dictionary<string, string> containsEmpty bool blocks List<IPlacedBlock> Properties Blocks public List<IPlacedBlock> Blocks { get; } Property Value List<IPlacedBlock> BlocksWithEmpty Returns a computed list of the structure which includes empty blocks. public List<IPlacedBlock> BlocksWithEmpty { get; } Property Value List<IPlacedBlock> ContainsEmpty public bool ContainsEmpty { get; set; } Property Value bool Height public int Height { get; } Property Value int Meta public Dictionary<string, string> Meta { get; set; } Property Value Dictionary<string, string> Width public int Width { get; } Property Value int"
  },
  "api/PixelPilot.Structures.html": {
    "href": "api/PixelPilot.Structures.html",
    "title": "Namespace PixelPilot.Structures | PixelPilot",
    "keywords": "Namespace PixelPilot.Structures Classes Structure"
  },
  "guides/extra_packages/introduction.html": {
    "href": "guides/extra_packages/introduction.html",
    "title": "Introduction | PixelPilot",
    "keywords": "Extra packages PixelPilot provides extra optional packages for various uses. These packages can be installed alongside PixelPilot. They aim to be general purpose and easy to extend while keeping things simple."
  },
  "guides/extra_packages/pixelpilot_chatcommands.html": {
    "href": "guides/extra_packages/pixelpilot_chatcommands.html",
    "title": "PixelPilot.ChatCommands | PixelPilot",
    "keywords": "Introduction PixelPilot provides an additional package called PixelPilot.ChatCommands. This package allows users to execute commands in chat. Features: Supports permission strings Automatically generated help command. Format the help if you want. String based permissions. root.command.subcommand. Nested commands Getting started Install PixelPilot.ChatCommands by using NuGet into your current project. Ensure that the PixelPilot.Core version matches the PixelPilot.ChatCommands version. Creating basic commands To create a basic command, extend the ChatCommand class. Implement your own logic that should run on command. public class TestCommand : ChatCommand { public TestCommand() : base(\"test\", \"A test command\", null) { } public override Task ExecuteCommand(ICommandSender sender, string fullCommand, string[] args) { sender.SendMessage(\"This is a test command!\"); return Task.CompletedTask; } } Now create a command manager and hook it to the client. Register the command and add the optional help command. var commandManager = new CustomCommandManager(client, playerManager); commandManager.AddHelpCommand(); commandManager.AddCommand(new TestCommand()); That's it! Your command can now be executed in the game. Nested commands To nest commands use extend the RootCommand. Add your new commands in the constructor of this command. Note that these can also be RootCommands. public class BotActionsRoot : RootCommand { public BotActionsRoot(PixelPilotClient client) : base(\"bot\", \"Bot commands\", \"bot\") { // Add the commands. AddCommand(new DisconnectCommand(client));; AddCommand(new BroadcastCommand(client));; } } Note that the base permission for this command is bot. The commands Disconnect and Broadcast extend this permission node by using the + sign. This means that the full permission will be bot.disconnect. public class SubCommand : ChatCommand { private PixelPilotClient _client; public DisconnectCommand(PixelPilotClient client) : base(\"disconnect\", \"Disconnect the bot\", \"+disconnect\") { _client = client; } public override Task ExecuteCommand(ICommandSender sender, string fullCommand, string[] args) { // Logic return Task.CompletedTask; } } Handling permissions By default the bot handles permissions by allowing all. You can change this by implementing your own command manager. See the following example below. Based on the players rank we grab a list of permission nodes allowed. If the list contains the permission node, the command is allowed. public class CustomCommandManager : PixelChatCommandManager<Player> { private PixelPilotClient _client; public CustomCommandManager(PixelPilotClient client, PixelPlayerManager<Player> pixelPlayerManager) : base(client, pixelPlayerManager) { _client = client; } protected override ICommandSender CreateSender(Player player) { // Create a custom sender that executes the permission check. return new CustomSender(player, _client); } } class CustomSender : CommandSender { public CustomSender(IPixelPlayer player, PixelPilotClient client) : base(player, client) { } public override bool HasPermission(string? permission) { // Allow by default if no permission is set. if (permission == null) return true; // Normally fetch the players rank here from the IPixelPlayer. var playerRank = Rank.Default; var permissions = playerRank.GetPermissions(); return permissions.Contains(permission); } }"
  },
  "guides/extra_packages/pixelpilot_structures.html": {
    "href": "guides/extra_packages/pixelpilot_structures.html",
    "title": "PixelPilot.Structures | PixelPilot",
    "keywords": "Introduction PixelPilot provides an additional package called PixelPilot.Structures. This package allows users to save, load and share structures within their worlds (or complete worlds!) Getting started Install PixelPilot.Structures by using NuGet into your current project. Ensure that the PixelPilot.Core version matches the PixelPilot.Structures version. Creating & Saving a structure A structure can be grabbed from a world and serialized to a JSON document. This JSON document has a special encoding for blocks which is not human readable. It does ensure that in future versions of the game you can still load old structures. // Create a structure, don't save empty blocks. var structure = world.GetStructure(p1, p2, copyEmpty: false); // Convert the structure to the JSON format & save it. var json = PilotSaveSerializer.Serialize(structure); File.WriteAllText(\"test-struct.json\", json); Loading & Pasting a structure // Load the file and convert it to a structure. string json = File.ReadAllText(\"test-struct.json\"); var structure = PilotSaveSerializer.Deserialize(json); // Various methods for getting the list of blocks. List<IPlacedBlock> diff = world.GetDifference(structure, x, y); List<IPlacedBlock> blocks = structure.Blocks; List<IPlacedBlock> blocks = structure.BlocksWithEmpty; // Helper methods for pasting the blocks. structure.Blocks.PasteInOrder(client, new Point(x, y), 5); structure.Blocks.PasteShuffeled(client, new Point(x, y), 5);"
  },
  "guides/getting_started/extra_topics.html": {
    "href": "guides/getting_started/extra_topics.html",
    "title": "Logging | PixelPilot",
    "keywords": "Extra topics This article covers some of the mics features of PixelPilot.Core. Configuration It's highly recommended that you don't store your token, username and or password in your code. Rather opt for using a configuration file or .ENV variables instead. Start by creating a config.json in your project. Ignore the logging part for now. It will be used in a later section of this guide. { \"AccountToken\": \"Secret key value if you want to use the token login\", \"LoginEmail\": \"Email\", \"LoginPassword\": \"Password\", \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"PixelPilot.API\": \"Information\", \"PixelPilot.Client\": \"Information\", \"PixelPilot.World\": \"Information\", \"PixelPilot.PacketConverter\": \"Information\", \"Microsoft\": \"Warning\", \"Microsoft.Hosting.Lifetime\": \"Information\" } } } Create class the values can be mapped to: public class BasicConfig { public string AccountToken { get; set; } = null!; public string AccountEmail { get; set; } = null!; public string AccountPassword { get; set; } = null!; } Initialize the configuration in your bot: var config = configuration.Get<BasicConfig>(); if (config == null) { Console.WriteLine(\"The configuration file could not be loaded.\"); return; } You can now use config.Token to retrieve your token! Logging PixelPilot uses the default logger provided with C#. In order to configure it you can use the following code snippet. Note that this example uses the config.json from the previous step. LogManager.Configure(configuration.GetSection(\"Logging\")); var config = configuration.Get<BasicConfig>(); if (config == null) { Console.WriteLine(\"The configuration file could not be loaded.\"); return; } Grabbing a logger It can be useful to do your logging using the provided LogManager. In order to get a logger you can use the following code snippet: private ILogger _logger = LogManager.GetLogger(\"YourLogger\");"
  },
  "guides/getting_started/first_bot.html": {
    "href": "guides/getting_started/first_bot.html",
    "title": "Start making a bot | PixelPilot",
    "keywords": "Note This guide assumes you have basic knowledge about C# and NuGet. If you don't, start learning it today! Installation The main package PixelPilot.Core can be found on NuGet. Install the latest version to start using the API. Your first bot PixelPilot.Core makes it easy to get a bot up and running. You can either provide the builder with a token, or by using your email and password directly. The token can be found in the local storage of your browser. # Create a bot by using a token // Create a client. var client = PixelPilotClient.Builder() .SetToken(config.AccountToken) .SetAutomaticReconnect(false) .Build(); # Create a bot by using email/password var client = PixelPilotClient.Builder() .SetEmail(config.AccountEmail) .SetPassword(config.AccountPassword) .SetAutomaticReconnect(false) .Build(); After creating the client you probably, you can let the bot connect to a world. Each world has an unique world ID. When you join a world, the URL bar will display the following https://pixelwalker.net/world/<WORLD_ID>. Copy the world ID and use it to connect to the world. // Connect to a room. await client.Connect(\"r082b210d67df52\"); Our bot has now joined the world but it since the end of the program has been reached it will terminate. You can prevent this by adding either one of the following lines of code to the end of your program. // Don't terminate. Thread.Sleep(-1); // Don't terminate. Unless disconnected await client.WaitForDisconnect(); That's it, you have now connected your first bot to the world!"
  },
  "guides/getting_started/manipulating_the_world.html": {
    "href": "guides/getting_started/manipulating_the_world.html",
    "title": "Manipulating the world | PixelPilot",
    "keywords": "Manipulating the world In the previous examples we have seen how to use basic packets. In this guide we will start manipulating the world. That's all what this game is about in the end! The World class In order to make World manipulation a bit easier PixelPilot.Core exposes a PixelWorld class. To parse the block packets can be quite complicated, so if you don't want to do this yourself, I highly recommend you use this class. To get started with the PixelWorld class, create an instance of it and ensure it receives packet updates from the client. // Create a PixelWorld class and attach the client to it. // Allow it to listen to client updates. Not required! var world = new PixelWorld(); client.OnPacketReceived += world.HandlePacket; We now have a world object that will keep track of blocks in the world, and dispatch events on block changes. The world has several layers. Each layer is used for a specific type of block. Currently there are two layers. The WorldLayer enum can be used for simplicity. Layer Description Enum 0 Background WorldLayer.Background 1 Foreground WorldLayer.Foreground In order to get a block at a specific coordinate and layer you can use the following snippet. We then check if it's a coin. Note that the block.Block gives us an enum. This enum can be cast to an INT if required. var worldBlock = world.BlockAt(layer, x, y); Console.WriteLine($\"Is this a coin? ({worldBlock.Block == PixelBlock.Coin})\"); Console.WriteLine($\"It is a: {worldBlock.Block} with ID {block.BlockId}\"); Blocks with additional data. Some blocks contain additional data. Think about portals, gates, signs, etc. To access this data, you can simply cast the IPixelBlock to it's desired type. In this example we will check for portal block. var worldBlock = world.BlockAt(layer, x, y); if (worldBlock is PortalBlock portalBlock) { Console.WriteLine($\"It is a portal with target {portalBlock.TargetId}\"); } else { Console.WriteLine(\"The block is not a portal.\"); } Tip The 'is' keyword is used to cast the object. For more information about casting check here Sending blocks In order to send your own blocks you can simply create an instance of the class. A block placement also needs a location, so we wrap the block with the PlacedBlock class. BasicBlock block = new BasicBlock((int) PixelBlock.Crown); PlacedBlock placedBlock = new PlacedBlock(x, y, WorldLayer.Foreground, block); client.Send(placedBlock.AsPacketOut()); That's it, you have send a block! Example: Blocking the crown! Lets say we want to disable people from placing a crown block. In order to do this, we need to listen to any blocks being placed in our world. The following code snippet can be used to achieve the actions we want. world.OnBlockPlaced += (_, playerId, oldBlock, newBlock) => { // Ignore our own bot if (client.BotId == playerId) return; if (newBlock.Block.Block != PixelBlock.Crown) return; client.Send(oldBlock.AsPacketOut()); };"
  },
  "guides/getting_started/player_management.html": {
    "href": "guides/getting_started/player_management.html",
    "title": "Player Management | PixelPilot",
    "keywords": "Player Management The game only sends updates about players only once. In order to make keep track of players in your world you can use the PlayerManager. This manager keeps tracks of players in your world and easily allows you to fetch their latest information. The following code snippet initializes the manager and ensures it receives the packets from the client. // Player manager allows you to easily keep track of player stats. // For advanced users, it can be extended to include relevant information for you. var playerManager = new PlayerManager(); client.OnPacketReceived += playerManager.HandlePacket; You now have access to the players stats at all time. This can be used in for example a .ping command that sends back the players name. client.OnPacketReceived += (_, packet) => { // Make use of strongly typed packets! switch (packet) { case PlayerChatPacket { Message: \".ping\" } chat: { var player = playerManager.GetPlayer(chat.PlayerId); if (player == null) return; client.Send(new PlayerChatOutPacket($\"Pong! ({player.Username}, {player.X}, {player.Y})\")); break; } } }; Advanced usage: Making your own player class When making a minigame you might need to store more information about the player. The API allows you to define your own player class that can still be used by the manager. The following steps should be taken: Create your own Player class that implements IPixelPlayer. Create your own PlayerManager which extends PixelPlayerManager. Start using your own implementation of IPixelPlayer and PixelPlayerManger! The default classes Player and PlayerManager used in this guide are created in the same way."
  },
  "guides/getting_started/using_packets.html": {
    "href": "guides/getting_started/using_packets.html",
    "title": "Using Packets | PixelPilot",
    "keywords": "Using packets The game communicates with your bot using Packets (Block placed, Smiley changed, Player moved, etc). PixelPilot.Core provides some abstraction so you don't have to construct these yourself. To start listening to incoming packets the game simply use the OnPacketReceived event handler of the client. // Executed when the client receives a packet! client.OnPacketReceived += (_, packet) => { Console.WriteLine(\"I received a packet\"); } All incoming packets implement the interface IPixelGamePacket. Packets that are related to a player implement an addtional interface called IPixelGamePlayerPacket. Packets that you can send implement the interface 'IPixelGamePacketOut'. We will get to sending packets in a bit. A list of all incoming and outgoing packets can be found here: Packet Type Documentation Incoming PixelPilot.PixelGameClient.Messages.Received Outgoing PixelPilot.PixelGameClient.Messages.Send Handling specific packets (Giving god on join) Executing something on each packet received is not that useful. Luckily, with the use of some casting we can easily execute actions when we receive a specific packet. Since the packets are strongly typed, we can use a switch statement to do some more useful things. In the following code snippet, we check for the join packet. If we get it we get the username from it. After that we send the PlayerChatOutPacket with the username of the joined player. // Make use of strongly typed packets! switch (packet) { case PlayerJoinPacket join: client.Send(new PlayerChatOutPacket($\"/givegod {join.Username}\")); break; } All packets that can be send contain the word Out. This indicates that it's an outgoing packet. All outgoing packets can be found in the previously seen table. For blocks, there is a different method of constructing the packet which we will see in a later guide. We will now extend this example with a simple .stop command for the bot. Note that everyone can stop the bot. // Make use of strongly typed packets! switch (packet) { case PlayerChatPacket { Message: \".stop\" }: client.Disconnect(); Environment.Exit(0); return; case PlayerJoinPacket join: client.Send(new PlayerChatOutPacket($\"/givegod {join.Username}\")); break; } That's it, you made a simple bot that responds to incoming packets and sends packets to the game!"
  },
  "guides/introduction.html": {
    "href": "guides/introduction.html",
    "title": "Introduction | PixelPilot",
    "keywords": "Introduction Welcome to the documentation of PixelPilot. To get started with your own bot visit Start making a bot"
  },
  "index.html": {
    "href": "index.html",
    "title": "Home | PixelPilot",
    "keywords": "Pixel Pilot A C# library for interacting with the game PixelWalker 📄 Documentation https://martenm.github.io/PixelPilotDocs ✨ Features Strongly typed packets. PixelPilot.Core has minor abstracts Lightweight Useful helper classes (optional) 🛠 Projects: PixelPilot.Core: The core of the project. Bare minimum client to interact with the game. PixelPilot.Tests: All test related to the project. PixelPilot.DebugTools: Useful CLI programs to help development of PixelPilot."
  }
}