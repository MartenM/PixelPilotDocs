{
  "api/PixelPilot.Common.EndPoints.html": {
    "href": "api/PixelPilot.Common.EndPoints.html",
    "title": "Class EndPoints | PixelPilot",
    "keywords": "Class EndPoints Namespace PixelPilot.Common Assembly PixelPilot.Core.dll public static class EndPoints Inheritance object EndPoints Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ApiEndpoint public const string ApiEndpoint = \"https://api.pixelwalker.net\" Field Value string GameHttpEndpoint public const string GameHttpEndpoint = \"https://game.pixelwalker.net\" Field Value string GameWebsocketEndpoint public const string GameWebsocketEndpoint = \"wss://game.pixelwalker.net\" Field Value string"
  },
  "api/PixelPilot.Common.html": {
    "href": "api/PixelPilot.Common.html",
    "title": "Namespace PixelPilot.Common | PixelPilot",
    "keywords": "Namespace PixelPilot.Common Classes EndPoints"
  },
  "api/PixelPilot.LogManager.html": {
    "href": "api/PixelPilot.LogManager.html",
    "title": "Class LogManager | PixelPilot",
    "keywords": "Class LogManager Namespace PixelPilot Assembly PixelPilot.Core.dll The LogManager class provides static access to loggers though the project. public static class LogManager Inheritance object LogManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure(IConfigurationSection) Use a configuration section to configure the logger. public static void Configure(IConfigurationSection section) Parameters section IConfigurationSection Logging configuration Configure(Action<ILoggingBuilder>) Set an action to be used when creating the logger factory. public static void Configure(Action<ILoggingBuilder> configure) Parameters configure Action<ILoggingBuilder> Action to be used to configure GetLogger(string) public static ILogger GetLogger(string name) Parameters name string Returns ILogger"
  },
  "api/PixelPilot.PixelGameClient.Messages.Constants.MessageType.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Constants.MessageType.html",
    "title": "Enum MessageType | PixelPilot",
    "keywords": "Enum MessageType Namespace PixelPilot.PixelGameClient.Messages.Constants Assembly PixelPilot.Core.dll public enum MessageType : byte Fields Ping = 63 World = 107"
  },
  "api/PixelPilot.PixelGameClient.Messages.Constants.PacketFieldType.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Constants.PacketFieldType.html",
    "title": "Enum PacketFieldType | PixelPilot",
    "keywords": "Enum PacketFieldType Namespace PixelPilot.PixelGameClient.Messages.Constants Assembly PixelPilot.Core.dll public enum PacketFieldType Fields Boolean = 7 Byte = 1 ByteArray = 8 Double = 6 Float = 5 Int16 = 2 Int32 = 3 Int64 = 4 String = 0"
  },
  "api/PixelPilot.PixelGameClient.Messages.Constants.WorldMessageType.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Constants.WorldMessageType.html",
    "title": "Enum WorldMessageType | PixelPilot",
    "keywords": "Enum WorldMessageType Namespace PixelPilot.PixelGameClient.Messages.Constants Assembly PixelPilot.Core.dll public enum WorldMessageType Fields ChatMessage = 6 GlobalSwitchChanged = 24 GlobalSwitchReset = 25 PlayerCheckpoint = 15 PlayerCounters = 20 PlayerCrown = 18 PlayerFace = 12 PlayerGodMode = 13 PlayerInit = 0 PlayerJoined = 8 PlayerKeyPressed = 19 PlayerLeft = 9 PlayerLocalSwitchChanged = 22 PlayerLocalSwitchReset = 23 PlayerModMode = 14 PlayerMoved = 10 PlayerReset = 17 PlayerRespawn = 16 PlayerTeleported = 11 PlayerWin = 21 SystemMessage = 7 UpdateRights = 1 WorldBlockPlaced = 5 WorldCleared = 3 WorldMetadata = 2 WorldReloaded = 4"
  },
  "api/PixelPilot.PixelGameClient.Messages.Constants.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Constants.html",
    "title": "Namespace PixelPilot.PixelGameClient.Messages.Constants | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.Messages.Constants Enums MessageType PacketFieldType WorldMessageType"
  },
  "api/PixelPilot.PixelGameClient.Messages.Exceptions.PacketConstructorException.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Exceptions.PacketConstructorException.html",
    "title": "Class PacketConstructorException | PixelPilot",
    "keywords": "Class PacketConstructorException Namespace PixelPilot.PixelGameClient.Messages.Exceptions Assembly PixelPilot.Core.dll public class PacketConstructorException : PixelException, ISerializable Inheritance object Exception PixelException PacketConstructorException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PacketConstructorException(List<dynamic>, Type) public PacketConstructorException(List<dynamic> receivedFields, Type packetType) Parameters receivedFields List<dynamic> packetType Type Properties PacketType public Type PacketType { get; } Property Value Type ReceivedFields public List<dynamic> ReceivedFields { get; } Property Value List<dynamic>"
  },
  "api/PixelPilot.PixelGameClient.Messages.Exceptions.PacketTypeNotFoundException.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Exceptions.PacketTypeNotFoundException.html",
    "title": "Class PacketTypeNotFoundException | PixelPilot",
    "keywords": "Class PacketTypeNotFoundException Namespace PixelPilot.PixelGameClient.Messages.Exceptions Assembly PixelPilot.Core.dll public class PacketTypeNotFoundException : PixelException, ISerializable Inheritance object Exception PixelException PacketTypeNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PacketTypeNotFoundException(WorldMessageType) public PacketTypeNotFoundException(WorldMessageType worldMessageType) Parameters worldMessageType WorldMessageType Properties WorldMessageType public WorldMessageType WorldMessageType { get; } Property Value WorldMessageType"
  },
  "api/PixelPilot.PixelGameClient.Messages.Exceptions.PixelException.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Exceptions.PixelException.html",
    "title": "Class PixelException | PixelPilot",
    "keywords": "Class PixelException Namespace PixelPilot.PixelGameClient.Messages.Exceptions Assembly PixelPilot.Core.dll public abstract class PixelException : Exception, ISerializable Inheritance object Exception PixelException Implements ISerializable Derived PacketConstructorException PacketTypeNotFoundException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PixelException(string) protected PixelException(string msg) Parameters msg string"
  },
  "api/PixelPilot.PixelGameClient.Messages.Exceptions.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Exceptions.html",
    "title": "Namespace PixelPilot.PixelGameClient.Messages.Exceptions | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.Messages.Exceptions Classes PacketConstructorException PacketTypeNotFoundException PixelException"
  },
  "api/PixelPilot.PixelGameClient.Messages.IPixelGamePacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.IPixelGamePacket.html",
    "title": "Interface IPixelGamePacket | PixelPilot",
    "keywords": "Interface IPixelGamePacket Namespace PixelPilot.PixelGameClient.Messages Assembly PixelPilot.Core.dll public interface IPixelGamePacket"
  },
  "api/PixelPilot.PixelGameClient.Messages.IPixelGamePacketOut.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.IPixelGamePacketOut.html",
    "title": "Interface IPixelGamePacketOut | PixelPilot",
    "keywords": "Interface IPixelGamePacketOut Namespace PixelPilot.PixelGameClient.Messages Assembly PixelPilot.Core.dll Packets that can be sent to the PixelWalker game server. public interface IPixelGamePacketOut Methods ToBinaryPacket() byte[] ToBinaryPacket() Returns byte[]"
  },
  "api/PixelPilot.PixelGameClient.Messages.IPixelGamePlayerPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.IPixelGamePlayerPacket.html",
    "title": "Interface IPixelGamePlayerPacket | PixelPilot",
    "keywords": "Interface IPixelGamePlayerPacket Namespace PixelPilot.PixelGameClient.Messages Assembly PixelPilot.Core.dll Special interface for packets that are triggered by or indicate a status change to a player. public interface IPixelGamePlayerPacket : IPixelGamePacket Properties PlayerId int PlayerId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Misc.BinaryReaderExtensions.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Misc.BinaryReaderExtensions.html",
    "title": "Class BinaryReaderExtensions | PixelPilot",
    "keywords": "Class BinaryReaderExtensions Namespace PixelPilot.PixelGameClient.Messages.Misc Assembly PixelPilot.Core.dll public static class BinaryReaderExtensions Inheritance object BinaryReaderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadBytesRequired(BinaryReader, int) public static byte[] ReadBytesRequired(this BinaryReader binRdr, int byteCount) Parameters binRdr BinaryReader byteCount int Returns byte[] ReadDoubleBE(BinaryReader) public static double ReadDoubleBE(this BinaryReader binaryReader) Parameters binaryReader BinaryReader Returns double ReadInt16BE(BinaryReader) public static short ReadInt16BE(this BinaryReader binRdr) Parameters binRdr BinaryReader Returns short ReadInt32BE(BinaryReader) public static int ReadInt32BE(this BinaryReader binRdr) Parameters binRdr BinaryReader Returns int ReadUInt16BE(BinaryReader) public static ushort ReadUInt16BE(this BinaryReader binRdr) Parameters binRdr BinaryReader Returns ushort ReadUInt32BE(BinaryReader) public static uint ReadUInt32BE(this BinaryReader binRdr) Parameters binRdr BinaryReader Returns uint Reverse(byte[]) public static byte[] Reverse(this byte[] b) Parameters b byte[] Returns byte[]"
  },
  "api/PixelPilot.PixelGameClient.Messages.Misc.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Misc.html",
    "title": "Namespace PixelPilot.PixelGameClient.Messages.Misc | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.Messages.Misc Classes BinaryReaderExtensions"
  },
  "api/PixelPilot.PixelGameClient.Messages.PacketConverter.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.PacketConverter.html",
    "title": "Class PacketConverter | PixelPilot",
    "keywords": "Class PacketConverter Namespace PixelPilot.PixelGameClient.Messages Assembly PixelPilot.Core.dll Converts binary data into pixel game packets. public class PacketConverter Inheritance object PacketConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConstructPacket(byte[]) Constructs a pixel game packet from the given binary data. public IPixelGamePacket ConstructPacket(byte[] binary) Parameters binary byte[] The binary data representing the packet. Returns IPixelGamePacket The constructed pixel game packet. ReadType(BinaryReader, PacketFieldType) Reads data of a specified type from a BinaryReader according to the provided PacketFieldType. public static dynamic ReadType(BinaryReader reader, PacketFieldType fieldType) Parameters reader BinaryReader The BinaryReader to read from. fieldType PacketFieldType The type of data to read. Returns dynamic The data read from the BinaryReader. Exceptions Exception Thrown when the provided fieldType is not supported. ReadTypeLe(BinaryReader, PacketFieldType) Reads data of a specified type from a BinaryReader in little-endian format according to the provided PacketFieldType. public static dynamic ReadTypeLe(BinaryReader reader, PacketFieldType fieldType) Parameters reader BinaryReader The BinaryReader to read from. fieldType PacketFieldType The type of data to read. Returns dynamic The data read from the BinaryReader. Exceptions Exception Thrown when the provided fieldType is not supported."
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.CheckpointPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.CheckpointPacket.html",
    "title": "Class CheckpointPacket | PixelPilot",
    "keywords": "Class CheckpointPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll Send by the server to force change a checkpoint position. When -1,-1 no checkpoint is set. public class CheckpointPacket : IPixelGamePacket Inheritance object CheckpointPacket Implements IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CheckpointPacket(int, int) public CheckpointPacket(int x, int y) Parameters x int y int Properties X public int X { get; } Property Value int Y public int Y { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.GlobalSwitchChangedPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.GlobalSwitchChangedPacket.html",
    "title": "Class GlobalSwitchChangedPacket | PixelPilot",
    "keywords": "Class GlobalSwitchChangedPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class GlobalSwitchChangedPacket : IPixelGamePacket Inheritance object GlobalSwitchChangedPacket Implements IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GlobalSwitchChangedPacket(int, int, byte) public GlobalSwitchChangedPacket(int playerId, int switchId, byte enabled) Parameters playerId int switchId int enabled byte Properties Enabled public bool Enabled { get; } Property Value bool PlayerId public int PlayerId { get; } Property Value int SwitchId public int SwitchId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.GlobalSwitchResetPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.GlobalSwitchResetPacket.html",
    "title": "Class GlobalSwitchResetPacket | PixelPilot",
    "keywords": "Class GlobalSwitchResetPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class GlobalSwitchResetPacket : IPixelGamePacket Inheritance object GlobalSwitchResetPacket Implements IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GlobalSwitchResetPacket(int, byte) public GlobalSwitchResetPacket(int switchId, byte enabled) Parameters switchId int enabled byte Properties Enabled public bool Enabled { get; } Property Value bool SwitchId public int SwitchId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.InitPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.InitPacket.html",
    "title": "Class InitPacket | PixelPilot",
    "keywords": "Class InitPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class InitPacket : IPixelGamePacket Inheritance object InitPacket Implements IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InitPacket(int, string, string, int, bool, double, double, bool, bool, string, int, string, byte[], int, int, byte[]) public InitPacket(int id, string cId, string username, int face, bool isAdmin, double x, double y, bool canEdit, bool canGod, string roomTitle, int players, string owner, byte[] globalSwitchStates, int width, int height, byte[] worldData) Parameters id int cId string username string face int isAdmin bool x double y double canEdit bool canGod bool roomTitle string players int owner string globalSwitchStates byte[] width int height int worldData byte[] Properties AccountId public string AccountId { get; set; } Property Value string CanEdit public bool CanEdit { get; set; } Property Value bool CanGod public bool CanGod { get; set; } Property Value bool Face public int Face { get; set; } Property Value int GlobalSwitchStates public byte[] GlobalSwitchStates { get; set; } Property Value byte[] Height public int Height { get; set; } Property Value int IsAdmin public bool IsAdmin { get; set; } Property Value bool Owner public string Owner { get; set; } Property Value string PlayerId public int PlayerId { get; set; } Property Value int Players public int Players { get; set; } Property Value int RoomTitle public string RoomTitle { get; set; } Property Value string Username public string Username { get; set; } Property Value string Width public int Width { get; set; } Property Value int WorldData public byte[] WorldData { get; set; } Property Value byte[] X public double X { get; set; } Property Value double Y public double Y { get; set; } Property Value double Methods AsSendingBytes() public static byte[] AsSendingBytes() Returns byte[]"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.KeyPressedPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.KeyPressedPacket.html",
    "title": "Class KeyPressedPacket | PixelPilot",
    "keywords": "Class KeyPressedPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class KeyPressedPacket : IPixelGamePacket Inheritance object KeyPressedPacket Implements IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors KeyPressedPacket(byte) public KeyPressedPacket(byte key) Parameters key byte Properties Key public int Key { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.LocalSwitchChangedPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.LocalSwitchChangedPacket.html",
    "title": "Class LocalSwitchChangedPacket | PixelPilot",
    "keywords": "Class LocalSwitchChangedPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class LocalSwitchChangedPacket : IPixelGamePacket Inheritance object LocalSwitchChangedPacket Implements IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LocalSwitchChangedPacket(int, int, byte) public LocalSwitchChangedPacket(int playerId, int switchId, byte enabled) Parameters playerId int switchId int enabled byte Properties Enabled public bool Enabled { get; } Property Value bool PlayerId public int PlayerId { get; } Property Value int SwitchId public int SwitchId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.LocalSwitchResetPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.LocalSwitchResetPacket.html",
    "title": "Class LocalSwitchResetPacket | PixelPilot",
    "keywords": "Class LocalSwitchResetPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class LocalSwitchResetPacket : IPixelGamePacket Inheritance object LocalSwitchResetPacket Implements IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LocalSwitchResetPacket(int, byte) public LocalSwitchResetPacket(int switchId, byte enabled) Parameters switchId int enabled byte Properties Enabled public bool Enabled { get; } Property Value bool SwitchId public int SwitchId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PingPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PingPacket.html",
    "title": "Class PingPacket | PixelPilot",
    "keywords": "Class PingPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PingPacket : IPixelGamePacket Inheritance object PingPacket Implements IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerChatPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerChatPacket.html",
    "title": "Class PlayerChatPacket | PixelPilot",
    "keywords": "Class PlayerChatPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerChatPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerChatPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerChatPacket(int, string) public PlayerChatPacket(int id, string message) Parameters id int message string Properties Message public string Message { get; } Property Value string PlayerId public int PlayerId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerCrownPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerCrownPacket.html",
    "title": "Class PlayerCrownPacket | PixelPilot",
    "keywords": "Class PlayerCrownPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerCrownPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerCrownPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerCrownPacket(int) public PlayerCrownPacket(int id) Parameters id int Properties PlayerId public int PlayerId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerFacePacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerFacePacket.html",
    "title": "Class PlayerFacePacket | PixelPilot",
    "keywords": "Class PlayerFacePacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerFacePacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerFacePacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerFacePacket(int, int) public PlayerFacePacket(int id, int face) Parameters id int face int Properties Face public int Face { get; } Property Value int PlayerId public int PlayerId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerGodmodePacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerGodmodePacket.html",
    "title": "Class PlayerGodmodePacket | PixelPilot",
    "keywords": "Class PlayerGodmodePacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerGodmodePacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerGodmodePacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerGodmodePacket(int, bool) public PlayerGodmodePacket(int id, bool isEnabled) Parameters id int isEnabled bool Properties IsEnabled public bool IsEnabled { get; } Property Value bool PlayerId public int PlayerId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerJoinPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerJoinPacket.html",
    "title": "Class PlayerJoinPacket | PixelPilot",
    "keywords": "Class PlayerJoinPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerJoinPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerJoinPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerJoinPacket(int, string, string, int, bool, bool, bool, double, double, int, int, int, bool, bool, bool, byte[]) public PlayerJoinPacket(int id, string cuid, string username, int face, bool isAdmin, bool hasGod, bool hasEdit, double x, double y, int coins, int blueCoins, int deaths, bool godmode, bool modmode, bool hasCrown, byte[] buffer) Parameters id int cuid string username string face int isAdmin bool hasGod bool hasEdit bool x double y double coins int blueCoins int deaths int godmode bool modmode bool hasCrown bool buffer byte[] Properties BlueCoins public int BlueCoins { get; } Property Value int Buffer public byte[] Buffer { get; } Property Value byte[] Coins public int Coins { get; } Property Value int Cuid public string Cuid { get; } Property Value string Deaths public int Deaths { get; } Property Value int Face public int Face { get; } Property Value int Godmode public bool Godmode { get; } Property Value bool HasCrown public bool HasCrown { get; } Property Value bool HasEdit public bool HasEdit { get; } Property Value bool HasGod public bool HasGod { get; } Property Value bool IsAdmin public bool IsAdmin { get; } Property Value bool Modmode public bool Modmode { get; } Property Value bool PlayerId public int PlayerId { get; } Property Value int Username public string Username { get; } Property Value string X public double X { get; } Property Value double Y public double Y { get; } Property Value double"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerLeftPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerLeftPacket.html",
    "title": "Class PlayerLeftPacket | PixelPilot",
    "keywords": "Class PlayerLeftPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerLeftPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerLeftPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerLeftPacket(int) public PlayerLeftPacket(int id) Parameters id int Properties PlayerId public int PlayerId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerModMode.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerModMode.html",
    "title": "Class PlayerModMode | PixelPilot",
    "keywords": "Class PlayerModMode Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerModMode : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerModMode Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerModMode(int, bool) public PlayerModMode(int id, bool isEnabled) Parameters id int isEnabled bool Properties IsEnabled public bool IsEnabled { get; } Property Value bool PlayerId public int PlayerId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerMovePacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerMovePacket.html",
    "title": "Class PlayerMovePacket | PixelPilot",
    "keywords": "Class PlayerMovePacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerMovePacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerMovePacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerMovePacket(int, double, double, double, double, double, double, int, int, bool, bool, int) public PlayerMovePacket(int id, double x, double y, double velocityX, double velocityY, double modX, double modY, int horizontal, int vertical, bool spacedown, bool spaceJustDown, int tickId) Parameters id int x double y double velocityX double velocityY double modX double modY double horizontal int vertical int spacedown bool spaceJustDown bool tickId int Properties Horizontal public int Horizontal { get; } Property Value int ModX public double ModX { get; } Property Value double ModY public double ModY { get; } Property Value double PlayerId public int PlayerId { get; } Property Value int SpaceJustDown public bool SpaceJustDown { get; } Property Value bool Spacedown public bool Spacedown { get; } Property Value bool TickId public int TickId { get; } Property Value int VelocityX public double VelocityX { get; } Property Value double VelocityY public double VelocityY { get; } Property Value double Vertical public int Vertical { get; } Property Value int X public double X { get; } Property Value double Y public double Y { get; } Property Value double"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerResetPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerResetPacket.html",
    "title": "Class PlayerResetPacket | PixelPilot",
    "keywords": "Class PlayerResetPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerResetPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerResetPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerResetPacket(int, int, int) public PlayerResetPacket(int id, int x, int y) Parameters id int x int y int Properties PlayerId public int PlayerId { get; } Property Value int X public int X { get; } Property Value int Y public int Y { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerRespawnPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerRespawnPacket.html",
    "title": "Class PlayerRespawnPacket | PixelPilot",
    "keywords": "Class PlayerRespawnPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerRespawnPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerRespawnPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerRespawnPacket(int, int, int) public PlayerRespawnPacket(int id, int x, int y) Parameters id int x int y int Properties PlayerId public int PlayerId { get; } Property Value int X public int X { get; } Property Value int Y public int Y { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerStatsChangePacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerStatsChangePacket.html",
    "title": "Class PlayerStatsChangePacket | PixelPilot",
    "keywords": "Class PlayerStatsChangePacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerStatsChangePacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerStatsChangePacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerStatsChangePacket(int, int, int, int) public PlayerStatsChangePacket(int id, int goldCoins, int blueCoins, int deathCount) Parameters id int goldCoins int blueCoins int deathCount int Properties BlueCoins public int BlueCoins { get; } Property Value int DeathCount public int DeathCount { get; } Property Value int GoldCoins public int GoldCoins { get; } Property Value int PlayerId public int PlayerId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerTeleportedPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerTeleportedPacket.html",
    "title": "Class PlayerTeleportedPacket | PixelPilot",
    "keywords": "Class PlayerTeleportedPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerTeleportedPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerTeleportedPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerTeleportedPacket(int, double, double) public PlayerTeleportedPacket(int id, double x, double y) Parameters id int x double y double Properties PlayerId public int PlayerId { get; } Property Value int X public double X { get; } Property Value double Y public double Y { get; } Property Value double"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.PlayerUpdateRightsPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.PlayerUpdateRightsPacket.html",
    "title": "Class PlayerUpdateRightsPacket | PixelPilot",
    "keywords": "Class PlayerUpdateRightsPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class PlayerUpdateRightsPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object PlayerUpdateRightsPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerUpdateRightsPacket(int, bool, bool) public PlayerUpdateRightsPacket(int id, bool editRights, bool godmode) Parameters id int editRights bool godmode bool Properties EditRights public bool EditRights { get; } Property Value bool Godmode public bool Godmode { get; } Property Value bool PlayerId public int PlayerId { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.SystemMessagePacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.SystemMessagePacket.html",
    "title": "Class SystemMessagePacket | PixelPilot",
    "keywords": "Class SystemMessagePacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class SystemMessagePacket : IPixelGamePacket Inheritance object SystemMessagePacket Implements IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SystemMessagePacket(string, string, bool) public SystemMessagePacket(string prefix, string message, bool magic) Parameters prefix string message string magic bool Properties Magic public bool Magic { get; } Property Value bool Message public string Message { get; } Property Value string Prefix public string Prefix { get; } Property Value string"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.WorldBlockPlacedPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.WorldBlockPlacedPacket.html",
    "title": "Class WorldBlockPlacedPacket | PixelPilot",
    "keywords": "Class WorldBlockPlacedPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class WorldBlockPlacedPacket : IPixelGamePlayerPacket, IPixelGamePacket Inheritance object WorldBlockPlacedPacket Implements IPixelGamePlayerPacket IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WorldBlockPlacedPacket(int, int, int, int, int) public WorldBlockPlacedPacket(int playerId, int x, int y, int layer, int blockId) Parameters playerId int x int y int layer int blockId int WorldBlockPlacedPacket(int, int, int, int, int, byte) public WorldBlockPlacedPacket(int playerId, int x, int y, int layer, int blockId, byte extraByte) Parameters playerId int x int y int layer int blockId int extraByte byte WorldBlockPlacedPacket(int, int, int, int, int, int) public WorldBlockPlacedPacket(int playerId, int x, int y, int layer, int blockId, int extraInt1) Parameters playerId int x int y int layer int blockId int extraInt1 int WorldBlockPlacedPacket(int, int, int, int, int, int, bool) public WorldBlockPlacedPacket(int playerId, int x, int y, int layer, int blockId, int extraInt1, bool extraBool) Parameters playerId int x int y int layer int blockId int extraInt1 int extraBool bool WorldBlockPlacedPacket(int, int, int, int, int, int, byte) public WorldBlockPlacedPacket(int playerId, int x, int y, int layer, int blockId, int extraInt1, byte extraByte) Parameters playerId int x int y int layer int blockId int extraInt1 int extraByte byte WorldBlockPlacedPacket(int, int, int, int, int, int, int, int) public WorldBlockPlacedPacket(int playerId, int x, int y, int layer, int blockId, int extraInt1, int extraInt2, int extraInt3) Parameters playerId int x int y int layer int blockId int extraInt1 int extraInt2 int extraInt3 int Properties BlockId public int BlockId { get; } Property Value int ExtraBool public bool? ExtraBool { get; } Property Value bool? ExtraByte public byte? ExtraByte { get; } Property Value byte? ExtraInt1 public int? ExtraInt1 { get; } Property Value int? ExtraInt2 public int? ExtraInt2 { get; } Property Value int? ExtraInt3 public int? ExtraInt3 { get; } Property Value int? Layer public int Layer { get; } Property Value int PlayerId public int PlayerId { get; } Property Value int X public int X { get; } Property Value int Y public int Y { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.WorldClearedPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.WorldClearedPacket.html",
    "title": "Class WorldClearedPacket | PixelPilot",
    "keywords": "Class WorldClearedPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class WorldClearedPacket : IPixelGamePacket Inheritance object WorldClearedPacket Implements IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.WorldMetaPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.WorldMetaPacket.html",
    "title": "Class WorldMetaPacket | PixelPilot",
    "keywords": "Class WorldMetaPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class WorldMetaPacket : IPixelGamePacket Inheritance object WorldMetaPacket Implements IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WorldMetaPacket(string, int, string) public WorldMetaPacket(string name, int plays, string owner) Parameters name string plays int owner string Properties Name public string Name { get; } Property Value string Owner public string Owner { get; } Property Value string Plays public int Plays { get; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.WorldReloadedPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.WorldReloadedPacket.html",
    "title": "Class WorldReloadedPacket | PixelPilot",
    "keywords": "Class WorldReloadedPacket Namespace PixelPilot.PixelGameClient.Messages.Received Assembly PixelPilot.Core.dll public class WorldReloadedPacket : IPixelGamePacket Inheritance object WorldReloadedPacket Implements IPixelGamePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WorldReloadedPacket(byte[]) public WorldReloadedPacket(byte[] worldData) Parameters worldData byte[] Properties WorldData public byte[] WorldData { get; } Property Value byte[]"
  },
  "api/PixelPilot.PixelGameClient.Messages.Received.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Received.html",
    "title": "Namespace PixelPilot.PixelGameClient.Messages.Received | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.Messages.Received Classes CheckpointPacket Send by the server to force change a checkpoint position. When -1,-1 no checkpoint is set. GlobalSwitchChangedPacket GlobalSwitchResetPacket InitPacket KeyPressedPacket LocalSwitchChangedPacket LocalSwitchResetPacket PingPacket PlayerChatPacket PlayerCrownPacket PlayerFacePacket PlayerGodmodePacket PlayerJoinPacket PlayerLeftPacket PlayerModMode PlayerMovePacket PlayerResetPacket PlayerRespawnPacket PlayerStatsChangePacket PlayerTeleportedPacket PlayerUpdateRightsPacket SystemMessagePacket WorldBlockPlacedPacket WorldClearedPacket WorldMetaPacket WorldReloadedPacket"
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.PlayerChatOutPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.PlayerChatOutPacket.html",
    "title": "Class PlayerChatOutPacket | PixelPilot",
    "keywords": "Class PlayerChatOutPacket Namespace PixelPilot.PixelGameClient.Messages.Send Assembly PixelPilot.Core.dll public class PlayerChatOutPacket : ReflectivePixelOutPacket, IPixelGamePacketOut Inheritance object ReflectivePixelOutPacket PlayerChatOutPacket Implements IPixelGamePacketOut Inherited Members ReflectivePixelOutPacket.messageType ReflectivePixelOutPacket.GetFields(bool) ReflectivePixelOutPacket.GetFields() ReflectivePixelOutPacket.ToBinaryPacket() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerChatOutPacket(string) public PlayerChatOutPacket(string message) Parameters message string Properties Message public string Message { get; set; } Property Value string"
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.PlayerFaceOutPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.PlayerFaceOutPacket.html",
    "title": "Class PlayerFaceOutPacket | PixelPilot",
    "keywords": "Class PlayerFaceOutPacket Namespace PixelPilot.PixelGameClient.Messages.Send Assembly PixelPilot.Core.dll public class PlayerFaceOutPacket : ReflectivePixelOutPacket, IPixelGamePacketOut Inheritance object ReflectivePixelOutPacket PlayerFaceOutPacket Implements IPixelGamePacketOut Inherited Members ReflectivePixelOutPacket.messageType ReflectivePixelOutPacket.GetFields(bool) ReflectivePixelOutPacket.GetFields() ReflectivePixelOutPacket.ToBinaryPacket() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerFaceOutPacket(int) public PlayerFaceOutPacket(int face) Parameters face int Properties Face public int Face { get; set; } Property Value int"
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.PlayerGodmodeOutPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.PlayerGodmodeOutPacket.html",
    "title": "Class PlayerGodmodeOutPacket | PixelPilot",
    "keywords": "Class PlayerGodmodeOutPacket Namespace PixelPilot.PixelGameClient.Messages.Send Assembly PixelPilot.Core.dll public class PlayerGodmodeOutPacket : ReflectivePixelOutPacket, IPixelGamePacketOut Inheritance object ReflectivePixelOutPacket PlayerGodmodeOutPacket Implements IPixelGamePacketOut Inherited Members ReflectivePixelOutPacket.messageType ReflectivePixelOutPacket.GetFields(bool) ReflectivePixelOutPacket.GetFields() ReflectivePixelOutPacket.ToBinaryPacket() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerGodmodeOutPacket(bool) public PlayerGodmodeOutPacket(bool enabled) Parameters enabled bool"
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.PlayerMoveOutPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.PlayerMoveOutPacket.html",
    "title": "Class PlayerMoveOutPacket | PixelPilot",
    "keywords": "Class PlayerMoveOutPacket Namespace PixelPilot.PixelGameClient.Messages.Send Assembly PixelPilot.Core.dll public class PlayerMoveOutPacket : ReflectivePixelOutPacket, IPixelGamePacketOut Inheritance object ReflectivePixelOutPacket PlayerMoveOutPacket Implements IPixelGamePacketOut Inherited Members ReflectivePixelOutPacket.messageType ReflectivePixelOutPacket.GetFields(bool) ReflectivePixelOutPacket.GetFields() ReflectivePixelOutPacket.ToBinaryPacket() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerMoveOutPacket(double, double, double, double, double, double, int, int, bool, bool, int) public PlayerMoveOutPacket(double x, double y, double velocityX, double velocityY, double modX, double modY, int horizontal, int vertical, bool spacedown, bool spaceJustDown, int tick) Parameters x double y double velocityX double velocityY double modX double modY double horizontal int vertical int spacedown bool spaceJustDown bool tick int Properties Horizontal public int Horizontal { get; set; } Property Value int ModX public double ModX { get; set; } Property Value double ModY public double ModY { get; set; } Property Value double SpaceJustDown public bool SpaceJustDown { get; set; } Property Value bool Spacedown public bool Spacedown { get; set; } Property Value bool Tick public int Tick { get; set; } Property Value int VelocityX public double VelocityX { get; set; } Property Value double VelocityY public double VelocityY { get; set; } Property Value double Vertical public int Vertical { get; set; } Property Value int X public double X { get; set; } Property Value double Y public double Y { get; } Property Value double"
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.ReflectivePixelOutPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.ReflectivePixelOutPacket.html",
    "title": "Class ReflectivePixelOutPacket | PixelPilot",
    "keywords": "Class ReflectivePixelOutPacket Namespace PixelPilot.PixelGameClient.Messages.Send Assembly PixelPilot.Core.dll Represents a reflective pixel game packet for outgoing communication. Automatically converts to binary. public class ReflectivePixelOutPacket : IPixelGamePacketOut Inheritance object ReflectivePixelOutPacket Implements IPixelGamePacketOut Derived PlayerChatOutPacket PlayerFaceOutPacket PlayerGodmodeOutPacket PlayerMoveOutPacket WorldBlockPlacedOutPacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReflectivePixelOutPacket(WorldMessageType) public ReflectivePixelOutPacket(WorldMessageType messageType) Parameters messageType WorldMessageType Fields messageType protected WorldMessageType messageType Field Value WorldMessageType Methods GetFields() Gets the fields of the packet. protected virtual List<dynamic> GetFields() Returns List<dynamic> A list of fields. GetFields(bool) Gets the fields of the packet. protected List<dynamic> GetFields(bool allowNull) Parameters allowNull bool Flag to allow null fields. Returns List<dynamic> A list of fields. ToBinaryPacket() public byte[] ToBinaryPacket() Returns byte[]"
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.WorldBlockPlacedOutPacket.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.WorldBlockPlacedOutPacket.html",
    "title": "Class WorldBlockPlacedOutPacket | PixelPilot",
    "keywords": "Class WorldBlockPlacedOutPacket Namespace PixelPilot.PixelGameClient.Messages.Send Assembly PixelPilot.Core.dll public class WorldBlockPlacedOutPacket : ReflectivePixelOutPacket, IPixelGamePacketOut Inheritance object ReflectivePixelOutPacket WorldBlockPlacedOutPacket Implements IPixelGamePacketOut Inherited Members ReflectivePixelOutPacket.messageType ReflectivePixelOutPacket.GetFields(bool) ReflectivePixelOutPacket.ToBinaryPacket() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WorldBlockPlacedOutPacket(int, int, int, int) public WorldBlockPlacedOutPacket(int x, int y, int layer, int blockId) Parameters x int y int layer int blockId int WorldBlockPlacedOutPacket(int, int, int, int, int?) public WorldBlockPlacedOutPacket(int x, int y, int layer, int blockId, int? extraInt1) Parameters x int y int layer int blockId int extraInt1 int? WorldBlockPlacedOutPacket(int, int, int, int, int?, int?, int?, byte?) public WorldBlockPlacedOutPacket(int x, int y, int layer, int blockId, int? extraInt1, int? extraInt2, int? extraInt3, byte? extraByte) Parameters x int y int layer int blockId int extraInt1 int? extraInt2 int? extraInt3 int? extraByte byte? Properties BlockId public int BlockId { get; } Property Value int ExtraByte public byte? ExtraByte { get; } Property Value byte? ExtraInt1 public int? ExtraInt1 { get; } Property Value int? ExtraInt2 public int? ExtraInt2 { get; } Property Value int? ExtraInt3 public int? ExtraInt3 { get; } Property Value int? Layer public int Layer { get; } Property Value int X public int X { get; } Property Value int Y public int Y { get; } Property Value int Methods GetFields() Gets the fields of the packet. protected override List<dynamic> GetFields() Returns List<dynamic> A list of fields."
  },
  "api/PixelPilot.PixelGameClient.Messages.Send.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.Send.html",
    "title": "Namespace PixelPilot.PixelGameClient.Messages.Send | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.Messages.Send Classes PlayerChatOutPacket PlayerFaceOutPacket PlayerGodmodeOutPacket PlayerMoveOutPacket ReflectivePixelOutPacket Represents a reflective pixel game packet for outgoing communication. Automatically converts to binary. WorldBlockPlacedOutPacket"
  },
  "api/PixelPilot.PixelGameClient.Messages.html": {
    "href": "api/PixelPilot.PixelGameClient.Messages.html",
    "title": "Namespace PixelPilot.PixelGameClient.Messages | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.Messages Classes PacketConverter Converts binary data into pixel game packets. Interfaces IPixelGamePacket IPixelGamePacketOut Packets that can be sent to the PixelWalker game server. IPixelGamePlayerPacket Special interface for packets that are triggered by or indicate a status change to a player."
  },
  "api/PixelPilot.PixelGameClient.PixelPilotClient.ClientConnected.html": {
    "href": "api/PixelPilot.PixelGameClient.PixelPilotClient.ClientConnected.html",
    "title": "Delegate PixelPilotClient.ClientConnected | PixelPilot",
    "keywords": "Delegate PixelPilotClient.ClientConnected Namespace PixelPilot.PixelGameClient Assembly PixelPilot.Core.dll public delegate void PixelPilotClient.ClientConnected(object sender) Parameters sender object"
  },
  "api/PixelPilot.PixelGameClient.PixelPilotClient.PacketReceived.html": {
    "href": "api/PixelPilot.PixelGameClient.PixelPilotClient.PacketReceived.html",
    "title": "Delegate PixelPilotClient.PacketReceived | PixelPilot",
    "keywords": "Delegate PixelPilotClient.PacketReceived Namespace PixelPilot.PixelGameClient Assembly PixelPilot.Core.dll public delegate void PixelPilotClient.PacketReceived(object sender, IPixelGamePacket packet) Parameters sender object packet IPixelGamePacket"
  },
  "api/PixelPilot.PixelGameClient.PixelPilotClient.PacketSend.html": {
    "href": "api/PixelPilot.PixelGameClient.PixelPilotClient.PacketSend.html",
    "title": "Delegate PixelPilotClient.PacketSend | PixelPilot",
    "keywords": "Delegate PixelPilotClient.PacketSend Namespace PixelPilot.PixelGameClient Assembly PixelPilot.Core.dll public delegate void PixelPilotClient.PacketSend(object sender, IPixelGamePacketOut packet) Parameters sender object packet IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.PixelPilotClient.html": {
    "href": "api/PixelPilot.PixelGameClient.PixelPilotClient.html",
    "title": "Class PixelPilotClient | PixelPilot",
    "keywords": "Class PixelPilotClient Namespace PixelPilot.PixelGameClient Assembly PixelPilot.Core.dll Client for interacting with the PixelWalker game server. public class PixelPilotClient : IDisposable Inheritance object PixelPilotClient Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PixelPilotClient(string) Create a PixelPilot client using an account token. Automatically reconnects. public PixelPilotClient(string accountToken) Parameters accountToken string A valid account token PixelPilotClient(string, bool) Create a PixelPilot client using an account token. public PixelPilotClient(string accountToken, bool automaticReconnect) Parameters accountToken string A valid account token automaticReconnect bool If the bot should reconnect PixelPilotClient(string, string) Create a PixelPilotClient using the email and password login method. Automatically reconnects. public PixelPilotClient(string email, string password) Parameters email string Valid email password string Valid password PixelPilotClient(string, string, bool) Create a PixelPilotClient using the email and password login method. public PixelPilotClient(string email, string password, bool automaticReconnect) Parameters email string Valid email password string Valid password automaticReconnect bool If the bot should reconnect Fields SecondsBeforeGatewayTimeout public static readonly int SecondsBeforeGatewayTimeout Field Value int Properties AutomaticReconnect Indicates if the client will try to automatically reconnect if the connection gets somehow lost. public bool AutomaticReconnect { get; } Property Value bool BotId The player ID of the client. public int? BotId { get; } Property Value int? IsConnected Indicates if the client is connected. public bool IsConnected { get; } Property Value bool RoomType public string? RoomType { get; } Property Value string Methods Connect(string) Connects to a game room using the specified room type and room ID. public Task Connect(string roomId) Parameters roomId string The ID of the room. Returns Task A task representing the asynchronous operation. Disconnect() Disconnects the socket client gracefully by stopping it with a normal closure status. public Task Disconnect() Returns Task A task representing the asynchronous operation. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Send(IPixelGamePacketOut) Sends a pixel game packet. public void Send(IPixelGamePacketOut packet) Parameters packet IPixelGamePacketOut The pixel game packet to send. Events OnClientConnected Fired once init has been received by the client. public event PixelPilotClient.ClientConnected? OnClientConnected Event Type PixelPilotClient.ClientConnected OnPacketReceived Event that occurs when a packet is received. public event PixelPilotClient.PacketReceived? OnPacketReceived Event Type PixelPilotClient.PacketReceived OnPacketSend Event that occurs when a packet is send. public event PixelPilotClient.PacketSend? OnPacketSend Event Type PixelPilotClient.PacketSend"
  },
  "api/PixelPilot.PixelGameClient.Players.Basic.Player.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.Basic.Player.html",
    "title": "Class Player | PixelPilot",
    "keywords": "Class Player Namespace PixelPilot.PixelGameClient.Players.Basic Assembly PixelPilot.Core.dll public class Player : IPixelPlayer Inheritance object Player Implements IPixelPlayer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Player(PlayerJoinPacket) Construct a new player from the incoming packet. public Player(PlayerJoinPacket packet) Parameters packet PlayerJoinPacket Player(int, string, string, int, bool, double, double, int, int, int, bool, bool, bool, bool, bool) public Player(int id, string accountId, string username, int face, bool isAdmin, double x, double y, int coins, int blueCoins, int deaths, bool godmode, bool modmode, bool hasCrown, bool canGod, bool canEdit) Parameters id int accountId string username string face int isAdmin bool x double y double coins int blueCoins int deaths int godmode bool modmode bool hasCrown bool canGod bool canEdit bool Properties AccountId The account ID of this player. Use this for persistant storage. public string AccountId { get; } Property Value string BlueCoins public int BlueCoins { get; set; } Property Value int CanEdit public bool CanEdit { get; set; } Property Value bool CanGod public bool CanGod { get; set; } Property Value bool Deaths public int Deaths { get; set; } Property Value int Face public int Face { get; set; } Property Value int Godmode public bool Godmode { get; set; } Property Value bool GoldCoins public int GoldCoins { get; set; } Property Value int HasCrown public bool HasCrown { get; set; } Property Value bool Horizontal public int Horizontal { get; set; } Property Value int Id The unique player ID of this player in this world. public int Id { get; } Property Value int IsAdmin public bool IsAdmin { get; } Property Value bool ModX public double ModX { get; set; } Property Value double ModY public double ModY { get; set; } Property Value double Modmode public bool Modmode { get; set; } Property Value bool SpaceJustDown public bool SpaceJustDown { get; set; } Property Value bool Spacedown public bool Spacedown { get; set; } Property Value bool TickId public int TickId { get; set; } Property Value int Username The display name of the player. public string Username { get; } Property Value string VelocityX public double VelocityX { get; set; } Property Value double VelocityY public double VelocityY { get; set; } Property Value double Vertical public int Vertical { get; set; } Property Value int X public double X { get; set; } Property Value double Y public double Y { get; set; } Property Value double"
  },
  "api/PixelPilot.PixelGameClient.Players.Basic.PlayerManager.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.Basic.PlayerManager.html",
    "title": "Class PlayerManager | PixelPilot",
    "keywords": "Class PlayerManager Namespace PixelPilot.PixelGameClient.Players.Basic Assembly PixelPilot.Core.dll Basic implementation of the player manager. public class PlayerManager : PixelPlayerManager<Player> Inheritance object PixelPlayerManager<Player> PlayerManager Inherited Members PixelPlayerManager<Player>.CrownedPlayerId PixelPlayerManager<Player>.ClientId PixelPlayerManager<Player>.OnPrePlayerStatusChange PixelPlayerManager<Player>.OnPlayerStatusChanged PixelPlayerManager<Player>.OnPlayerLeft PixelPlayerManager<Player>.CrownedPlayer PixelPlayerManager<Player>.GetPlayer(int) PixelPlayerManager<Player>.HandlePacket(object, IPixelGamePacket) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreatePlayer(PlayerJoinPacket) Used to create a new instance of IPixelPlayer protected override Player CreatePlayer(PlayerJoinPacket join) Parameters join PlayerJoinPacket The join packet Returns Player A new IPixelPlayer instance"
  },
  "api/PixelPilot.PixelGameClient.Players.Basic.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.Basic.html",
    "title": "Namespace PixelPilot.PixelGameClient.Players.Basic | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.Players.Basic Classes Player PlayerManager Basic implementation of the player manager."
  },
  "api/PixelPilot.PixelGameClient.Players.IPixelPlayer.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.IPixelPlayer.html",
    "title": "Interface IPixelPlayer | PixelPilot",
    "keywords": "Interface IPixelPlayer Namespace PixelPilot.PixelGameClient.Players Assembly PixelPilot.Core.dll public interface IPixelPlayer Properties AccountId The account ID of this player. Use this for persistant storage. string AccountId { get; } Property Value string BlueCoins int BlueCoins { get; set; } Property Value int CanEdit bool CanEdit { get; set; } Property Value bool CanGod bool CanGod { get; set; } Property Value bool Deaths int Deaths { get; set; } Property Value int Face int Face { get; set; } Property Value int Godmode bool Godmode { get; set; } Property Value bool GoldCoins int GoldCoins { get; set; } Property Value int HasCrown bool HasCrown { get; set; } Property Value bool Horizontal int Horizontal { get; set; } Property Value int Id The unique player ID of this player in this world. int Id { get; } Property Value int IsAdmin bool IsAdmin { get; } Property Value bool ModX double ModX { get; set; } Property Value double ModY double ModY { get; set; } Property Value double Modmode bool Modmode { get; set; } Property Value bool SpaceJustDown bool SpaceJustDown { get; set; } Property Value bool Spacedown bool Spacedown { get; set; } Property Value bool TickId int TickId { get; set; } Property Value int Username The display name of the player. string Username { get; } Property Value string VelocityX double VelocityX { get; set; } Property Value double VelocityY double VelocityY { get; set; } Property Value double Vertical int Vertical { get; set; } Property Value int X double X { get; set; } Property Value double Y double Y { get; set; } Property Value double"
  },
  "api/PixelPilot.PixelGameClient.Players.PixelPlayerManager-1.PlayerLeft.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.PixelPlayerManager-1.PlayerLeft.html",
    "title": "Delegate PixelPlayerManager<T>.PlayerLeft | PixelPilot",
    "keywords": "Delegate PixelPlayerManager<T>.PlayerLeft Namespace PixelPilot.PixelGameClient.Players Assembly PixelPilot.Core.dll public delegate void PixelPlayerManager<T>.PlayerLeft(object sender, T player) Parameters sender object player T"
  },
  "api/PixelPilot.PixelGameClient.Players.PixelPlayerManager-1.PlayerStatusChanged.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.PixelPlayerManager-1.PlayerStatusChanged.html",
    "title": "Delegate PixelPlayerManager<T>.PlayerStatusChanged | PixelPilot",
    "keywords": "Delegate PixelPlayerManager<T>.PlayerStatusChanged Namespace PixelPilot.PixelGameClient.Players Assembly PixelPilot.Core.dll public delegate void PixelPlayerManager<T>.PlayerStatusChanged(object sender, T player) Parameters sender object player T"
  },
  "api/PixelPilot.PixelGameClient.Players.PixelPlayerManager-1.PrePlayerStatusChange.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.PixelPlayerManager-1.PrePlayerStatusChange.html",
    "title": "Delegate PixelPlayerManager<T>.PrePlayerStatusChange | PixelPilot",
    "keywords": "Delegate PixelPlayerManager<T>.PrePlayerStatusChange Namespace PixelPilot.PixelGameClient.Players Assembly PixelPilot.Core.dll public delegate void PixelPlayerManager<T>.PrePlayerStatusChange(object sender, T player, IPixelGamePlayerPacket packet) Parameters sender object player T packet IPixelGamePlayerPacket"
  },
  "api/PixelPilot.PixelGameClient.Players.PixelPlayerManager-1.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.PixelPlayerManager-1.html",
    "title": "Class PixelPlayerManager<T> | PixelPilot",
    "keywords": "Class PixelPlayerManager<T> Namespace PixelPilot.PixelGameClient.Players Assembly PixelPilot.Core.dll Class that handles players in a world. Automatically updates the players stats. public abstract class PixelPlayerManager<T> where T : IPixelPlayer Type Parameters T Class that handles players in a world. Automatically updates the players stats. Inheritance object PixelPlayerManager<T> Derived PlayerManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ClientId public int ClientId { get; } Property Value int CrownedPlayer public T? CrownedPlayer { get; } Property Value T CrownedPlayerId public int CrownedPlayerId { get; } Property Value int Methods CreatePlayer(PlayerJoinPacket) Used to create a new instance of IPixelPlayer protected abstract T CreatePlayer(PlayerJoinPacket join) Parameters join PlayerJoinPacket The join packet Returns T A new IPixelPlayer instance GetPlayer(int) Get the player based on it's ID. Returns NULL if no player was found. public T? GetPlayer(int id) Parameters id int The player ID Returns T A IPixelPlayer or NULL HandlePacket(object, IPixelGamePacket) Method that can receive packets and handle them accordingly. Should update the player state and fire relevant events. public void HandlePacket(object sender, IPixelGamePacket packet) Parameters sender object The packet sender packet IPixelGamePacket The packet Events OnPlayerLeft Fired when a player leaves the world. public event PixelPlayerManager<T>.PlayerLeft? OnPlayerLeft Event Type PixelPlayerManager<T>.PlayerLeft OnPlayerStatusChanged Fired once the players properties have been updated. public event PixelPlayerManager<T>.PlayerStatusChanged? OnPlayerStatusChanged Event Type PixelPlayerManager<T>.PlayerStatusChanged OnPrePlayerStatusChange Fired before the player properties are changed. public event PixelPlayerManager<T>.PrePlayerStatusChange? OnPrePlayerStatusChange Event Type PixelPlayerManager<T>.PrePlayerStatusChange"
  },
  "api/PixelPilot.PixelGameClient.Players.html": {
    "href": "api/PixelPilot.PixelGameClient.Players.html",
    "title": "Namespace PixelPilot.PixelGameClient.Players | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.Players Classes PixelPlayerManager<T> Class that handles players in a world. Automatically updates the players stats. Interfaces IPixelPlayer Delegates PixelPlayerManager<T>.PlayerLeft PixelPlayerManager<T>.PlayerStatusChanged PixelPlayerManager<T>.PrePlayerStatusChange"
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.ActivatorBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.ActivatorBlock.html",
    "title": "Class ActivatorBlock | PixelPilot",
    "keywords": "Class ActivatorBlock Namespace PixelPilot.PixelGameClient.World.Blocks Assembly PixelPilot.Core.dll public class ActivatorBlock : BasicBlock, IPixelBlock Inheritance object BasicBlock ActivatorBlock Implements IPixelBlock Inherited Members BasicBlock.BlockId BasicBlock.AsPlacedBlock(int, int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ActivatorBlock(int, int, bool) public ActivatorBlock(int blockId, int switchId, bool status) Parameters blockId int switchId int status bool Properties Status public bool Status { get; set; } Property Value bool SwitchId public int SwitchId { get; set; } Property Value int Methods AsPacketOut(int, int, int) public override IPixelGamePacketOut AsPacketOut(int x, int y, int layer) Parameters x int y int layer int Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.BasicBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.BasicBlock.html",
    "title": "Class BasicBlock | PixelPilot",
    "keywords": "Class BasicBlock Namespace PixelPilot.PixelGameClient.World.Blocks Assembly PixelPilot.Core.dll Basic blocks only have a block ID. No special data can be assigned to them. public class BasicBlock : IPixelBlock Inheritance object BasicBlock Implements IPixelBlock Derived ActivatorBlock MorphableBlock PortalBlock ResetterBlock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BasicBlock(int) public BasicBlock(int blockId) Parameters blockId int Properties BlockId public int BlockId { get; set; } Property Value int Methods AsPacketOut(int, int, int) public virtual IPixelGamePacketOut AsPacketOut(int x, int y, int layer) Parameters x int y int layer int Returns IPixelGamePacketOut AsPlacedBlock(int, int, int) public IPlacedBlock AsPlacedBlock(int x, int y, int layer) Parameters x int y int layer int Returns IPlacedBlock"
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.IPixelBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.IPixelBlock.html",
    "title": "Interface IPixelBlock | PixelPilot",
    "keywords": "Interface IPixelBlock Namespace PixelPilot.PixelGameClient.World.Blocks Assembly PixelPilot.Core.dll Generic interface for blocks. Every block has atleast these properties. public interface IPixelBlock Properties Block PixelBlock Block { get; } Property Value PixelBlock BlockId int BlockId { get; } Property Value int Methods AsPacketOut(int, int, int) IPixelGamePacketOut AsPacketOut(int x, int y, int layer) Parameters x int y int layer int Returns IPixelGamePacketOut AsPlacedBlock(int, int, int) IPlacedBlock AsPlacedBlock(int x, int y, int layer) Parameters x int y int layer int Returns IPlacedBlock"
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.MorphableBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.MorphableBlock.html",
    "title": "Class MorphableBlock | PixelPilot",
    "keywords": "Class MorphableBlock Namespace PixelPilot.PixelGameClient.World.Blocks Assembly PixelPilot.Core.dll Morphable blocks include blocks with multiple states. This includes decorations but also coin doors, gates, etc. public class MorphableBlock : BasicBlock, IPixelBlock Inheritance object BasicBlock MorphableBlock Implements IPixelBlock Inherited Members BasicBlock.BlockId BasicBlock.AsPlacedBlock(int, int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MorphableBlock(int, int) public MorphableBlock(int blockId, int morph) Parameters blockId int morph int Properties Morph public int Morph { get; set; } Property Value int Methods AsPacketOut(int, int, int) public override IPixelGamePacketOut AsPacketOut(int x, int y, int layer) Parameters x int y int layer int Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.Placed.IPlacedBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.Placed.IPlacedBlock.html",
    "title": "Interface IPlacedBlock | PixelPilot",
    "keywords": "Interface IPlacedBlock Namespace PixelPilot.PixelGameClient.World.Blocks.Placed Assembly PixelPilot.Core.dll A placed block has a location assigned to it. This wrapper is used by API methods where the block in question is placed in some kind of way. public interface IPlacedBlock Properties Block IPixelBlock Block { get; } Property Value IPixelBlock Layer int Layer { get; } Property Value int X int X { get; } Property Value int Y int Y { get; } Property Value int Methods AsPacketOut() IPixelGamePacketOut AsPacketOut() Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.Placed.PlacedBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.Placed.PlacedBlock.html",
    "title": "Class PlacedBlock | PixelPilot",
    "keywords": "Class PlacedBlock Namespace PixelPilot.PixelGameClient.World.Blocks.Placed Assembly PixelPilot.Core.dll An immutable instance of a IPlacedBlock public class PlacedBlock : IPlacedBlock Inheritance object PlacedBlock Implements IPlacedBlock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlacedBlock(int, int, int, IPixelBlock) public PlacedBlock(int x, int y, int layer, IPixelBlock block) Parameters x int y int layer int block IPixelBlock Properties Block public IPixelBlock Block { get; } Property Value IPixelBlock Layer public int Layer { get; } Property Value int PlacedUserId public int? PlacedUserId { get; } Property Value int? X public int X { get; } Property Value int Y public int Y { get; } Property Value int Methods AsPacketOut() public IPixelGamePacketOut AsPacketOut() Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.Placed.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.Placed.html",
    "title": "Namespace PixelPilot.PixelGameClient.World.Blocks.Placed | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.World.Blocks.Placed Classes PlacedBlock An immutable instance of a IPlacedBlock Interfaces IPlacedBlock A placed block has a location assigned to it. This wrapper is used by API methods where the block in question is placed in some kind of way."
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.PortalBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.PortalBlock.html",
    "title": "Class PortalBlock | PixelPilot",
    "keywords": "Class PortalBlock Namespace PixelPilot.PixelGameClient.World.Blocks Assembly PixelPilot.Core.dll public class PortalBlock : BasicBlock, IPixelBlock Inheritance object BasicBlock PortalBlock Implements IPixelBlock Inherited Members BasicBlock.BlockId BasicBlock.AsPlacedBlock(int, int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PortalBlock(int, int, int, int) public PortalBlock(int blockId, int portalId, int targetId, int direction) Parameters blockId int portalId int targetId int direction int Properties Direction public int Direction { get; set; } Property Value int PortalId public int PortalId { get; set; } Property Value int TargetId public int TargetId { get; set; } Property Value int Methods AsPacketOut(int, int, int) public override IPixelGamePacketOut AsPacketOut(int x, int y, int layer) Parameters x int y int layer int Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.ResetterBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.ResetterBlock.html",
    "title": "Class ResetterBlock | PixelPilot",
    "keywords": "Class ResetterBlock Namespace PixelPilot.PixelGameClient.World.Blocks Assembly PixelPilot.Core.dll public class ResetterBlock : BasicBlock, IPixelBlock Inheritance object BasicBlock ResetterBlock Implements IPixelBlock Inherited Members BasicBlock.BlockId BasicBlock.AsPlacedBlock(int, int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ResetterBlock(int, bool) public ResetterBlock(int blockId, bool activated) Parameters blockId int activated bool Properties Status public bool Status { get; } Property Value bool Methods AsPacketOut(int, int, int) public override IPixelGamePacketOut AsPacketOut(int x, int y, int layer) Parameters x int y int layer int Returns IPixelGamePacketOut"
  },
  "api/PixelPilot.PixelGameClient.World.Blocks.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Blocks.html",
    "title": "Namespace PixelPilot.PixelGameClient.World.Blocks | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.World.Blocks Classes ActivatorBlock BasicBlock Basic blocks only have a block ID. No special data can be assigned to them. MorphableBlock Morphable blocks include blocks with multiple states. This includes decorations but also coin doors, gates, etc. PortalBlock ResetterBlock Interfaces IPixelBlock Generic interface for blocks. Every block has atleast these properties."
  },
  "api/PixelPilot.PixelGameClient.World.Constants.BlockType.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Constants.BlockType.html",
    "title": "Enum BlockType | PixelPilot",
    "keywords": "Enum BlockType Namespace PixelPilot.PixelGameClient.World.Constants Assembly PixelPilot.Core.dll General category for block types. public enum BlockType Extension Methods PixelBlockExtensions.GetPacketFieldTypes(BlockType) Fields Morphable = 1 Normal = 0 Portal = 2 SwitchActivator = 3 SwitchResetter = 4"
  },
  "api/PixelPilot.PixelGameClient.World.Constants.PixelBlock.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Constants.PixelBlock.html",
    "title": "Enum PixelBlock | PixelPilot",
    "keywords": "Enum PixelBlock Namespace PixelPilot.PixelGameClient.World.Constants Assembly PixelPilot.Core.dll All blocks available in the game as of 29-04-2024. public enum PixelBlock Extension Methods PixelBlockExtensions.GetBlockType(PixelBlock) Fields BasicBlack = 50 BasicBlackBg = 60 BasicBlue = 56 BasicBlueBg = 66 BasicCyan = 55 BasicCyanBg = 65 BasicGray = 49 BasicGrayBg = 59 BasicGreen = 54 BasicGreenBg = 64 BasicMagenta = 57 BasicMagentaBg = 67 BasicOrange = 52 BasicOrangeBg = 62 BasicRed = 51 BasicRedBg = 61 BasicWhite = 48 BasicWhiteBg = 58 BasicYellow = 53 BasicYellowBg = 63 BeachDryBush = 206 BeachParasol = 202 BeachRock = 205 BeachSand = 201 BeachSandPileLeft = 204 BeachSandPileRight = 203 BeveledBlack = 70 BeveledBlue = 76 BeveledCyan = 75 BeveledGray = 69 BeveledGreen = 74 BeveledMagenta = 77 BeveledOrange = 72 BeveledRed = 71 BeveledWhite = 68 BeveledYellow = 73 BlackBlock = 146 BlueCoin = 13 BlueCoinDoor = 27 BlueCoinGate = 32 BoostDown = 10 BoostLeft = 7 BoostRight = 9 BoostUp = 8 BricksBlack = 80 BricksBlackBg = 90 BricksBlue = 86 BricksBlueBg = 96 BricksBrown = 82 BricksBrownBg = 92 BricksGrass = 136 BricksGrassLeftEdge = 137 BricksGrassRightEdge = 138 BricksGray = 79 BricksGrayBg = 89 BricksGreen = 84 BricksGreenBg = 94 BricksOlive = 83 BricksOliveBg = 93 BricksPurple = 87 BricksPurpleBg = 97 BricksRed = 81 BricksRedBg = 91 BricksTeal = 85 BricksTealBg = 95 BricksWhite = 78 BricksWhiteBg = 88 CandyBlue = 186 CandyBlueBg = 200 CandyCane = 191 CandyChocolate = 193 CandyCreamLarge = 195 CandyCreamSmall = 194 CandyGumdropGreen = 197 CandyGumdropPink = 198 CandyGumdropRed = 196 CandyLicorice = 192 CandyPink = 185 CandyPinkBg = 199 CandyPlatformCyan = 189 CandyPlatformGreen = 190 CandyPlatformPink = 187 CandyPlatformRed = 188 CheckerBlackBg = 120 CheckerBlueBg = 126 CheckerCyanBg = 125 CheckerGrayBg = 119 CheckerGreenBg = 124 CheckerMagentaBg = 127 CheckerOrangeBg = 122 CheckerRedBg = 121 CheckerWhiteBg = 118 CheckerYellowBg = 123 Checkpoint = 15 Coin = 12 CoinDoor = 26 CoinGate = 31 Crown = 11 DarkBlackBg = 110 DarkBlueBg = 116 DarkCyanBg = 115 DarkGrayBg = 109 DarkGreenBg = 114 DarkHazardStripes = 143 DarkMagentaBg = 117 DarkOrangeBg = 112 DarkRedBg = 111 DarkWhiteBg = 108 DarkYellowBg = 113 DeathDoor = 43 DeathGate = 44 EasterEggBlue = 180 EasterEggGreen = 184 EasterEggPink = 181 EasterEggRed = 183 EasterEggYellow = 182 Empty = 0 FaceBlock = 144 FactoryMetalCrate = 167 FactoryScales = 171 FactoryStone = 168 FactoryWood = 169 FactoryWoodenCrate = 170 Fire = 47 FullBlackBlock = 147 GlassBlue = 156 GlassCyan = 155 GlassGreen = 154 GlassMagenta = 158 GlassOrange = 152 GlassPurple = 157 GlassRed = 151 GlassYellow = 153 GlobalSwitch = 38 GlobalSwitchActivator = 39 GlobalSwitchDoor = 41 GlobalSwitchGate = 42 GlobalSwitchResetter = 40 GravityDot = 5 GravityDown = 4 GravityLeft = 1 GravityRight = 3 GravitySlowDot = 6 GravityUp = 2 HazardStripes = 142 KeyBlue = 22 KeyDoorBlue = 25 KeyDoorGreen = 24 KeyDoorRed = 23 KeyGateBlue = 30 KeyGateGreen = 29 KeyGateRed = 28 KeyGreen = 21 KeyRed = 20 LocalSwitch = 33 LocalSwitchActivator = 34 LocalSwitchDoor = 36 LocalSwitchGate = 37 LocalSwitchResetter = 35 MeadowBushLeft = 175 MeadowBushMiddle = 176 MeadowBushRight = 177 MeadowGrassLeft = 172 MeadowGrassMiddle = 173 MeadowGrassRight = 174 MeadowSmallBush = 179 MeadowYellowFlower = 178 MetalCopper = 140 MetalGold = 141 MetalSilver = 139 MineralsBlue = 164 MineralsCyan = 163 MineralsGreen = 162 MineralsMagenta = 166 MineralsOrange = 160 MineralsPurple = 165 MineralsRed = 159 MineralsYellow = 161 NoFaceBlock = 145 NormalBlackBg = 100 NormalBlueBg = 106 NormalCyanBg = 105 NormalGrayBg = 99 NormalGreenBg = 104 NormalMagentaBg = 107 NormalOrangeBg = 102 NormalRedBg = 101 NormalWhiteBg = 98 NormalYellowBg = 103 PastelBlueBg = 134 PastelCyanBg = 133 PastelGreenBg = 132 PastelLimeBg = 131 PastelOrangeBg = 129 PastelPurpleBg = 135 PastelRedBg = 128 PastelYellowBg = 130 Portal = 16 PortalInvisible = 17 SecretAppear = 148 SecretDisappear = 149 SecretInvisible = 150 SpawnPoint = 14 Spikes = 45 SpikesCenter = 46 Water = 18 WaterSurface = 19"
  },
  "api/PixelPilot.PixelGameClient.World.Constants.PixelBlockExtensions.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Constants.PixelBlockExtensions.html",
    "title": "Class PixelBlockExtensions | PixelPilot",
    "keywords": "Class PixelBlockExtensions Namespace PixelPilot.PixelGameClient.World.Constants Assembly PixelPilot.Core.dll public static class PixelBlockExtensions Inheritance object PixelBlockExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBlockType(PixelBlock) public static BlockType GetBlockType(this PixelBlock pixelBlock) Parameters pixelBlock PixelBlock Returns BlockType GetPacketFieldTypes(BlockType) public static PacketFieldType[] GetPacketFieldTypes(this BlockType blockType) Parameters blockType BlockType Returns PacketFieldType[]"
  },
  "api/PixelPilot.PixelGameClient.World.Constants.WorldLayer.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Constants.WorldLayer.html",
    "title": "Enum WorldLayer | PixelPilot",
    "keywords": "Enum WorldLayer Namespace PixelPilot.PixelGameClient.World.Constants Assembly PixelPilot.Core.dll All available world layers. public enum WorldLayer Fields Background = 0 Foreground = 1"
  },
  "api/PixelPilot.PixelGameClient.World.Constants.html": {
    "href": "api/PixelPilot.PixelGameClient.World.Constants.html",
    "title": "Namespace PixelPilot.PixelGameClient.World.Constants | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.World.Constants Classes PixelBlockExtensions Enums BlockType General category for block types. PixelBlock All blocks available in the game as of 29-04-2024. WorldLayer All available world layers."
  },
  "api/PixelPilot.PixelGameClient.World.PixelWorld.BlockPlaced.html": {
    "href": "api/PixelPilot.PixelGameClient.World.PixelWorld.BlockPlaced.html",
    "title": "Delegate PixelWorld.BlockPlaced | PixelPilot",
    "keywords": "Delegate PixelWorld.BlockPlaced Namespace PixelPilot.PixelGameClient.World Assembly PixelPilot.Core.dll Represents a delegate for the BlockPlaced event. public delegate void PixelWorld.BlockPlaced(object sender, int userId, IPlacedBlock oldBlock, IPlacedBlock newBlock) Parameters sender object The object that triggered the event. userId int The ID of the user who placed the block. oldBlock IPlacedBlock The previous state of the block. newBlock IPlacedBlock The new state of the block after being placed. Includes X, Y, Layer."
  },
  "api/PixelPilot.PixelGameClient.World.PixelWorld.html": {
    "href": "api/PixelPilot.PixelGameClient.World.PixelWorld.html",
    "title": "Class PixelWorld | PixelPilot",
    "keywords": "Class PixelWorld Namespace PixelPilot.PixelGameClient.World Assembly PixelPilot.Core.dll Represents the 'world' in PixelWalker. The world includes blocks, switches and other things that can be placed or interacted with. This does not include players! public class PixelWorld Inheritance object PixelWorld Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PixelWorld() public PixelWorld() PixelWorld(InitPacket) public PixelWorld(InitPacket initPacket) Parameters initPacket InitPacket PixelWorld(int, int) public PixelWorld(int height, int width) Parameters height int width int Properties Height public int Height { get; } Property Value int Width public int Width { get; } Property Value int Methods BlockAt(WorldLayer, int, int) Gets the block at the specified point. public IPixelBlock BlockAt(WorldLayer layer, int x, int y) Parameters layer WorldLayer Layer x int X y int Y Returns IPixelBlock The block BlockAt(int, int, int) Gets the block at the specified point. public IPixelBlock BlockAt(int layer, int x, int y) Parameters layer int Layer x int X y int Y Returns IPixelBlock The block DeserializeBlock(WorldBlockPlacedPacket) Deserializes a WorldBlockPlacedPacket into an IPixelBlock object. This conversion loses information about where, or by who, a block was placed. public static IPixelBlock DeserializeBlock(WorldBlockPlacedPacket packet) Parameters packet WorldBlockPlacedPacket The WorldBlockPlacedPacket to deserialize. Returns IPixelBlock An IPlacedBlock object representing the deserialized packet but without location data. Exceptions NotImplementedException If the type has not been implemented yet. DeserializeBlock(BinaryReader) Desterialize a blok public static IPixelBlock DeserializeBlock(BinaryReader reader) Parameters reader BinaryReader Memory stream reader Returns IPixelBlock The block Exceptions ArgumentOutOfRangeException Only when implementation is missing DeserializePlacedBlock(WorldBlockPlacedPacket) Deserializes a WorldBlockPlacedPacket into an IPlacedBlock object. public static IPlacedBlock DeserializePlacedBlock(WorldBlockPlacedPacket packet) Parameters packet WorldBlockPlacedPacket The WorldBlockPlacedPacket to deserialize. Returns IPlacedBlock An IPlacedBlock object representing the deserialized packet. Exceptions NotImplementedException If the type has not been implemented yet. HandlePacket(object, IPixelGamePacket) Utility method that can attached to the client. This allows for an easy hook without having to write this each time. public void HandlePacket(object sender, IPixelGamePacket packet) Parameters sender object The sender packet IPixelGamePacket The incoming packet Init(byte[]) Initialize the world using a byte[]. public void Init(byte[] buffer) Parameters buffer byte[] Exceptions Exception Events OnBlockPlaced Fired once init has been received by the client. The public event PixelWorld.BlockPlaced? OnBlockPlaced Event Type PixelWorld.BlockPlaced"
  },
  "api/PixelPilot.PixelGameClient.World.html": {
    "href": "api/PixelPilot.PixelGameClient.World.html",
    "title": "Namespace PixelPilot.PixelGameClient.World | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient.World Classes PixelWorld Represents the 'world' in PixelWalker. The world includes blocks, switches and other things that can be placed or interacted with. This does not include players! Delegates PixelWorld.BlockPlaced Represents a delegate for the BlockPlaced event."
  },
  "api/PixelPilot.PixelGameClient.html": {
    "href": "api/PixelPilot.PixelGameClient.html",
    "title": "Namespace PixelPilot.PixelGameClient | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelGameClient Classes PixelPilotClient Client for interacting with the PixelWalker game server. Delegates PixelPilotClient.ClientConnected PixelPilotClient.PacketReceived PixelPilotClient.PacketSend"
  },
  "api/PixelPilot.PixelHttpClient.PixelApiClient.html": {
    "href": "api/PixelPilot.PixelHttpClient.PixelApiClient.html",
    "title": "Class PixelApiClient | PixelPilot",
    "keywords": "Class PixelApiClient Namespace PixelPilot.PixelHttpClient Assembly PixelPilot.Core.dll Used to make HTTP API request instead of using the websocket. Required for obtaining information used to join a world. public class PixelApiClient : IDisposable Inheritance object PixelApiClient Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PixelApiClient(string) PixelApiClient that authenticates using a token. Does not verify validity. public PixelApiClient(string accountToken) Parameters accountToken string A valid account token PixelApiClient(string, string) PixelApiClient that authenticates using email and password. public PixelApiClient(string email, string password) Parameters email string User e-mail password string User password Exceptions PixelApiException When the login failed InvalidOperationException Something went very wrong Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() GetAuth(string, string) public Task<IAuthResponse> GetAuth(string email, string password) Parameters email string password string Returns Task<IAuthResponse> GetJoinKey(string, string) Request a join key for the given room from the API server. public Task<JoinKeyResponse?> GetJoinKey(string roomType, string roomId) Parameters roomType string The room type roomId string ID of the room Returns Task<JoinKeyResponse> GetMappings() Retrieves the mappings from the game API. public Task<MappingsResponse?> GetMappings() Returns Task<MappingsResponse> A MappingsResponse containing the mappings, or null if the mappings are not available. GetRoomTypes() Request the available room types from the game server. public Task<List<string>?> GetRoomTypes() Returns Task<List<string>> A list of room types"
  },
  "api/PixelPilot.PixelHttpClient.PixelApiException.html": {
    "href": "api/PixelPilot.PixelHttpClient.PixelApiException.html",
    "title": "Class PixelApiException | PixelPilot",
    "keywords": "Class PixelApiException Namespace PixelPilot.PixelHttpClient Assembly PixelPilot.Core.dll public class PixelApiException : Exception, ISerializable Inheritance object Exception PixelApiException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PixelApiException(string) public PixelApiException(string msg) Parameters msg string"
  },
  "api/PixelPilot.PixelHttpClient.Responses.Auth.AuthErrorResponse.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.Auth.AuthErrorResponse.html",
    "title": "Class AuthErrorResponse | PixelPilot",
    "keywords": "Class AuthErrorResponse Namespace PixelPilot.PixelHttpClient.Responses.Auth Assembly PixelPilot.Core.dll public class AuthErrorResponse : IAuthResponse Inheritance object AuthErrorResponse Implements IAuthResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Code [JsonPropertyName(\"code\")] public int Code { get; set; } Property Value int Message [JsonPropertyName(\"message\")] public string Message { get; set; } Property Value string"
  },
  "api/PixelPilot.PixelHttpClient.Responses.Auth.AuthSuccessResponse.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.Auth.AuthSuccessResponse.html",
    "title": "Class AuthSuccessResponse | PixelPilot",
    "keywords": "Class AuthSuccessResponse Namespace PixelPilot.PixelHttpClient.Responses.Auth Assembly PixelPilot.Core.dll public class AuthSuccessResponse : IAuthResponse Inheritance object AuthSuccessResponse Implements IAuthResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data [JsonPropertyName(\"record\")] public PlayerData Data { get; set; } Property Value PlayerData Token [JsonPropertyName(\"token\")] public string Token { get; set; } Property Value string"
  },
  "api/PixelPilot.PixelHttpClient.Responses.Auth.IAuthResponse.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.Auth.IAuthResponse.html",
    "title": "Interface IAuthResponse | PixelPilot",
    "keywords": "Interface IAuthResponse Namespace PixelPilot.PixelHttpClient.Responses.Auth Assembly PixelPilot.Core.dll public interface IAuthResponse"
  },
  "api/PixelPilot.PixelHttpClient.Responses.Auth.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.Auth.html",
    "title": "Namespace PixelPilot.PixelHttpClient.Responses.Auth | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelHttpClient.Responses.Auth Classes AuthErrorResponse AuthSuccessResponse Interfaces IAuthResponse"
  },
  "api/PixelPilot.PixelHttpClient.Responses.JoinKeyResponse.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.JoinKeyResponse.html",
    "title": "Class JoinKeyResponse | PixelPilot",
    "keywords": "Class JoinKeyResponse Namespace PixelPilot.PixelHttpClient.Responses Assembly PixelPilot.Core.dll public class JoinKeyResponse Inheritance object JoinKeyResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Token [JsonPropertyName(\"token\")] public string Token { get; set; } Property Value string"
  },
  "api/PixelPilot.PixelHttpClient.Responses.MappingsResponse.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.MappingsResponse.html",
    "title": "Class MappingsResponse | PixelPilot",
    "keywords": "Class MappingsResponse Namespace PixelPilot.PixelHttpClient.Responses Assembly PixelPilot.Core.dll public class MappingsResponse Inheritance object MappingsResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MappingsResponse(Dictionary<string, int>) public MappingsResponse(Dictionary<string, int> mappings) Parameters mappings Dictionary<string, int> Properties mappings public Dictionary<string, int> mappings { get; } Property Value Dictionary<string, int> Methods AsEnumEntries() Method used to quickly generate a ENUM like mapping from the entries. public List<string> AsEnumEntries() Returns List<string>"
  },
  "api/PixelPilot.PixelHttpClient.Responses.PlayerData.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.PlayerData.html",
    "title": "Class PlayerData | PixelPilot",
    "keywords": "Class PlayerData Namespace PixelPilot.PixelHttpClient.Responses Assembly PixelPilot.Core.dll public class PlayerData Inheritance object PlayerData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Admin [JsonPropertyName(\"admin\")] public bool Admin { get; set; } Property Value bool Banned [JsonPropertyName(\"banned\")] public bool Banned { get; set; } Property Value bool Face [JsonPropertyName(\"face\")] public int Face { get; set; } Property Value int Username [JsonPropertyName(\"username\")] public string Username { get; set; } Property Value string"
  },
  "api/PixelPilot.PixelHttpClient.Responses.html": {
    "href": "api/PixelPilot.PixelHttpClient.Responses.html",
    "title": "Namespace PixelPilot.PixelHttpClient.Responses | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelHttpClient.Responses Classes JoinKeyResponse MappingsResponse PlayerData"
  },
  "api/PixelPilot.PixelHttpClient.html": {
    "href": "api/PixelPilot.PixelHttpClient.html",
    "title": "Namespace PixelPilot.PixelHttpClient | PixelPilot",
    "keywords": "Namespace PixelPilot.PixelHttpClient Classes PixelApiClient Used to make HTTP API request instead of using the websocket. Required for obtaining information used to join a world. PixelApiException"
  },
  "api/PixelPilot.html": {
    "href": "api/PixelPilot.html",
    "title": "Namespace PixelPilot | PixelPilot",
    "keywords": "Namespace PixelPilot Classes LogManager The LogManager class provides static access to loggers though the project."
  },
  "guides/getting_started/extra_topics.html": {
    "href": "guides/getting_started/extra_topics.html",
    "title": "Logging | PixelPilot",
    "keywords": "Extra topics This article covers some of the mics features of PixelPilot.Core. Configuration It's highly recommended that you don't store your token, username and or password in your code. Rather opt for using a configuration file or .ENV variables instead. Start by creating a config.json in your project. Ignore the logging part for now. It will be used in a later section of this guide. { \"AccountToken\": \"Secret key value if you want to use the token login\", \"LoginEmail\": \"Email\", \"LoginPassword\": \"Password\", \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"PixelPilot.API\": \"Information\", \"PixelPilot.Client\": \"Information\", \"PixelPilot.World\": \"Information\", \"PixelPilot.PacketConverter\": \"Information\", \"Microsoft\": \"Warning\", \"Microsoft.Hosting.Lifetime\": \"Information\" } } } Create class the values can be mapped to: public class BasicConfig { public string AccountToken { get; set; } = null!; public string AccountEmail { get; set; } = null!; public string AccountPassword { get; set; } = null!; } Initialize the configuration in your bot: var config = configuration.Get<BasicConfig>(); if (config == null) { Console.WriteLine(\"The configuration file could not be loaded.\"); return; } You can now use config.Token to retrieve your token! Logging PixelPilot uses the default logger provided with C#. In order to configure it you can use the following code snippet. Note that this example uses the config.json from the previous step. LogManager.Configure(configuration.GetSection(\"Logging\")); var config = configuration.Get<BasicConfig>(); if (config == null) { Console.WriteLine(\"The configuration file could not be loaded.\"); return; }"
  },
  "guides/getting_started/first_bot.html": {
    "href": "guides/getting_started/first_bot.html",
    "title": "Start making a bot | PixelPilot",
    "keywords": "Note This guide assumes you have basic knowledge about C# and NuGet. If you don't, start learning it today! Installation The main package PixelPilot.Core can be found on NuGet. Install the latest version to start using the API. Your first bot PixelPilot.Core makes it easy to get a bot up and running. You can either provide the PixelPilotClient with a token, or by using your email and password directly. The token can be found in the local storage of your browser. # Create a bot by using a token var client = new PixelPilotClient(\"Your account token\"); # Create a bot by using var client = new PixelPilotClient(\"bot@pixelpilot.com\", \"super secret password\"); After creating the client you probably, you can let the bot connect to a world. Each world has an unique world ID. When you join a world, the URL bar will display the following https://pixelwalker.net/world/<WORLD_ID>. Copy the world ID and use it to connect to the world. // Connect to a room. await client.Connect(\"r082b210d67df52\"); Our bot has now joined the world but it since the end of the program has been reached it will terminate. You can prevent this by adding the following code to the end of your program. // Don't terminate. Thread.Sleep(-1); That's it, you have now connected your first bot to the world!"
  },
  "guides/getting_started/manipulating_the_world.html": {
    "href": "guides/getting_started/manipulating_the_world.html",
    "title": "Manipulating the world | PixelPilot",
    "keywords": "Manipulating the world In the previous examples we have seen how to use basic packets. In this guide we will start manipulating the world. That's all what this game is about in the end! The World class In order to make World manipulation a bit easier PixelPilot.Core exposes a PixelWorld class. To parse the block packets can be quite complicated, so if you don't want to do this yourself, I highly recommend you use this class. To get started with the PixelWorld class, create an instance of it and ensure it receives packet updates from the client. // Create a PixelWorld class and attach the client to it. // Allow it to listen to client updates. Not required! var world = new PixelWorld(); client.OnPacketReceived += world.HandlePacket; We now have a world object that will keep track of blocks in the world, and dispatch events on block changes. The world has several layers. Each layer is used for a specific type of block. Currently there are two layers. The WorldLayer enum can be used for simplicity. Layer Description Enum 0 Background WorldLayer.Background 1 Foreground WorldLayer.Foreground In order to get a block at a specific coordinate and layer you can use the following snippet. We then check if it's a coin. Note that the block.Block gives us an enum. This enum can be cast to an INT if required. var worldBlock = world.BlockAt(layer, x, y); Console.WriteLine($\"Is this a coin? ({worldBlock.Block == PixelBlock.Coin})\"); Console.WriteLine($\"It is a: {worldBlock.Block} with ID {block.BlockId}\"); Blocks with additional data. Some blocks contain additional data. Think about portals, gates, signs, etc. To access this data, you can simply cast the IPixelBlock to it's desired type. In this example we will check for portal block. var worldBlock = world.BlockAt(layer, x, y); if (worldBlock is PortalBlock portalBlock) { Console.WriteLine($\"It is a portal with target {portalBlock.TargetId}\"); } else { Console.WriteLine(\"The block is not a portal.\"); } Tip The 'is' keyword is used to cast the object. For more information about casting check here Sending blocks In order to send your own blocks you can simply create an instance of the class. A block placement also needs a location, so we wrap the block with the PlacedBlock class. BasicBlock block = new BasicBlock((int) PixelBlock.Crown); PlacedBlock placedBlock = new PlacedBlock(x, y, WorldLayer.Foreground, block); client.Send(placedBlock.AsPacketOut()); That's it, you have send a block! Example: Blocking the crown! Lets say we want to disable people from placing a crown block. In order to do this, we need to listen to any blocks being placed in our world. The following code snippet can be used to achieve the actions we want. world.OnBlockPlaced += (_, playerId, oldBlock, newBlock) => { // Ignore our own bot if (client.BotId == playerId) return; if (newBlock.Block.Block != PixelBlock.Crown) return; client.Send(oldBlock.AsPacketOut()); };"
  },
  "guides/getting_started/player_management.html": {
    "href": "guides/getting_started/player_management.html",
    "title": "Player Management | PixelPilot",
    "keywords": "Player Management The game only sends updates about players only once. In order to make keep track of players in your world you can use the PlayerManager. This manager keeps tracks of players in your world and easily allows you to fetch their latest information. The following code snippet initializes the manager and ensures it receives the packets from the client. // Player manager allows you to easily keep track of player stats. // For advanced users, it can be extended to include relevant information for you. var playerManager = new PlayerManager(); client.OnPacketReceived += playerManager.HandlePacket; You now have access to the players stats at all time. This can be used in for example a .ping command that sends back the players name. client.OnPacketReceived += (_, packet) => { // Make use of strongly typed packets! switch (packet) { case PlayerChatPacket { Message: \".ping\" } chat: { var player = playerManager.GetPlayer(chat.PlayerId); if (player == null) return; client.Send(new PlayerChatOutPacket($\"Pong! ({player.Username}, {player.X}, {player.Y})\")); break; } } }; Advanced usage: Making your own player class When making a minigame you might need to store more information about the player. The API allows you to define your own player class that can still be used by the manager. The following steps should be taken: Create your own Player class that implements IPixelPlayer. Create your own PlayerManager which extends PixelPlayerManager. Start using your own implementation of IPixelPlayer and PixelPlayerManger! The default classes Player and PlayerManager used in this guide are created in the same way."
  },
  "guides/getting_started/using_packets.html": {
    "href": "guides/getting_started/using_packets.html",
    "title": "Using Packets | PixelPilot",
    "keywords": "Using packets The game communicates with your bot using Packets (Block placed, Smiley changed, Player moved, etc). PixelPilot.Core provides some abstraction so you don't have to construct these yourself. To start listening to incoming packets the game simply use the OnPacketReceived event handler of the client. // Executed when the client receives a packet! client.OnPacketReceived += (_, packet) => { Console.WriteLine(\"I received a packet\"); } All incoming packets implement the interface IPixelGamePacket. Packets that are related to a player implement an addtional interface called IPixelGamePlayerPacket. Packets that you can send implement the interface 'IPixelGamePacketOut'. We will get to sending packets in a bit. A list of all incoming and outgoing packets can be found here: Packet Type Documentation Incoming List Outgoing List Handling specific packets (Giving god on join) Executing something on each packet received is not that useful. Luckily, with the use of some casting we can easily execute actions when we receive a specific packet. Since the packets are strongly typed, we can use a switch statement to do some more useful things. In the following code snippet, we check for the join packet. If we get it we get the username from it. After that we send the PlayerChatOutPacket with the username of the joined player. // Make use of strongly typed packets! switch (packet) { case PlayerJoinPacket join: client.Send(new PlayerChatOutPacket($\"/givegod {join.Username}\")); break; } All packets that can be send contain the word Out. This indicates that it's an outgoing packet. All outgoing packets can be found in the previously seen table. For blocks, there is a different method of constructing the packet which we will see in a later guide. We will now extend this example with a simple .stop command for the bot. Note that everyone can stop the bot. // Make use of strongly typed packets! switch (packet) { case PlayerChatPacket { Message: \".stop\" }: client.Disconnect(); Environment.Exit(0); return; case PlayerJoinPacket join: client.Send(new PlayerChatOutPacket($\"/givegod {join.Username}\")); break; } That's it, you made a simple bot that responds to incoming packets and sends packets to the game!"
  },
  "guides/introduction.html": {
    "href": "guides/introduction.html",
    "title": "Introduction | PixelPilot",
    "keywords": "Introduction Welcome to the documentation of PixelPilot. To get started with your own bot visit Start making a bot"
  },
  "index.html": {
    "href": "index.html",
    "title": "Home | PixelPilot",
    "keywords": "Pixel Pilot A C# library for interacting with the game PixelWalker Features Strongly typed packets. PixelPilotCore has minor abstractions. Split into multiple projects. Use only what you need."
  }
}